swagger: '2.0'
schemes:
  - https
host: datastore.googleapis.com
basePath: /
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: |
    Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application.
  title: Cloud Datastore
  version: v1beta1
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-apisguru-categories:
    - storage
  x-logo:
    url: 'https://cloud.google.com/_static/images/new-gcp-logo.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.6.2
      format: google
      url: 'https://datastore.googleapis.com/$discovery/rest?version=v1beta1'
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: datastore
externalDocs:
  url: 'https://cloud.google.com/datastore/'
securityDefinitions:
  Oauth2:
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    description: Oauth 2.0 authentication
    flow: implicit
    scopes:
      'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
      'https://www.googleapis.com/auth/datastore': View and manage your Google Cloud Datastore data
    type: oauth2
parameters:
  $.xgafv:
    description: V1 error format.
    enum:
      - '1'
      - '2'
    in: query
    name: $.xgafv
    type: string
  access_token:
    description: OAuth access token.
    in: query
    name: access_token
    type: string
  alt:
    default: json
    description: Data format for response.
    enum:
      - json
      - media
      - proto
    in: query
    name: alt
    type: string
  bearer_token:
    description: OAuth bearer token.
    in: query
    name: bearer_token
    type: string
  callback:
    description: JSONP
    in: query
    name: callback
    type: string
  fields:
    description: Selector specifying which fields to include in a partial response.
    in: query
    name: fields
    type: string
  key:
    description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
    in: query
    name: key
    type: string
  oauth_token:
    description: OAuth 2.0 token for the current user.
    in: query
    name: oauth_token
    type: string
  pp:
    default: true
    description: Pretty-print response.
    in: query
    name: pp
    type: boolean
  prettyPrint:
    default: true
    description: Returns response with indentations and line breaks.
    in: query
    name: prettyPrint
    type: boolean
  quotaUser:
    description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
    in: query
    name: quotaUser
    type: string
  uploadType:
    description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
    in: query
    name: uploadType
    type: string
  upload_protocol:
    description: 'Upload protocol for media (e.g. "raw", "multipart").'
    in: query
    name: upload_protocol
    type: string
tags:
  - name: projects
paths:
  '/v1beta1/projects/{projectId}:export':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Exports a copy of all or a subset of entities from Google Cloud Datastore
        to another storage system, such as Google Cloud Storage. Recent updates to
        entities may not be reflected in the export. The export occurs in the
        background and its progress can be monitored and managed via the
        Operation resource that is created. The output of an export may only be
        used once the associated operation is done. If an export operation is
        cancelled before completion it may leave partial data behind in Google
        Cloud Storage.
      operationId: datastore.projects.export
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoogleDatastoreAdminV1beta1ExportEntitiesRequest'
        - description: Project ID against which to make the request.
          in: path
          name: projectId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GoogleLongrunningOperation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
  '/v1beta1/projects/{projectId}:import':
    parameters:
      - $ref: '#/parameters/$.xgafv'
      - $ref: '#/parameters/access_token'
      - $ref: '#/parameters/alt'
      - $ref: '#/parameters/bearer_token'
      - $ref: '#/parameters/callback'
      - $ref: '#/parameters/fields'
      - $ref: '#/parameters/key'
      - $ref: '#/parameters/oauth_token'
      - $ref: '#/parameters/pp'
      - $ref: '#/parameters/prettyPrint'
      - $ref: '#/parameters/quotaUser'
      - $ref: '#/parameters/uploadType'
      - $ref: '#/parameters/upload_protocol'
    post:
      description: |-
        Imports entities into Google Cloud Datastore. Existing entities with the
        same key are overwritten. The import occurs in the background and its
        progress can be monitored and managed via the Operation resource that is
        created. If an ImportEntities operation is cancelled, it is possible
        that a subset of the data has already been imported to Cloud Datastore.
      operationId: datastore.projects.import
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/GoogleDatastoreAdminV1beta1ImportEntitiesRequest'
        - description: Project ID against which to make the request.
          in: path
          name: projectId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GoogleLongrunningOperation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/datastore'
      tags:
        - projects
definitions:
  GoogleDatastoreAdminV1CommonMetadata:
    description: Metadata common to all Datastore Admin operations.
    properties:
      endTime:
        description: 'The time the operation ended, either successfully or otherwise.'
        format: google-datetime
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          The client-assigned labels which were provided when the operation was
          created. May also include additional labels.
        type: object
      operationType:
        description: |-
          The type of the operation. Can be used as a filter in
          ListOperationsRequest.
        enum:
          - OPERATION_TYPE_UNSPECIFIED
          - EXPORT_ENTITIES
          - IMPORT_ENTITIES
        type: string
      startTime:
        description: The time that work began on the operation.
        format: google-datetime
        type: string
      state:
        description: The current state of the Operation.
        enum:
          - STATE_UNSPECIFIED
          - INITIALIZING
          - PROCESSING
          - CANCELLING
          - FINALIZING
          - SUCCESSFUL
          - FAILED
          - CANCELLED
        type: string
    type: object
  GoogleDatastoreAdminV1EntityFilter:
    description: |-
      Identifies a subset of entities in a project. This is specified as
      combinations of kinds and namespaces (either or both of which may be all, as
      described in the following examples).
      Example usage:

      Entire project:
        kinds=[], namespace_ids=[]

      Kinds Foo and Bar in all namespaces:
        kinds=['Foo', 'Bar'], namespace_ids=[]

      Kinds Foo and Bar only in the default namespace:
        kinds=['Foo', 'Bar'], namespace_ids=['']

      Kinds Foo and Bar in both the default and Baz namespaces:
        kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']

      The entire Baz namespace:
        kinds=[], namespace_ids=['Baz']
    properties:
      kinds:
        description: 'If empty, then this represents all kinds.'
        items:
          type: string
        type: array
      namespaceIds:
        description: |-
          An empty list represents all namespaces. This is the preferred
          usage for projects that don't use namespaces.

          An empty string element represents the default namespace. This should be
          used if the project has data in non-default namespaces, but doesn't want to
          include them.
          Each namespace in this list must be unique.
        items:
          type: string
        type: array
    type: object
  GoogleDatastoreAdminV1ExportEntitiesMetadata:
    description: Metadata for ExportEntities operations.
    properties:
      common:
        $ref: '#/definitions/GoogleDatastoreAdminV1CommonMetadata'
        description: Metadata common to all Datastore Admin operations.
      entityFilter:
        $ref: '#/definitions/GoogleDatastoreAdminV1EntityFilter'
        description: Description of which entities are being exported.
      outputUrlPrefix:
        description: |-
          Location for the export metadata and data files. This will be the same
          value as the
          google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix
          field. The final output location is provided in
          google.datastore.admin.v1.ExportEntitiesResponse.output_url.
        type: string
      progressBytes:
        $ref: '#/definitions/GoogleDatastoreAdminV1Progress'
        description: An estimate of the number of bytes processed.
      progressEntities:
        $ref: '#/definitions/GoogleDatastoreAdminV1Progress'
        description: An estimate of the number of entities processed.
    type: object
  GoogleDatastoreAdminV1ExportEntitiesResponse:
    description: |-
      The response for
      google.datastore.admin.v1.DatastoreAdmin.ExportEntities.
    properties:
      outputUrl:
        description: |-
          Location of the output metadata file. This can be used to begin an import
          into Cloud Datastore (this project or another project). See
          google.datastore.admin.v1.ImportEntitiesRequest.input_url.
          Only present if the operation completed successfully.
        type: string
    type: object
  GoogleDatastoreAdminV1ImportEntitiesMetadata:
    description: Metadata for ImportEntities operations.
    properties:
      common:
        $ref: '#/definitions/GoogleDatastoreAdminV1CommonMetadata'
        description: Metadata common to all Datastore Admin operations.
      entityFilter:
        $ref: '#/definitions/GoogleDatastoreAdminV1EntityFilter'
        description: Description of which entities are being imported.
      inputUrl:
        description: |-
          The location of the import metadata file. This will be the same value as
          the google.datastore.admin.v1.ExportEntitiesResponse.output_url field.
        type: string
      progressBytes:
        $ref: '#/definitions/GoogleDatastoreAdminV1Progress'
        description: An estimate of the number of bytes processed.
      progressEntities:
        $ref: '#/definitions/GoogleDatastoreAdminV1Progress'
        description: An estimate of the number of entities processed.
    type: object
  GoogleDatastoreAdminV1Progress:
    description: Measures the progress of a particular metric.
    properties:
      workCompleted:
        description: |-
          The amount of work that has been completed. Note that this may be greater
          than work_estimated.
        format: int64
        type: string
      workEstimated:
        description: |-
          An estimate of how much work needs to be performed. May be zero if the
          work estimate is unavailable.
        format: int64
        type: string
    type: object
  GoogleDatastoreAdminV1beta1CommonMetadata:
    description: Metadata common to all Datastore Admin operations.
    properties:
      endTime:
        description: 'The time the operation ended, either successfully or otherwise.'
        format: google-datetime
        type: string
      labels:
        additionalProperties:
          type: string
        description: |-
          The client-assigned labels which were provided when the operation was
          created. May also include additional labels.
        type: object
      operationType:
        description: |-
          The type of the operation. Can be used as a filter in
          ListOperationsRequest.
        enum:
          - OPERATION_TYPE_UNSPECIFIED
          - EXPORT_ENTITIES
          - IMPORT_ENTITIES
        type: string
      startTime:
        description: The time that work began on the operation.
        format: google-datetime
        type: string
      state:
        description: The current state of the Operation.
        enum:
          - STATE_UNSPECIFIED
          - INITIALIZING
          - PROCESSING
          - CANCELLING
          - FINALIZING
          - SUCCESSFUL
          - FAILED
          - CANCELLED
        type: string
    type: object
  GoogleDatastoreAdminV1beta1EntityFilter:
    description: |-
      Identifies a subset of entities in a project. This is specified as
      combinations of kinds and namespaces (either or both of which may be all, as
      described in the following examples).
      Example usage:

      Entire project:
        kinds=[], namespace_ids=[]

      Kinds Foo and Bar in all namespaces:
        kinds=['Foo', 'Bar'], namespace_ids=[]

      Kinds Foo and Bar only in the default namespace:
        kinds=['Foo', 'Bar'], namespace_ids=['']

      Kinds Foo and Bar in both the default and Baz namespaces:
        kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']

      The entire Baz namespace:
        kinds=[], namespace_ids=['Baz']
    properties:
      kinds:
        description: 'If empty, then this represents all kinds.'
        items:
          type: string
        type: array
      namespaceIds:
        description: |-
          An empty list represents all namespaces. This is the preferred
          usage for projects that don't use namespaces.

          An empty string element represents the default namespace. This should be
          used if the project has data in non-default namespaces, but doesn't want to
          include them.
          Each namespace in this list must be unique.
        items:
          type: string
        type: array
    type: object
  GoogleDatastoreAdminV1beta1ExportEntitiesMetadata:
    description: Metadata for ExportEntities operations.
    properties:
      common:
        $ref: '#/definitions/GoogleDatastoreAdminV1beta1CommonMetadata'
        description: Metadata common to all Datastore Admin operations.
      entityFilter:
        $ref: '#/definitions/GoogleDatastoreAdminV1beta1EntityFilter'
        description: Description of which entities are being exported.
      outputUrlPrefix:
        description: |-
          Location for the export metadata and data files. This will be the same
          value as the
          google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix
          field. The final output location is provided in
          google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
        type: string
      progressBytes:
        $ref: '#/definitions/GoogleDatastoreAdminV1beta1Progress'
        description: An estimate of the number of bytes processed.
      progressEntities:
        $ref: '#/definitions/GoogleDatastoreAdminV1beta1Progress'
        description: An estimate of the number of entities processed.
    type: object
  GoogleDatastoreAdminV1beta1ExportEntitiesRequest:
    description: |-
      The request for
      google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.
    properties:
      entityFilter:
        $ref: '#/definitions/GoogleDatastoreAdminV1beta1EntityFilter'
        description: Description of what data from the project is included in the export.
      labels:
        additionalProperties:
          type: string
        description: Client-assigned labels.
        type: object
      outputUrlPrefix:
        description: |-
          Location for the export metadata and data files.

          The full resource URL of the external storage location. Currently, only
          Google Cloud Storage is supported. So output_url_prefix should be of the
          form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the
          name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud
          Storage namespace path (this is not a Cloud Datastore namespace). For more
          information about Cloud Storage namespace paths, see
          [Object name
          considerations](https://cloud.google.com/storage/docs/naming#object-considerations).

          The resulting files will be nested deeper than the specified URL prefix.
          The final output URL will be provided in the
          google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url
          field. That value should be used for subsequent ImportEntities operations.

          By nesting the data files deeper, the same Cloud Storage bucket can be used
          in multiple ExportEntities operations without conflict.
        type: string
    type: object
  GoogleDatastoreAdminV1beta1ExportEntitiesResponse:
    description: |-
      The response for
      google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.
    properties:
      outputUrl:
        description: |-
          Location of the output metadata file. This can be used to begin an import
          into Cloud Datastore (this project or another project). See
          google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url.
          Only present if the operation completed successfully.
        type: string
    type: object
  GoogleDatastoreAdminV1beta1ImportEntitiesMetadata:
    description: Metadata for ImportEntities operations.
    properties:
      common:
        $ref: '#/definitions/GoogleDatastoreAdminV1beta1CommonMetadata'
        description: Metadata common to all Datastore Admin operations.
      entityFilter:
        $ref: '#/definitions/GoogleDatastoreAdminV1beta1EntityFilter'
        description: Description of which entities are being imported.
      inputUrl:
        description: |-
          The location of the import metadata file. This will be the same value as
          the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url
          field.
        type: string
      progressBytes:
        $ref: '#/definitions/GoogleDatastoreAdminV1beta1Progress'
        description: An estimate of the number of bytes processed.
      progressEntities:
        $ref: '#/definitions/GoogleDatastoreAdminV1beta1Progress'
        description: An estimate of the number of entities processed.
    type: object
  GoogleDatastoreAdminV1beta1ImportEntitiesRequest:
    description: |-
      The request for
      google.datastore.admin.v1beta1.DatastoreAdmin.ImportEntities.
    properties:
      entityFilter:
        $ref: '#/definitions/GoogleDatastoreAdminV1beta1EntityFilter'
        description: |-
          Optionally specify which kinds/namespaces are to be imported. If provided,
          the list must be a subset of the EntityFilter used in creating the export,
          otherwise a FAILED_PRECONDITION error will be returned. If no filter is
          specified then all entities from the export are imported.
      inputUrl:
        description: |-
          The full resource URL of the external storage location. Currently, only
          Google Cloud Storage is supported. So input_url should be of the form:
          `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where
          `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is
          an optional Cloud Storage namespace path (this is not a Cloud Datastore
          namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written
          by the ExportEntities operation. For more information about Cloud Storage
          namespace paths, see
          [Object name
          considerations](https://cloud.google.com/storage/docs/naming#object-considerations).

          For more information, see
          google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
        type: string
      labels:
        additionalProperties:
          type: string
        description: Client-assigned labels.
        type: object
    type: object
  GoogleDatastoreAdminV1beta1Progress:
    description: Measures the progress of a particular metric.
    properties:
      workCompleted:
        description: |-
          The amount of work that has been completed. Note that this may be greater
          than work_estimated.
        format: int64
        type: string
      workEstimated:
        description: |-
          An estimate of how much work needs to be performed. May be zero if the
          work estimate is unavailable.
        format: int64
        type: string
    type: object
  GoogleLongrunningOperation:
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
    properties:
      done:
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
        type: boolean
      error:
        $ref: '#/definitions/Status'
        description: The error result of the operation in case of failure or cancellation.
      metadata:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        type: object
      name:
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should have the format of `operations/some/unique/name`.
        type: string
      response:
        additionalProperties:
          description: Properties of the object. Contains field @type with type URL.
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        type: object
    type: object
  Status:
    description: |-
      The `Status` type defines a logical error model that is suitable for different
      programming environments, including REST APIs and RPC APIs. It is used by
      [gRPC](https://github.com/grpc). The error model is designed to be:

      - Simple to use and understand for most users
      - Flexible enough to meet unexpected needs

      # Overview

      The `Status` message contains three pieces of data: error code, error message,
      and error details. The error code should be an enum value of
      google.rpc.Code, but it may accept additional error codes if needed.  The
      error message should be a developer-facing English message that helps
      developers *understand* and *resolve* the error. If a localized user-facing
      error message is needed, put the localized message in the error details or
      localize it in the client. The optional error details may contain arbitrary
      information about the error. There is a predefined set of error detail types
      in the package `google.rpc` that can be used for common error conditions.

      # Language mapping

      The `Status` message is the logical representation of the error model, but it
      is not necessarily the actual wire format. When the `Status` message is
      exposed in different client libraries and different wire protocols, it can be
      mapped differently. For example, it will likely be mapped to some exceptions
      in Java, but more likely mapped to some error codes in C.

      # Other uses

      The error model and the `Status` message can be used in a variety of
      environments, either with or without APIs, to provide a
      consistent developer experience across different environments.

      Example uses of this error model include:

      - Partial errors. If a service needs to return partial errors to the client,
          it may embed the `Status` in the normal response to indicate the partial
          errors.

      - Workflow errors. A typical workflow has multiple steps. Each step may
          have a `Status` message for error reporting.

      - Batch operations. If a client uses batch request and batch response, the
          `Status` message should be used directly inside batch response, one for
          each error sub-response.

      - Asynchronous operations. If an API call embeds asynchronous operation
          results in its response, the status of those operations should be
          represented directly using the `Status` message.

      - Logging. If some API errors are stored in logs, the message `Status` could
          be used directly after any stripping needed for security/privacy reasons.
    properties:
      code:
        description: 'The status code, which should be an enum value of google.rpc.Code.'
        format: int32
        type: integer
      details:
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
        items:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
          type: object
        type: array
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          google.rpc.Status.details field, or localized by the client.
        type: string
    type: object
