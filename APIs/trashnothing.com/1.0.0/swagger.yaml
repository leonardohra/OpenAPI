swagger: '2.0'
schemes:
  - https
host: trashnothing.com
basePath: /api/v1.0
info:
  contact:
    x-twitter: trashnothing
  description: |
    This is the REST API for [trashnothing.com](https://trashnothing.com).

    To learn more about the API or to register your app for use with the API
    visit the [trash nothing! Developer page](https://trashnothing.com/developer).
  termsOfService: |
    https://trashnothing.com/tos
  title: trash nothing!
  version: 1.0.0
  x-apisguru-categories:
    - social
  x-logo:
    url: 'https://twitter.com/trashnothing/profile_image?size=original'
  x-origin:
    - format: swagger
      url: 'https://trashnothing.com/api/trashnothing-openapi.yaml'
      version: '2.0'
  x-providerName: trashnothing.com
securityDefinitions:
  api_key:
    description: |
      Provides access to specific public API endpoints which don't require user authorization. <br /><br /> The API currently allows api key access to list, search and retrieve posts (for public posts and posts on open archive groups) and to list, search and retrieve groups. <br /><br /> NOTE: Some API endpoints behave differently when requests are made using api keys instead of oauth (because api key requests have no user associated with them).  Check the documentation for each endpoint for a description of the differences.
    in: query
    name: api_key
    type: apiKey
  oauth2_code:
    authorizationUrl: 'https://trashnothing.com/oauth2/authorize'
    description: |
      This OAuth2 flow is designed for server side apps and is not enabled by default for new apps. If you would like to use this flow for your app, contact us through the [trash nothing! Developer page](https://trashnothing.com/developer).
    flow: accessCode
    scopes:
      basic: Provides full access to a user's account
    tokenUrl: 'https://trashnothing.com/oauth2/token'
    type: oauth2
  oauth2_implicit:
    authorizationUrl: 'https://trashnothing.com/oauth2/authorize'
    description: |
      This is the default OAuth2 flow for new apps.
    flow: implicit
    scopes:
      basic: Provides full access to a user's account
    type: oauth2
security:
  - oauth2_implicit:
      - basic
  - oauth2_code:
      - basic
tags:
  - description: Retrieve and update user data.
    name: users
  - description: Retrieve and update posts.
    name: posts
  - description: 'Search, subscribe and unsubscribe to groups.'
    name: groups
  - description: 'Upload, delete and rotate photos.'
    name: photos
  - description: Miscellaneous functionality.
    name: misc
paths:
  /feedback:
    post:
      consumes:
        - multipart/form-data
      description: Allows users to send feedback about the trashnothing.com site or apps.
      operationId: send_feedback
      parameters:
        - description: The subject.
          in: formData
          name: subject
          required: true
          type: string
        - description: The message.
          in: formData
          name: message
          required: true
          type: string
        - description: |
            Extra information set by the client that may be useful to contextualize the feedback (eg. operating system details, browser details, app details, device details).
          in: formData
          name: meta
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The feedback has been sent.
      summary: Send feedback
      tags:
        - misc
  /groups:
    get:
      operationId: search_groups
      parameters:
        - description: Find groups that have the given text somewhere in their name (case insensitive).
          in: query
          name: name
          required: false
          type: string
        - description: Find groups near the given latitude and longitude.
          in: query
          name: latitude
          required: false
          type: number
        - description: Find groups near the given latitude and longitude.
          in: query
          name: longitude
          required: false
          type: number
        - default: 100
          description: |
            When latitude and longitude are passed, distance can optionally be passed to only return groups within a certain distance (in kilometers) from the point specified by the latitude and longitude.  The distance must be > 0 and <= 150 and will default to 100.
          in: query
          maximum: 150
          minimum: 0
          name: distance
          required: false
          type: number
        - description: |
            Find groups in the given country where country is a 2 letter country code for the country (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ).
          in: query
          name: country
          required: false
          type: string
        - description: |
            For countries with regions (AU, CA, GB, US), search groups in a specific region as specified by the region abbreviation.  The supported regions and their abbreviations are listed below. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority. <br /><br /> --- <br /><br /> **AU**<br /> - QLD: Queensland<br /> - SA: South Australia<br /> - TAS: Tasmania<br /> - VIC: Victoria<br /> - WA: Western Australia<br /> - NT: Northern Territory<br /> - NSW: New South Wales - ACT<br /> <br /> **CA**<br /> - AB: Alberta<br /> - BC: British Columbia<br /> - MB: Manitoba<br /> - NB: New Brunswick<br /> - NL: Newfoundland and Labrador<br /> - NS: Nova Scotia<br /> - ON: Ontario<br /> - QC: Quebec<br /> - SK: Saskatchewan<br /> - PE: Prince Edward Island<br /> <br /> **GB**<br /> - E: East<br /> - EM: East Midlands<br /> - LDN: London<br /> - NE: North East<br /> - NW: North West<br /> - NI: Northern Ireland<br /> - SC: Scotland<br /> - SE: South East<br /> - SW: South West<br /> - WA: Wales<br /> - WM: West Midlands<br /> - YH: Yorkshire and the Humber<br /> <br /> **US**<br /> All 50 states and the District of Columbia are supported.  For the abbreviations, see: https://github.com/jasonong/List-of-US-States/blob/master/states.csv
          in: query
          name: region
          required: false
          type: string
        - description: |
            Find groups in the given postal code.  Only a few countries support postal code searches (US, CA, AU, GB).  The country parameter must be passed when the postal_code parameter is set. <br /><br /> NOTE: The region and postal_code parameters cannot be used at the same time and if both are passed then the postal_code will take priority.
          in: query
          name: postal_code
          required: false
          type: string
        - default: 1
          description: The page of groups to return.
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 20
          description: The number of groups to return per page (must be >= 1 and <= 100).
          in: query
          maximum: 100
          minimum: 1
          name: per_page
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: The groups and paging data.
          schema:
            properties:
              end_index:
                description: The index of the last group being returned (an integer between start_index and num_groups).
                type: integer
              groups:
                items:
                  $ref: '#/definitions/Group'
                type: array
              num_groups:
                description: The total number of groups available.
                type: integer
              num_pages:
                description: The total number of pages available.
                type: integer
              page:
                description: The page number of the groups being returned.
                type: integer
              per_page:
                description: The number of groups being returned per page.
                type: integer
              start_index:
                description: The index of the first group being returned (an integer between 1 and num_groups).
                type: integer
            type: object
        '400':
          description: Missing or invalid parameters.
      security:
        - oauth2_implicit:
            - basic
        - oauth2_code:
            - basic
        - api_key: []
      summary: Search groups
      tags:
        - groups
  /groups/multiple:
    get:
      operationId: get_groups_by_ids
      parameters:
        - description: 'The IDs of the groups to retrieve.  If more than 20 group IDs are passed, only the first 20 groups will be returned.'
          in: query
          name: group_ids
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The groups.
          schema:
            items:
              $ref: '#/definitions/Group'
            type: array
        '400':
          description: Missing or invalid parameters.
      security:
        - oauth2_implicit:
            - basic
        - oauth2_code:
            - basic
        - api_key: []
      summary: Retrieve multiple groups
      tags:
        - groups
  /groups/subscribe:
    post:
      consumes:
        - multipart/form-data
      description: |
        Request membership to one or more groups. <br /><br /> NOTE: Any group with a has_questions field set to true will also require answers to the groups' new member questionnaire to be submitted.  Groups waiting for answers will have their membership field set to 'pending-questions'.  And the questionnaire that needs to be answered can be found in the membership.questionnaire field of the group.
      operationId: join_groups
      parameters:
        - description: A comma separated list of the IDs of the groups to join.
          in: formData
          name: group_ids
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The groups with updated membership data.
          schema:
            properties:
              groups:
                description: Updated data about the groups and the current users' membership to each group.
                items:
                  $ref: '#/definitions/Group'
                type: array
              over_group_limit:
                description: |
                  When this is true, it means that some of the membership requests weren't processed in order to keep the user from going over the 12 group limit (the membership field of the groups can be used to determine which requests were processed).
                type: boolean
            type: object
        '400':
          description: Missing or invalid parameters.
        '404':
          description: Group not found.
      summary: Join groups
      tags:
        - groups
  '/groups/{group_id}':
    get:
      operationId: get_group
      parameters:
        - description: The ID of the group to retrieve.
          in: path
          name: group_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The group.
          schema:
            $ref: '#/definitions/Group'
        '404':
          description: Group not found.
      security:
        - oauth2_implicit:
            - basic
        - oauth2_code:
            - basic
        - api_key: []
      summary: Retrieve a group
      tags:
        - groups
  '/groups/{group_id}/answers':
    post:
      consumes:
        - application/json
      description: |
        Submits answers to a groups' membership questionnaire. <br /><br /> The request body should be a JSON object mapping each question from the group membership.questionnaire.questions field to an answer (eg. {"Where do you live?": "New York City"} ). All questions are required so no null or empty string answers are allowed.
      operationId: submit_answers
      parameters:
        - description: The group ID of the group that the user is submitting answers for.
          in: path
          name: group_id
          required: true
          type: string
        - description: |
            A JSON object mapping each question from the group membership.questionnaire.questions field to an answer (eg. {"Where do you live?": "New York City"} ). All questions are required so no null or empty string answers are allowed.
          in: body
          name: body
          required: true
          schema:
            additionalProperties:
              type: string
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: The updated group.
          schema:
            $ref: '#/definitions/Group'
        '400':
          description: Missing or invalid answers or questions were already answered or questions don't need to be answered.
        '404':
          description: Group not found.
      summary: Submit group answers
      tags:
        - groups
  '/groups/{group_id}/contact':
    post:
      consumes:
        - multipart/form-data
      operationId: contact_moderators
      parameters:
        - description: The group ID of the group whose moderators will be contacted.
          in: path
          name: group_id
          required: true
          type: string
        - description: The subject of the message.
          in: formData
          name: subject
          required: true
          type: string
        - description: The body of the message.
          in: formData
          name: message
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Message was sent to moderators.
        '400':
          description: Missing or invalid parameters.
        '404':
          description: Group not found.
      summary: Contact group moderators
      tags:
        - groups
  '/groups/{group_id}/unsubscribe':
    post:
      consumes:
        - multipart/form-data
      operationId: leave_group
      parameters:
        - description: The ID of the group to leave.
          in: path
          name: group_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Updated data about the group and the current users' membership.
          schema:
            $ref: '#/definitions/Group'
        '400':
          description: The current user is not an active or pending member of the given group.
        '404':
          description: Group not found.
      summary: Leave a group
      tags:
        - groups
  /photos:
    post:
      consumes:
        - multipart/form-data
      operationId: upload_photo
      parameters:
        - description: Photo to upload.
          in: formData
          name: photo
          required: true
          type: file
        - description: A client created identifier used to associate a photo or set of photos with a post (a  random number will work - must be <= 32 characters).
          in: formData
          name: upload_key
          required: true
          type: string
        - default: 1
          description: Client device pixel ratio used to determine thumbnail size (default 1.0).
          in: formData
          name: device_pixel_ratio
          required: false
          type: number
      produces:
        - application/json
      responses:
        '200':
          description: Photo created.
          schema:
            $ref: '#/definitions/PhotoResult'
        '400':
          description: Invalid upload_key or photo.
      summary: Create a photo
      tags:
        - photos
  '/photos/{photo_id}':
    delete:
      operationId: delete_photo
      parameters:
        - in: path
          name: photo_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Photo deleted.
        '400':
          description: Invalid photo.
        '403':
          description: The user doesn't have permission to delete the photo.
        '404':
          description: Photo not found.
      summary: Delete a photo
      tags:
        - photos
  '/photos/{photo_id}/rotate':
    post:
      operationId: rotate_photo
      parameters:
        - in: path
          name: photo_id
          required: true
          type: string
        - description: 'Rotation in degrees - currently only 90, 180 and 270 are supported which correspond to rotate left, rotate upside down and rotate right.'
          in: query
          name: degrees
          required: true
          type: integer
        - default: 1
          description: Client device pixel ratio used to determine thumbnail size (default 1.0).
          in: query
          name: device_pixel_ratio
          required: false
          type: number
      produces:
        - application/json
      responses:
        '200':
          description: Photo rotated.
          schema:
            $ref: '#/definitions/PhotoResult'
        '400':
          description: Invalid photo.
        '403':
          description: The user doesn't have permission to rotate the photo.
        '404':
          description: Photo not found.
      summary: Rotate a photo
      tags:
        - photos
  /posts:
    get:
      description: |
        Only posts from the last 30 days will be returned. <br /><br /> NOTE: Passing the latitude, longitude and radius parameters filters all posts by their location and so these parameters will temporarily override the current users' location preferences. When latitude, longitude and radius are not specified, public posts will be filtered by the current users' location preferences.
      operationId: get_posts
      parameters:
        - description: |
            A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
          in: query
          name: types
          required: true
          type: string
        - description: |
            A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group.
          in: query
          name: sources
          required: true
          type: string
        - default: The group IDs of every group the current user is a member of.
          description: |
            A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of will be used (the group IDs of other groups will be silently discarded). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded).
          in: query
          name: group_ids
          required: false
          type: string
        - default: 20
          description: The number of posts to return per page (must be >= 1 and <= 100).
          in: query
          maximum: 100
          minimum: 1
          name: per_page
          required: false
          type: integer
        - default: 1
          description: The page of posts to return.
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 1
          description: Client device pixel ratio used to determine thumbnail size (default 1.0).
          in: query
          name: device_pixel_ratio
          required: false
          type: number
        - description: |
            The latitude of a point around which to return posts.
          in: query
          name: latitude
          required: false
          type: number
        - description: |
            The longitude of a point around which to return posts.
          in: query
          name: longitude
          required: false
          type: number
        - description: |
            The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
          in: query
          maximum: 257500
          minimum: 0
          name: radius
          required: false
          type: number
      produces:
        - application/json
      responses:
        '200':
          description: The posts and paging data.
          schema:
            properties:
              end_index:
                description: The index of the last post being returned (an integer between start_index and num_posts).
                type: integer
              last_listings_view:
                description: |
                  The date and time when the current user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page. <br /><br /> NOTE: For requests using an api key instead of oauth, this field is always null.
                format: date-time
                type: string
              num_pages:
                description: The total number of pages available.
                type: integer
              num_posts:
                description: The total number of posts available.
                type: integer
              page:
                description: The page number of the posts being returned.
                type: integer
              per_page:
                description: The number of posts being returned per page.
                type: integer
              posts:
                items:
                  $ref: '#/definitions/Post'
                type: array
              start_index:
                description: The index of the first post being returned (an integer between 1 and num_posts).
                type: integer
            type: object
        '400':
          description: Missing or invalid parameters.
      security:
        - oauth2_implicit:
            - basic
        - oauth2_code:
            - basic
        - api_key: []
      summary: List posts
      tags:
        - posts
    post:
      consumes:
        - multipart/form-data
      description: |
        Submits a new post. <br /><br /> NOTE: An alternate way to submit posts that does quicker client side validation is to use the script served by the API at the /posts/client.js endpoint (see the description of the /posts/client.js endpoint for usage instructions).
      operationId: submit_post
      parameters:
        - description: A comma separated list of group IDs to submit the post to (if any).
          in: formData
          name: group_ids
          required: false
          type: string
        - description: |
            The type of post.  One of: offer, wanted
          in: formData
          name: type
          required: true
          type: string
        - description: A short description of the item(s).
          in: formData
          name: item
          required: true
          type: string
        - description: A short location description.
          in: formData
          name: location
          required: true
          type: string
        - description: A longer description of the item(s).
          in: formData
          name: content
          required: false
          type: string
        - description: 'If set to 1, the post will be posted with the Fair Offer Policy (only valid for offer posts - see https://trashnothing.com/fair_offer_policy ).'
          in: formData
          name: fair_offer
          required: false
          type: integer
        - description: |
            The latitude corresponding to the location description provided. <br /><br /> NOTE: This should NOT be the users' exact location because we don't want to publicize their exact location unless their location description is their full address.
          in: formData
          name: latitude
          required: true
          type: number
        - description: The longitude corresponding to the location description provided. (see the NOTE in latitude description)
          in: formData
          name: longitude
          required: true
          type: number
        - description: The upload_key used to upload any photos that should be attached to this post.
          in: formData
          name: upload_key
          required: false
          type: string
        - description: |
            A JSON string representing a temporary object that is used to store data about the submission process for a single post.  The first time a post is submitted, session should be a new empty object (eg. '{}').  The session object should be persisted by the client until that post is successfully submitted and then it can be discarded so that the next post will start over with a new empty session object.  Every time a post is submitted and the response indicates that the submission was not successful, the session object returned in the response should override the clients copy of the session.
          in: formData
          name: session
          required: true
          type: string
        - description: |
            A JSON string representing a permanent object that the client persists and modifies based on warnings returned by the post submission process and user input.  Some warnings returned after submitting a post have a preference_key string property so that users can opt out of those warnings in the future.  To save this opt-out preference, set the property indicated by the preference_key in the preferences object (eg. preferences[preference_key] = 1).  The preferences object is only read by submit_post and never modified - it is up to the client to initialize, modify and persist the preferences object.
          in: formData
          name: preferences
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Post submission result.
          schema:
            properties:
              message:
                description: Contains text describing the reason a post was not successful.  Is null on success.
                type: string
              preference_key:
                description: |
                  Certain types of warnings can be opted out of.  These warnings will set preference_key to a string that can be  set in the preferences object by the client to opt out of that type of warning in the future (see the description of the preferences parameter for more details).
                type: string
              result:
                description: |
                  One of: success, error, warning. <br /><br /> A success result indicates that the post was submitted successfully. Note that posts may not appear instantly after submission because the moderators of many groups may have additional automatic or manual review processes in place that can delay the publishing of a post. <br /><br /> An error result indicates that there is an error with the post to show the user and the message property will contain text describing the error. <br /><br /> A warning result indicates that there is a warning about the post to show the user and the message property will contain a string describing the warning.  A warning result doesn't prevent a post from being submitted, to continue the submission process after a warning result, just re-submit the post  (with the updated session object) to temporarily override that specific warning.
                type: string
              session:
                additionalProperties:
                  type: string
                description: The updated session object that should override the client's copy of the session that was passed in the session parameter.
                type: object
            type: object
        '400':
          description: Missing or invalid parameters.
      summary: Submit a post
      tags:
        - posts
  /posts/client.js:
    get:
      description: |
        Defines javascript functions that can be used to validate and submit posts.

        The advantage of using these functions versus using the post submission endpoint directly is that
        some of the post validation checks can be done on the client side which will be faster.

        NOTE: If used, this javascript file MUST be loaded dynamically for each user because the contents
        of the file are generated dynamically based on the current user.  The file may be cached on a per
        user basis based on the HTTP cache headers that are returned when the file is requested (currently
        the cache headers specify that the file should expire after one day).


        The following functions are available:

        ---

        **window.TN.check_crossposting_restrictions(group_ids)**

        Checks for crossposting restrictions when the user selects more than one group to post to.

        Parameters:
        - **group_ids** is an array of group IDs

        Returns an object with three properties {allowed, restricted, restrictions}.

        - **allowed** is an array of the group IDs from group_ids that can be crossposted to

        - **restricted** is an array of the group IDs from group_ids that can't be crossposted to

        - **restrictions** is an object mapping group IDs that have crossposting restrictions to arrays of group IDs that are restricted.
          It is useful for pinpointing why a group ID shows up in the restricted array so that users can be provided feedback
          about the reason for the crossposting restriction (eg. a message like 'group A doesn't allow crossposting to group B').

        For example, given group_ids = [1, 2, 3, 4] and assuming group 1 doesn't allow posting to group 3 and group 2 doesn't allow
        posting to group 1, the returned object will be:

        {allowed: [4], restricted: [1, 2, 3], restrictions: {1: [3], 2: [1]}}


        ---

        **window.TN.submit_post(args, session, preferences, callback)**

        Submits a new post and performs validation checks on the post before it is accepted for submission..

        Parameters:

        - **args** is an object containing data about the post being submitted and must include
          the following properties:

          - type: The type of post.  One of: offer, wanted
          - item: A short description of the item(s).
          - location: A short location description.

          The following properties are optional:

          - content: A longer description of the item(s).
          - group_ids: An array of group IDs to submit the post to (if any).
          - fair_offer: If set to 1, the post will be posted with the Fair Offer Policy (only valid for offer posts - see https://trashnothing.com/fair_offer_policy ).
          - upload_key: The key used to upload any photos that should be attached to this post.
          - latitude
          - longitude

        - **session** is a temporary object that is used by submit_post to store data about the submission
          process for a single post.  The first time submit_post is called with a post, session should
          be a new empty object (eg. {}).  The session object should be persisted until that post
          is successfully submitted and then it can be discarded so that the next post will start
          over with a new empty session object.  

        - **preferences** is a permanent object that the client persists and modifies based on warnings returned
          by the post submission process and user input.  Some post warnings passed to the callback object
          have a preference_key string property so that users can opt out of those warnings in the future.
          To save this opt-out preference, set the property indicated by the preference_key in the preferences
          object (eg. preferences[preference_key] = 1).  The preferences object is only read by submit_post and
          never modified - it is up to the client to initialize, modify and persist the preferences object.

        - **callback** is a function used to return the result of the post submission. It is called and passed
          one argument - an object with three properties {result, message, preference_key}.  The result property
          is a string that is one of: success, error, warning.

          A success result indicates that the post was submitted successfully. Note that posts may not
          appear instantly after submission because the moderators of many groups may have additional
          automatic or manual review processes in place that can delay the publishing of a post.
          
          An error result indicates that there is an error with the post to show the user and the message property
          will contain text describing the error.

          A warning result indicates that there is a warning about the post to show the user and the
          message property will contain a string describing the warning.  A warning result doesn't prevent a post from
          being submitted, to continue the submission process after a warning result, just re-submit the post
          (with the updated session object) to temporarily override that specific warning.

          Certain types of warnings can be opted out of.  These warnings will set preference_key to a string that can be 
          set in the preferences object by the client to opt out of that type of warning in the future (see the description
          of the preferences parameter for more details).
      operationId: get_post_client_javascript
      parameters:
        - description: |
            A comma separated list of all the group IDs that the current user is a member of. If the current user is not a member of any groups, simply pass an empty string.
          in: query
          name: group_ids
          required: true
          type: string
      produces:
        - text/javascript
      responses:
        '200':
          description: The client.js javascript file.
        '400':
          description: Invalid group IDs.
      summary: Retrieve client.js
      tags:
        - posts
  /posts/multiple:
    get:
      operationId: get_posts_by_ids
      parameters:
        - description: 'The IDs of the posts to retrieve.  If more than 10 post IDs are passed, only the first 10 posts will be returned.'
          in: query
          name: post_ids
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The posts.
          schema:
            items:
              $ref: '#/definitions/Post'
            type: array
      security:
        - oauth2_implicit:
            - basic
        - oauth2_code:
            - basic
        - api_key: []
      summary: Retrieve multiple posts
      tags:
        - posts
  /posts/search:
    get:
      description: |
        Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. <br /><br /> Only posts from the last 30 days will be returned.
      operationId: search_posts
      parameters:
        - description: The search query used to find posts.
          in: query
          name: search
          required: true
          type: string
        - default: relevance
          description: |
            How to sort the posts that are returned.  One of: relevance, date <br /><br /> Setting sort_by to date will sort posts from newest to oldest.
          in: query
          name: sort_by
          required: false
          type: string
        - description: |
            A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
          in: query
          name: types
          required: true
          type: string
        - description: |
            A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group.
          in: query
          name: sources
          required: true
          type: string
        - default: The group IDs of every group the current user is a member of.
          description: |
            A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of will be used (the group IDs of other groups will be silently discarded). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded).
          in: query
          name: group_ids
          required: false
          type: string
        - default: 20
          description: The number of posts to return per page (must be >= 1 and <= 100).
          in: query
          maximum: 100
          minimum: 1
          name: per_page
          required: false
          type: integer
        - default: 1
          description: The page of posts to return.
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 1
          description: Client device pixel ratio used to determine thumbnail size (default 1.0).
          in: query
          name: device_pixel_ratio
          required: false
          type: number
        - description: |
            The latitude of a point around which to return posts.
          in: query
          name: latitude
          required: false
          type: number
        - description: |
            The longitude of a point around which to return posts.
          in: query
          name: longitude
          required: false
          type: number
        - description: |
            The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
          in: query
          maximum: 257500
          minimum: 0
          name: radius
          required: false
          type: number
      produces:
        - application/json
      responses:
        '200':
          description: The posts and paging data.
          schema:
            properties:
              end_index:
                description: The index of the last post being returned (an integer between start_index and num_posts).
                type: integer
              num_pages:
                description: The total number of pages available.
                type: integer
              num_posts:
                description: The total number of posts available.
                type: integer
              page:
                description: The page number of the posts being returned.
                type: integer
              per_page:
                description: The number of posts being returned per page.
                type: integer
              posts:
                items:
                  $ref: '#/definitions/PostSearchResult'
                type: array
              start_index:
                description: The index of the first post being returned (an integer between 1 and num_posts).
                type: integer
            type: object
        '400':
          description: Missing or invalid parameters.
      security:
        - oauth2_implicit:
            - basic
        - oauth2_code:
            - basic
        - api_key: []
      summary: Search posts
      tags:
        - posts
  '/posts/{post_id}':
    get:
      operationId: get_post
      parameters:
        - description: The ID of the post to retrieve.
          in: path
          name: post_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The post.
          schema:
            $ref: '#/definitions/Post'
        '403':
          description: The user doesn't have permission to access the post.
        '404':
          description: Post not found.
      security:
        - oauth2_implicit:
            - basic
        - oauth2_code:
            - basic
        - api_key: []
      summary: Retrieve a post
      tags:
        - posts
  '/posts/{post_id}/display':
    get:
      description: |
        Retrieve a post and other data related to the post that is useful for displaying the post such as data about the user who posted the post and the groups the post was posted on.
      operationId: get_post_and_related_data
      parameters:
        - description: The ID of the post to retrieve.
          in: path
          name: post_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The post and related data.
          schema:
            properties:
              author:
                $ref: '#/definitions/User'
              author_offer_count:
                description: Count of offer posts made by the post author in the last 30 days.
                type: integer
              author_posts:
                description: Other posts by the post author.
                items:
                  $ref: '#/definitions/Post'
                type: array
              author_wanted_count:
                description: Count of wanted posts made by the post author in the last 30 days.
                type: integer
              geolocate_bounds:
                $ref: '#/definitions/GeolocateBounds'
              groups:
                description: The groups the post is published on.
                items:
                  $ref: '#/definitions/Group'
                type: array
              post:
                $ref: '#/definitions/Post'
              related_posts:
                description: |
                  If the post is an offer post, this will contain taken posts that may correspond to the offer post (if any). If the post is a wanted post, this will contain received posts that may correspond to the wanted post (if any). These posts are useful to help people viewing the post decide if one or more of the items in the post is no longer available (for offer posts) or needed (for wanted posts).
                items:
                  $ref: '#/definitions/Post'
                type: array
            type: object
        '403':
          description: The user doesn't have permission to access the post.
        '404':
          description: Post not found.
      security:
        - oauth2_implicit:
            - basic
        - oauth2_code:
            - basic
        - api_key: []
      summary: Retrieve post display data
      tags:
        - posts
  '/posts/{post_id}/flag':
    post:
      consumes:
        - multipart/form-data
      description: Flags a post to be reviewed by the moderators.
      operationId: flag_post
      parameters:
        - in: path
          name: post_id
          required: true
          type: string
        - description: |
            The reason that this post is being flagged.  Must be one of: 'spam', 'not free (for sale/trade/borrow)', 'illegal item', 'not family-friendly', 'other', 'mislabeled: is a Want', 'mislabeled: is an Offer'. <br /><br /> NOTE: If reason is set to 'other', the details parameter is required to be set.
          in: formData
          name: reason
          required: true
          type: string
        - description: |
            An explanation from the current user for why they are flagging this post.   This is useful for users to provide evidence or explain why there is a problem with the post. <br /><br /> NOTE: If reason is set to 'other', details are required.
          in: formData
          name: details
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The post has been flagged.
        '400':
          description: Invalid reason parameter or missing details.
        '404':
          description: Post not found.
      summary: Flag a post
      tags:
        - posts
  '/posts/{post_id}/geolocate':
    put:
      consumes:
        - multipart/form-data
      description: Map a post to a specific location when the post is missing a location or has an incorrect location.
      operationId: geolocate_post
      parameters:
        - description: The ID of the post to geolocate.
          in: path
          name: post_id
          required: true
          type: string
        - in: formData
          name: latitude
          required: true
          type: number
        - in: formData
          name: longitude
          required: true
          type: number
        - description: |
            A location name corresponding to the given latitude and longitude.  Usually this is either a location included somewhere in the post title or content or a location description typed or selected by the user who is mapping the post.
          in: formData
          name: location
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The updated post.
          schema:
            $ref: '#/definitions/Post'
        '400':
          description: Invalid latitude or longitude.
        '403':
          description: The user doesn't have permission to access the post.
        '404':
          description: Post not found.
      summary: Map a post
      tags:
        - posts
  '/posts/{post_id}/reply':
    post:
      consumes:
        - multipart/form-data
      description: Send a reply to a post from the current user to the post author.
      operationId: reply_to_post
      parameters:
        - description: The ID of the post to reply to.
          in: path
          name: post_id
          required: true
          type: string
        - description: The message to send to the post author.
          in: formData
          name: message
          required: true
          type: string
        - description: 'If set to 1, a copy of the reply will be emailed to the current user.'
          in: formData
          name: send_copy
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: The reply has been sent.
        '400':
          description: Missing message parameter.
        '403':
          description: The user doesn't have permission to access the post.
        '404':
          description: Post not found.
      summary: Reply to a post
      tags:
        - posts
  '/posts/{post_id}/satisfy':
    put:
      consumes:
        - multipart/form-data
      description: Mark an offer or wanted post by the current user as satisfied (eg. an offer has been taken or a wanted has been received).
      operationId: satisfy_post
      parameters:
        - description: The ID of the post to satisfy.
          in: path
          name: post_id
          required: true
          type: string
        - description: |
            If the post contains multiple items and not every item has been taken or received, pass a short summary of the items that have been so that the post will be updated to reflect which items are still being offered or request. Once all items in the post have been taken or received, this endpoint should be called with no summary passed so that the post will be removed from the listings.
          in: formData
          name: summary
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The updated post.
          schema:
            $ref: '#/definitions/Post'
        '400':
          description: Invalid summary or the post is not an offer or wanted post.
        '403':
          description: The user doesn't have permission to access the post.
        '404':
          description: Post not found.
      summary: Satisfy a post
      tags:
        - posts
  '/posts/{post_id}/share':
    get:
      description: Retrieve text and html content useful for sharing a post by email.
      operationId: get_post_share_content
      parameters:
        - description: The ID of the post to share.
          in: path
          name: post_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: 'Email subject, text body and html body for sharing a post by email.'
          schema:
            properties:
              html:
                description: Email body as html.
                type: string
              subject:
                description: Email subject line text.
                type: string
              text:
                description: Email body as plain text.
                type: string
            type: object
      summary: Retrieve post share content
      tags:
        - posts
    post:
      consumes:
        - multipart/form-data
      description: Shares a post by email.
      operationId: share_post
      parameters:
        - description: The ID of the post to share.
          in: path
          name: post_id
          required: true
          type: string
        - description: |
            If set to 1, a copy of post will be emailed to the current user so that they can share the email with anyone.  The message and recipients parameters are not used when this is set.
          in: formData
          name: send_copy
          required: false
          type: integer
        - description: An optional message to prefix to the email body that will be sent to the recipients.
          in: formData
          name: message
          required: false
          type: string
        - description: A comma separated list of email addresses to share the post with.  This is a required field if send_copy is not set.
          in: formData
          name: recipients
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Post shared.
        '400':
          description: Invalid email addresses were passed in the recipients parameter.
        '403':
          description: The user doesn't have permission to access the post.
        '404':
          description: Post not found.
      summary: Share a post
      tags:
        - posts
  /users/me:
    get:
      operationId: get_current_user
      produces:
        - application/json
      responses:
        '200':
          description: User data
          schema:
            $ref: '#/definitions/CurrentUser'
        '404':
          description: User not found.
      summary: Retrieve current user
      tags:
        - users
    put:
      consumes:
        - multipart/form-data
      description: |
        Update the current user.  All fields are optional so requests can update just one or multiple user properties at a time.
      operationId: update_current_user
      parameters:
        - description: The first name of the user.
          in: formData
          name: firstname
          required: false
          type: string
        - description: The last name of the user.
          in: formData
          name: lastname
          required: false
          type: string
        - description: |
            Whether or not the users' first and last name will be visible to other users. Set to 1 to enable and 0 to disable.
          in: formData
          name: public_name
          required: false
          type: integer
        - description: |
            Whether or not the user will receive digest emails summarizing the new posts. Set to 1 to enable and 0 to disable.
          in: formData
          name: digest_enabled
          required: false
          type: integer
        - description: |
            The frequency of digest emails sent to this user. One of: daily, 12_hours, 8_hours, 6_hours, 4_hours, 2_hours, hourly <br /><br /> NOTE: A weekly option with the value 'weekly' will probably be added in the future so clients should recognize weekly as a valid value that can be displayed and set if it is ever returned.
          in: formData
          name: digest_frequency
          required: false
          type: string
        - description: |
            Whether or not the user will receive post reminder emails (to remind them to update or repost their posts). Set to 1 to enable and 0 to disable.
          in: formData
          name: post_reminders
          required: false
          type: integer
        - description: |
            A new password for the users' account.  When setting a new password, the old_password parameter must be passed and set to the users' current password. <br /><br /> NOTE: The password and old_password properties can NOT be used when the user property has_password is false.  Instead, use the password reset endpoint to have a new password emailed to the user.
          in: formData
          name: password
          required: false
          type: string
        - description: The users current password.  This is required when the user is changing their password.
          in: formData
          name: old_password
          required: false
          type: string
        - description: |
            The source of the users' profile image. The values this can be set to change dynamically based on the users' account. To get the values that can be used, use the source properties returned by the profile images endpoint.
          in: formData
          name: profile_image_source
          required: false
          type: string
        - description: The date and time when the user last viewed the newest posts on the All Posts page.
          format: date-time
          in: formData
          name: last_listings_view
          required: false
          type: string
        - description: |
            Whether or not group posts should be filtered by their location to only include posts defined by the users' location field. Set to 1 to enable and 0 to disable.
          in: formData
          name: filter_group_posts_by_location
          required: false
          type: integer
        - description: |
            A comma separated list of the sources to show public posts from. Currently only 'trashnothing' is supported.
            If not passed, all sources will be enabled.
            If set to an empty string, no sources will be enabled which effectively disables public posts for the user.
          in: formData
          name: public_post_sources
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The updated user data.
          schema:
            $ref: '#/definitions/CurrentUser'
        '400':
          description: Invalid parameter.
      summary: Update current user
      tags:
        - users
  /users/me/alerts:
    get:
      operationId: get_alerts
      produces:
        - application/json
      responses:
        '200':
          description: The users alerts.
          schema:
            items:
              $ref: '#/definitions/Alert'
            type: array
      summary: List current users' email alerts
      tags:
        - users
    put:
      consumes:
        - multipart/form-data
      operationId: create_alert
      parameters:
        - description: 'When a post matches this search query, an email alert will be sent.  Must have a length >= 2 and < 255 characters.'
          in: formData
          name: search
          required: true
          type: string
        - description: |
            A comma separated list of the post types that the alert should match against. The available post types are: offer, wanted
          in: formData
          name: types
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The new alert.
          schema:
            $ref: '#/definitions/Alert'
        '400':
          description: Missing or invalid parameters.
      summary: Create an email alert
      tags:
        - users
  '/users/me/alerts/{alert_id}':
    delete:
      operationId: delete_alert
      parameters:
        - description: The ID of the email alert to delete.
          in: path
          name: alert_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Alert deleted.
        '403':
          description: The user doesn't have permission to access the alert.
        '404':
          description: Alert not found.
      summary: Delete an email alert
      tags:
        - users
  /users/me/emails:
    get:
      operationId: get_emails
      produces:
        - application/json
      responses:
        '200':
          description: The users emails addresses.
          schema:
            items:
              $ref: '#/definitions/Email'
            type: array
      summary: List email addresses
      tags:
        - users
    put:
      consumes:
        - multipart/form-data
      description: |
        Add a new email address to the current users' account.  The first time an email address is added to a users account, a verification link will be sent to the email address to verify the address.
      operationId: add_email
      parameters:
        - description: The email address to add.
          in: formData
          name: address
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The new email.
          schema:
            $ref: '#/definitions/Email'
        '400':
          description: Invalid email address.
        '403':
          description: The email address is already associated with another account.  This usually means that the user has created multiple accounts by accident.
      summary: Add email address
      tags:
        - users
  '/users/me/emails/{email_id}':
    delete:
      description: |
        Delete an existing email address from the current users' account. If the email being deleted is the last email address the user has or if the email address is the primary email for the user, deleting the email will fail. In order to delete a users' primary email, another email must first be made the primary email.
      operationId: delete_email
      parameters:
        - description: The ID of the email address to delete.
          in: path
          name: email_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The users emails updated to reflect the deleted email.
          schema:
            items:
              $ref: '#/definitions/Email'
            type: array
        '400':
          description: Neither the last email address or the primary email address can be deleted.
        '403':
          description: The user doesn't have permission to access the email.
        '404':
          description: Email not found.
      summary: Delete email address
      tags:
        - users
  '/users/me/emails/{email_id}/not-bouncing':
    put:
      description: |
        Resets an email address bouncing state to false.  The email address may be automatically marked as bouncing if further emails sent to it are bounced.
      operationId: set_email_not_bouncing
      parameters:
        - description: The ID of the email to set as not bouncing.
          in: path
          name: email_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The updated email.
          schema:
            $ref: '#/definitions/Email'
        '400':
          description: Email not yet verified.
        '403':
          description: The user doesn't have permission to access the email.
        '404':
          description: Email not found.
      summary: Set email not bouncing
      tags:
        - users
  '/users/me/emails/{email_id}/resend-verification':
    post:
      description: Resends the verification email to one of the users' unverified email addresses.
      operationId: resend_email_verification_email
      parameters:
        - description: The ID of the email to resend the verification email to.
          in: path
          name: email_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Verification email was resent.
        '400':
          description: Email already verified.
        '403':
          description: The user doesn't have permission to access the email.
        '404':
          description: Email not found.
      summary: Resend email verification
      tags:
        - users
  '/users/me/emails/{email_id}/set-primary':
    put:
      consumes:
        - multipart/form-data
      operationId: update_primary_email
      parameters:
        - description: The ID of the email address to make the primary email address for the user.
          in: path
          name: email_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The users emails updated to reflect the new primary email.
          schema:
            items:
              $ref: '#/definitions/Email'
            type: array
        '400':
          description: Email not yet verified.
        '403':
          description: The user doesn't have permission to access the email.
        '404':
          description: Email not found.
      summary: Update primary email
      tags:
        - users
  /users/me/groups:
    get:
      consumes:
        - multipart/form-data
      operationId: get_user_groups
      parameters:
        - description: |
            Set the membership parameter to only return certain groups. The options are: <br /><br /> - **subscribed**: Only return groups the user is a member of.<br /> - **pending-questions**: Only return groups where the user needs to respond to a new member questionnaire.<br /> - **pending**: Only return groups where the user is waiting for their membership request to be approved (excludes groups which are pending-questions). <br /><br /> If unset, all groups the user is a member of and pending membership on will be returned.
          in: query
          name: membership
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The users groups.
          schema:
            items:
              $ref: '#/definitions/Group'
            type: array
        '400':
          description: Invalid membership parameter.
      summary: List current users' groups
      tags:
        - users
  /users/me/location:
    put:
      consumes:
        - multipart/form-data
      description: |
        Update the current users' location. The location is used to determine what (if any) public posts are shown to the user.
      operationId: update_location
      parameters:
        - description: A name that describes the location specified by the given latitude and longitude (must be <= 128 characters).
          in: formData
          name: name
          required: true
          type: string
        - in: formData
          name: latitude
          required: true
          type: number
        - in: formData
          name: longitude
          required: true
          type: number
        - description: |
            A radius in meters that defines a circle around the point specified by latitude and longitude. Only posts within the area specified by this circle will be shown.
            If set to 0, effectively disables public posts for the user.
          in: formData
          maximum: 257500
          minimum: 0
          name: radius
          required: true
          type: number
      produces:
        - application/json
      responses:
        '200':
          description: The user with the updated public post location.
          schema:
            $ref: '#/definitions/CurrentUser'
        '400':
          description: Missing or invalid parameters.
      summary: Update location
      tags:
        - users
  /users/me/notices:
    get:
      consumes:
        - multipart/form-data
      operationId: get_user_group_notices
      parameters:
        - description: 'A comma separated list of group IDs to return notices for.  If unset, notices for all the users groups will be returned.'
          in: query
          name: group_ids
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The users group notices.
          schema:
            items:
              $ref: '#/definitions/GroupNotice'
            type: array
        '400':
          description: Invalid group IDs.
      summary: List current users' group notices
      tags:
        - users
  /users/me/posts:
    get:
      description: |
        Only posts from the last 30 days will be returned. <br /><br /> NOTE: In order to make it easier to see all a users&#39; posts, the current users&#39; location preferences are not applied when listing or searching posts from a single user.  If location based filtering of the posts is needed, the latitude, longitude and radius parameters may be used.
      operationId: get_current_user_posts
      parameters:
        - description: |
            A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
          in: query
          name: types
          required: true
          type: string
        - description: |
            A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group.
          in: query
          name: sources
          required: true
          type: string
        - default: The group IDs of every group the current user is a member of.
          description: |
            A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of will be used (the group IDs of other groups will be silently discarded). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded).
          in: query
          name: group_ids
          required: false
          type: string
        - default: 20
          description: The number of posts to return per page (must be >= 1 and <= 100).
          in: query
          maximum: 100
          minimum: 1
          name: per_page
          required: false
          type: integer
        - default: 1
          description: The page of posts to return.
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 1
          description: Client device pixel ratio used to determine thumbnail size (default 1.0).
          in: query
          name: device_pixel_ratio
          required: false
          type: number
        - description: |
            The latitude of a point around which to return posts.
          in: query
          name: latitude
          required: false
          type: number
        - description: |
            The longitude of a point around which to return posts.
          in: query
          name: longitude
          required: false
          type: number
        - description: |
            The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
          in: query
          maximum: 257500
          minimum: 0
          name: radius
          required: false
          type: number
      produces:
        - application/json
      responses:
        '200':
          description: The posts and paging data.
          schema:
            properties:
              end_index:
                description: The index of the last post being returned (an integer between start_index and num_posts).
                type: integer
              last_listings_view:
                description: |
                  The date and time when the current user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page. <br /><br /> NOTE: For requests using an api key instead of oauth, this field is always null.
                format: date-time
                type: string
              num_pages:
                description: The total number of pages available.
                type: integer
              num_posts:
                description: The total number of posts available.
                type: integer
              page:
                description: The page number of the posts being returned.
                type: integer
              per_page:
                description: The number of posts being returned per page.
                type: integer
              posts:
                items:
                  $ref: '#/definitions/Post'
                type: array
              start_index:
                description: The index of the first post being returned (an integer between 1 and num_posts).
                type: integer
            type: object
        '400':
          description: Missing or invalid parameters.
      summary: List current users' posts
      tags:
        - users
  /users/me/posts/search:
    get:
      description: |
        Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. <br /><br /> Only posts from the last 30 days will be returned.
      operationId: search_current_user_posts
      parameters:
        - description: The search query used to find posts.
          in: query
          name: search
          required: true
          type: string
        - default: relevance
          description: |
            How to sort the posts that are returned.  One of: relevance, date <br /><br /> Setting sort_by to date will sort posts from newest to oldest.
          in: query
          name: sort_by
          required: false
          type: string
        - description: |
            A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
          in: query
          name: types
          required: true
          type: string
        - description: |
            A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group.
          in: query
          name: sources
          required: true
          type: string
        - default: The group IDs of every group the current user is a member of.
          description: |
            A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of will be used (the group IDs of other groups will be silently discarded). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded).
          in: query
          name: group_ids
          required: false
          type: string
        - default: 20
          description: The number of posts to return per page (must be >= 1 and <= 100).
          in: query
          maximum: 100
          minimum: 1
          name: per_page
          required: false
          type: integer
        - default: 1
          description: The page of posts to return.
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 1
          description: Client device pixel ratio used to determine thumbnail size (default 1.0).
          in: query
          name: device_pixel_ratio
          required: false
          type: number
        - description: |
            The latitude of a point around which to return posts.
          in: query
          name: latitude
          required: false
          type: number
        - description: |
            The longitude of a point around which to return posts.
          in: query
          name: longitude
          required: false
          type: number
        - description: |
            The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
          in: query
          maximum: 257500
          minimum: 0
          name: radius
          required: false
          type: number
      produces:
        - application/json
      responses:
        '200':
          description: The posts and paging data.
          schema:
            properties:
              end_index:
                description: The index of the last post being returned (an integer between start_index and num_posts).
                type: integer
              num_pages:
                description: The total number of pages available.
                type: integer
              num_posts:
                description: The total number of posts available.
                type: integer
              page:
                description: The page number of the posts being returned.
                type: integer
              per_page:
                description: The number of posts being returned per page.
                type: integer
              posts:
                items:
                  $ref: '#/definitions/PostSearchResult'
                type: array
              start_index:
                description: The index of the first post being returned (an integer between 1 and num_posts).
                type: integer
            type: object
        '400':
          description: Missing or invalid parameters.
      summary: Search current users' posts
      tags:
        - users
  /users/me/profile-images:
    get:
      operationId: get_profile_images
      produces:
        - application/json
      responses:
        '200':
          description: The  users profile images.
          schema:
            items:
              properties:
                image:
                  description: An image URL.
                  type: string
                source:
                  description: |
                    The source of the image.  Currently one of: gravatar, facebook, twitter, google <br /><br /> NOTE: Additional sources may be added in the future (eg. 'trashnothing' when support for uploading custom profile images is added) so clients should take care to support arbitrary sources being returned.
                  type: string
              type: object
            type: array
      summary: List current users' profile images
      tags:
        - users
  /users/me/resend-verification:
    post:
      operationId: resend_account_verification_email
      produces:
        - application/json
      responses:
        '200':
          description: Verification email was resent.
        '400':
          description: Account already verified.
      summary: Resend account verification email
      tags:
        - users
  /users/me/reset-password:
    post:
      operationId: send_password_reset_email
      produces:
        - application/json
      responses:
        '200':
          description: Password reset email was sent.
      summary: Send password reset email
      tags:
        - users
  /users/report:
    post:
      consumes:
        - multipart/form-data
      operationId: report_user
      parameters:
        - description: The subject of the message.
          in: formData
          name: subject
          required: true
          type: string
        - description: The body of the message.
          in: formData
          name: message
          required: true
          type: string
        - description: The ID of the user to report.  One of user_id or user_email must be passed but only user_id will be used if both are passed.
          in: formData
          name: user_id
          required: false
          type: string
        - description: |
            The email of the user to report.  Often users only know to identify other users by their email addresses so allowing users to enter an email address can be easier in certain cases.
          in: formData
          name: user_email
          required: false
          type: string
        - description: |
            The ID of the group to report the user to.  This may be disregarded in cases where user_email is set and can be used to automatically identify which group the user should be reported to (because some email addresses are specific to certain groups).
          in: formData
          name: group_id
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: The user was reported.
        '400':
          description: 'Missing or invalid parameters.  In particular, a user cannot report themselves.'
        '404':
          description: User or group not found.
      summary: Report a user
      tags:
        - users
  '/users/{user_id}':
    get:
      operationId: get_user
      parameters:
        - description: A user ID.
          in: path
          name: user_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: User data
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found.
      summary: Retrieve a user
      tags:
        - users
  '/users/{user_id}/posts':
    get:
      description: |
        Only posts from the last 30 days will be returned. <br /><br /> NOTE: In order to make it easier to see all a users&#39; posts, the current users&#39; location preferences are not applied when listing or searching posts from a single user.  If location based filtering of the posts is needed, the latitude, longitude and radius parameters may be used.
      operationId: get_user_posts
      parameters:
        - description: |
            The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.
          in: path
          name: user_id
          required: true
          type: string
        - description: |
            A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
          in: query
          name: types
          required: true
          type: string
        - description: |
            A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group.
          in: query
          name: sources
          required: true
          type: string
        - default: The group IDs of every group the current user is a member of.
          description: |
            A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of will be used (the group IDs of other groups will be silently discarded). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded).
          in: query
          name: group_ids
          required: false
          type: string
        - default: 20
          description: The number of posts to return per page (must be >= 1 and <= 100).
          in: query
          maximum: 100
          minimum: 1
          name: per_page
          required: false
          type: integer
        - default: 1
          description: The page of posts to return.
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 1
          description: Client device pixel ratio used to determine thumbnail size (default 1.0).
          in: query
          name: device_pixel_ratio
          required: false
          type: number
        - description: |
            The latitude of a point around which to return posts.
          in: query
          name: latitude
          required: false
          type: number
        - description: |
            The longitude of a point around which to return posts.
          in: query
          name: longitude
          required: false
          type: number
        - description: |
            The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
          in: query
          maximum: 257500
          minimum: 0
          name: radius
          required: false
          type: number
      produces:
        - application/json
      responses:
        '200':
          description: The posts and paging data.
          schema:
            properties:
              end_index:
                description: The index of the last post being returned (an integer between start_index and num_posts).
                type: integer
              last_listings_view:
                description: |
                  The date and time when the current user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page. <br /><br /> NOTE: For requests using an api key instead of oauth, this field is always null.
                format: date-time
                type: string
              num_pages:
                description: The total number of pages available.
                type: integer
              num_posts:
                description: The total number of posts available.
                type: integer
              page:
                description: The page number of the posts being returned.
                type: integer
              per_page:
                description: The number of posts being returned per page.
                type: integer
              posts:
                items:
                  $ref: '#/definitions/Post'
                type: array
              start_index:
                description: The index of the first post being returned (an integer between 1 and num_posts).
                type: integer
            type: object
        '400':
          description: Missing or invalid parameters.
      security:
        - oauth2_implicit:
            - basic
        - oauth2_code:
            - basic
        - api_key: []
      summary: List posts by a user
      tags:
        - users
  '/users/{user_id}/posts/search':
    get:
      description: |
        Searching posts takes the same arguments as listing posts except for the addition of the search and sort_by parameters. <br /><br /> Only posts from the last 30 days will be returned.
      operationId: search_user_posts
      parameters:
        - description: |
            The user ID of the user whose posts will be retrieved. Using 'me' as the user_id will return the posts for the current user.
          in: path
          name: user_id
          required: true
          type: string
        - description: The search query used to find posts.
          in: query
          name: search
          required: true
          type: string
        - default: relevance
          description: |
            How to sort the posts that are returned.  One of: relevance, date <br /><br /> Setting sort_by to date will sort posts from newest to oldest.
          in: query
          name: sort_by
          required: false
          type: string
        - description: |
            A comma separated list of the post types to return.  The available post types are: offer, taken, wanted, received, admin
          in: query
          name: types
          required: true
          type: string
        - description: |
            A comma separated list of the post sources to retrieve posts from. The available sources are: groups, trashnothing. The trashnothing source is for public posts that are posted on trash nothing but are not associated with any group.
          in: query
          name: sources
          required: true
          type: string
        - default: The group IDs of every group the current user is a member of.
          description: |
            A comma separated list of the group IDs to retrieve posts from. This parameter is only used if the 'groups' source is passed in the sources parameter and only groups that the current user is a member of will be used (the group IDs of other groups will be silently discarded). <br /><br /> NOTE: For requests using an api key instead of oauth, this field is required if the 'groups' source is passed. In addition, only posts from groups that have open_archives set to true will be used (the group IDS of other groups will be silently discarded).
          in: query
          name: group_ids
          required: false
          type: string
        - default: 20
          description: The number of posts to return per page (must be >= 1 and <= 100).
          in: query
          maximum: 100
          minimum: 1
          name: per_page
          required: false
          type: integer
        - default: 1
          description: The page of posts to return.
          in: query
          minimum: 1
          name: page
          required: false
          type: integer
        - default: 1
          description: Client device pixel ratio used to determine thumbnail size (default 1.0).
          in: query
          name: device_pixel_ratio
          required: false
          type: number
        - description: |
            The latitude of a point around which to return posts.
          in: query
          name: latitude
          required: false
          type: number
        - description: |
            The longitude of a point around which to return posts.
          in: query
          name: longitude
          required: false
          type: number
        - description: |
            The radius in meters of a circle centered at the point defined by the latitude and longitude parameters. When latitude, longitude and radius are passed, only posts within the circle defined by these parameters will be returned.
          in: query
          maximum: 257500
          minimum: 0
          name: radius
          required: false
          type: number
      produces:
        - application/json
      responses:
        '200':
          description: The posts and paging data.
          schema:
            properties:
              end_index:
                description: The index of the last post being returned (an integer between start_index and num_posts).
                type: integer
              num_pages:
                description: The total number of pages available.
                type: integer
              num_posts:
                description: The total number of posts available.
                type: integer
              page:
                description: The page number of the posts being returned.
                type: integer
              per_page:
                description: The number of posts being returned per page.
                type: integer
              posts:
                items:
                  $ref: '#/definitions/PostSearchResult'
                type: array
              start_index:
                description: The index of the first post being returned (an integer between 1 and num_posts).
                type: integer
            type: object
        '400':
          description: Missing or invalid parameters.
      security:
        - oauth2_implicit:
            - basic
        - oauth2_code:
            - basic
        - api_key: []
      summary: Search posts by a user
      tags:
        - users
  '/users/{user_id}/profile-image':
    get:
      description: |
        This is designed to be used as the src attribute of an HTML &lt;img&gt; tag to show the profile image of the given user.
      operationId: get_profile_image_file
      parameters:
        - description: The user ID of the user to return the profile image of.
          in: path
          name: user_id
          required: true
          type: string
        - description: |
            A default image URL to use when the user has no profile image. Or to use one of the Gravatar default images, you can set default to any one of (404, mm, identicon, monsterid, wavatar, retro, blank). <br /><br /> To learn how the Gravatar default images options work, see the Default Image section on the page at:<br /> https://en.gravatar.com/site/implement/images/
          in: query
          name: default
          required: false
          type: string
      produces:
        - image/jpeg
        - image/png
        - image/gif
      responses:
        '302':
          description: |
            This endpoint returns an HTTP redirect to a URL that hosts the image. So requests on this endpoint that automatically follow redirects (eg. most browsers) will be redirected to a valid image file.
        '400':
          description: Invalid default parameter.
      summary: Retrieve a users' profile image
      tags:
        - users
definitions:
  Alert:
    description: A search alert that the user has created so that they can be notified when new posts match the search query specified by the alert.
    example:
      alert_id: 7584
      last_sent: '2018-02-16T12:58:51.000Z'
      search: table
      send_count: 3
      types:
        - offer
      user_id: 9191
    properties:
      alert_id:
        type: string
      last_sent:
        description: The last time that the alert was triggered and sent out (may be null).
        format: date-time
        type: string
      search:
        description: The search phrase that the alert triggers on.
        type: string
      send_count:
        description: The number of time the alert has triggered and been send out.
        type: integer
      types:
        description: |
          A list of the post types that the alert is set to match against.  The available post types are: offer, wanted <br /><br /> NOTE: Additional post types may be added in the future (eg. events) so clients should take care to support arbitrary types being returned.
        items:
          type: string
        type: array
      user_id:
        type: string
    type: object
  BoundingBox:
    description: A geographic bounding box defined by its southwest and northeast points.
    example:
      northeast:
        latitude: 52.8293255665
        longitude: -0.600956182
      southwest:
        latitude: 51.0025285305
        longitude: -3.5323240284
    properties:
      northeast:
        description: The point defining the northeast corner of the bounding box.
        properties:
          latitude:
            type: number
          longitude:
            type: number
        type: object
      southwest:
        description: The point defining the southwest corner of the bounding box.
        properties:
          latitude:
            type: number
          longitude:
            type: number
        type: object
    type: object
  CurrentUser:
    allOf:
      - $ref: '#/definitions/User'
      - properties:
          contributed_recently:
            description: |
              Whether or not this user has contributed money recently to support the site using the page at: https://trashnothing.com/payment
            type: boolean
          digest_enabled:
            description: Whether or not digest emails are enabled for this user.
            type: boolean
          digest_frequency:
            description: |
              The frequency of digest emails sent to this user. One of: daily, 12_hours, 8_hours, 6_hours, 4_hours, 2_hours, hourly <br /><br /> NOTE: A weekly option with the value 'weekly' will probably be added in the future so clients should recognize weekly as a valid value that can be displayed and set if it is ever returned.
            type: string
          digest_timezone:
            description: The timezone used for emailing digests to this user (may be null if digests are disabled).
            type: string
          email_bouncing:
            description: Whether or not the users' primary email address is bouncing emails sent to it.
            type: boolean
          email_spam_stop:
            description: Whether or not emails have been stopped because of a spam complaint from the users' email account.
            type: boolean
          filter_group_posts_by_location:
            description: Whether or not group posts should be filtered by their location to only include posts defined by the users' location field.
            type: boolean
          has_password:
            description: Whether or not the user has a password (accounts created using 3rd party providers like Facebook don't have passwords set).
            type: boolean
          hide_ads:
            description: Whether or not advertisements (eg. Google Ads) should be shown to this user.
            type: boolean
          last_listings_view:
            description: |
              The date and time when the user last viewed the newest posts on the All Posts page (may be null). <br /><br /> NOTE: For this to be accurate, clients must update the last_listings_view property of the current user every time the user is shown the newest posts on the All Posts page.
            format: date-time
            type: string
          location:
            description: The users' preference for what public posts they want to see outside of the groups they are a member of (may be null).
            properties:
              latitude:
                type: number
              longitude:
                type: number
              name:
                description: A text description of the location specified by latitude and longitude.
                type: string
              radius:
                description: Defines the radius (in meters) of a circle around the point specified by latitude and longitude.
                maximum: 257500
                minimum: 0
                type: number
            type: object
          post_location:
            description: The short location description used by the user the last time they posted.
            properties:
              latitude:
                description: May be null.
                type: number
              longitude:
                description: May be null.
                type: number
              name:
                description: A text description of the location specified by latitude and longitude.
                type: string
            type: object
          post_reminders:
            description: Whether or not post reminders are enabled for this user (to remind them to update or repost their posts).
            type: boolean
          profile_image_source:
            description: |
              The source of the users' profile image. One of: gravatar, facebook, twitter, google, freegle, custom
            type: string
          public_name:
            description: Whether or not the user has chosen to make their first and last name public.
            type: boolean
          public_post_sources:
            description: |
              A list of the public post sources the user is interested in seeing posts from (currently only 'trashnothing' is supported). <br /><br /> NOTE: Additional sources may be added in the future so clients should take care to support arbitrary sources being returned.
            items:
              type: string
            type: array
          signup:
            description: The date and time when the user signed up.
            format: date-time
            type: string
          uses_fair_offer_policy:
            description: 'Whether or not the user used the Fair Offer Policy (see https://trashnothing.com/fair_offer_policy ) the last time they posted.'
            type: boolean
          verified:
            description: Whether or not the user has verified their account.
            type: boolean
        type: object
    example:
      contributed_recently: false
      country: US
      digest_enabled: true
      digest_frequency: 6_hours
      digest_timezone: America/Denver
      email_bouncing: false
      email_spam_stop: false
      filter_group_posts_by_location: true
      firstname: Jack
      has_password: false
      hide_ads: false
      last_listings_view: '2018-02-15T15:04:47.000Z'
      lastname: Carter
      location:
        latitude: 39.766098
        longitude: -105.077206
        name: 'Wheat Ridge, CO, USA'
        radius': 32186.88
      member_since: '2009-09-25T14:20:01.000Z'
      post_location:
        latitude: 39.766098
        longitude: -105.077206
        name: Wheat Ridge
      post_reminders: true
      profile_image: 'https://gravatar.com/avatar/88305a95b05b30f6cd306019ea5d88f3?s=90&r=pg&default=identicon'
      profile_image_source: gravatar
      public_name: false
      public_post_sources:
        - trashnothing
      signup: '2017-11-20T04:32:06.000Z'
      user_id: 119458
      username: captainjack
      uses_fair_offer_policy: true
      verified: true
  Email:
    description: Contains information about a user email address.
    example:
      address: johndoe@example.com
      bouncing: false
      email_id: 4729
      is_primary: true
      user_id: 1817
      verified: true
    properties:
      address:
        description: The email address.
        type: string
      bouncing:
        description: Whether or not this email address has been bouncing emails that are sent to it.
        type: boolean
      email_id:
        type: string
      is_primary:
        description: Whether or not this email is the primary email on the user account.
        type: boolean
      user_id:
        type: string
      verified:
        description: Whether or not this email address has been verified.
        type: boolean
    type: object
  GeolocateBounds:
    description: |
      Two bounding boxes that make using Google Maps' geocoder easier. <br /><br /> The default bounding box defines the area in which the post is probably located.  This is useful for providing a bounds to Google Maps geocoder. <br /><br /> The limit bounding box is a larger bounding box that contains the default bounding box. This is useful for discarding Google Maps geocoding results that are outside of this bounding box.
    properties:
      default:
        $ref: '#/definitions/BoundingBox'
      limit:
        $ref: '#/definitions/BoundingBox'
    type: object
  Group:
    description: |
      Groups are run by volunteer moderators and provide a way to group activity in a specific location. Because each group is usually run by different people, there can be variations in rules from group to group (eg. who is allowed to join, what is allowed to be posted, how often reposts are allowed).
    example:
      country:
        abbreviation: CA
        name: Canada
      group_id: 46
      has_questions: true
      homepage: 'https://trashnothing.com/OttawaReuse'
      identifier: OttawaReuse
      latitude: 45.423494
      longitude: -75.697933
      member_count: 4838
      membership:
        date: '2015-01-22T17:05:50.000Z'
        questionnaire:
          message: This group is only for people who live in Ottawa.
          questions:
            - Where do you live?
        status: pending-questions
      name: Ottawa Reuse
      open_archives: false
      open_membership: false
      region:
        abbreviation: 'ON'
        name: Ontario
      timezone: America/Toronto
      utc_offset: -5
    properties:
      country:
        description: Provides information about the country that is associated with a group.  May be null.
        example:
          abbreviation: US
          name: United States
        properties:
          abbreviation:
            description: |
              A 2 letter country code for the country (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ).
            type: string
          name:
            description: The name of the country.
            type: string
        type: object
      group_id:
        type: string
      has_questions:
        description: 'When true, anyone requesting membership to this group will be required to answer a new membership questionnaire.'
        type: boolean
      homepage:
        description: A URL to the group homepage.
        type: string
      identifier:
        description: A unique identifier for the group that is used in URLs.
        type: string
      latitude:
        type: number
      longitude:
        type: number
      member_count:
        description: The number of members who belong to the group.
        type: integer
      membership:
        description: |
          Provides information about the current users' active or pending membership to this group (if any).  Will be null if there is no active or pending membership to this group.
        properties:
          date:
            description: |
              For pending and pending-questions memberships, this is the date and time when the current user requested membership to this group. For subscribed memberships, this is the date and time when the membership status became subscribed.
            format: date-time
            type: string
          questionnaire:
            description: Membership questionnaire data.  Will be null unless the membership status is pending-questions.
            properties:
              message:
                description: A message from the group moderators to be displayed above the questions (may be null).
                type: string
              questions:
                description: The list of questions.
                items:
                  type: string
                type: array
            type: object
          status:
            description: |
              One of: subscribed, pending, pending-questions
            type: string
        type: object
      name:
        description: The name of the group (not guaranteed to be unique).
        type: string
      open_archives:
        description: 'When true, the group posts are viewable by anyone.  When false, the group posts can only be viewed by members of the group.'
        type: boolean
      open_membership:
        description: 'When true, the group allows anyone to join.  When false, the group moderators review and approve applicants.'
        type: boolean
      region:
        description: Provides information about an area within a country that a group is associated with (eg. a state in the US or a province in Canada).  May be null.
        example:
          abbreviation: CA
          name: California
        properties:
          abbreviation:
            description: A 2 letter abbreviation for the region (is not guaranteed to be globally unique but is unique among all the regions in the country).
            type: string
          name:
            description: The name of the region.
            type: string
        type: object
      timezone:
        description: The timezone that the group is in (eg. America/New_York).
        type: string
      utc_offset:
        description: The group offset (in hours) from UTC time.  This does not take into account daylight savings time (DST) in places that observe DST so it may be incorrect during DST.
        type: number
    type: object
  GroupNotice:
    description: Group notices are created by group moderators in order to provide useful information to the group members (eg. group rules and guidelines).
    example:
      content: 'Everything must be free, legal and appropriate for all ages.  Repeat offenders will be banned.'
      date: '2018-02-17T13:22:40.000Z'
      group_id: 1781
      notice_id: 81178
      title: Group Rules & Guidelines
    properties:
      content:
        type: string
      date:
        description: The date and time when this notice was received.
        format: date-time
        type: string
      group_id:
        type: string
      notice_id:
        type: string
      title:
        type: string
    type: object
  PhotoResult:
    description: The result of uploading or editing a photo.
    example:
      album_url: 'https://trashnothing.com/pics/307731'
      photo_id: 987-423
      thumbnail:
        height: 120
        url: 'https://trashnothing.com/img/2018-02-02/307731-20180119_155358.90x120.jpg'
        width: 90
    properties:
      album_url:
        description: A URL to view all the photos uploaded using the upload_key that this photo was uploaded with.
        type: string
      photo_id:
        type: string
      thumbnail:
        description: Photo thumbnail data.
        properties:
          height:
            type: integer
          url:
            type: string
          width:
            type: integer
        type: object
    type: object
  Post:
    description: 'An offer, wanted, admin, taken or received post.'
    example:
      content: This ultrasonic diffuser creates an aroma in your home. It comes with two essential oils - mint and lavender.
      date: '2018-02-05T15:10:21.000Z'
      group_id: 6
      latitude: 43.653226
      longitude: -79.383184
      photos:
        - images:
            - height: 120
              url: 'https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.90x120.jpg'
              width: 90
            - height: 240
              url: 'https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.180x240.jpg'
              width: 180
            - height: 360
              url: 'https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.270x360.jpg'
              width: 270
            - height: 500
              url: 'https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.375x500.jpg'
              width: 375
          photo_id: 695624-768616
          thumbnail: 'https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.90x120.jpg'
          url: 'https://trashnothing.com/img/2018-02-05/cfsbfm-39051735845_379baab73f.375x500.jpg'
      post_id: 3171898
      satisfied: true
      title: Ultrasonic diffuser (Downtown Toronto)
      type: offer
      user_id: 2933
    properties:
      content:
        type: string
      date:
        description: The date and time when the post was published.
        format: date-time
        type: string
      footer:
        description: Some groups add footers to posts that are separate and sometimes unrelated to the post itself - such as reminders about group rules or features (may be null).
        type: string
      group_id:
        description: |
          The group ID of the post.  For public posts, this is always null.
        type: string
      latitude:
        description: May be null if a post hasn't been mapped.
        type: number
      longitude:
        description: May be null if a post hasn't been mapped.
        type: number
      photos:
        description: Details about the photos associated with this post (may be null if there are no photos).
        items:
          properties:
            images:
              description: All the versions of this photo ordered from smallest to largest.  This list is guaranteed to include the photos specified by the above thumbnail and url properties.
              items:
                properties:
                  height:
                    type: integer
                  url:
                    type: string
                  width:
                    type: integer
                type: object
              type: array
            photo_id:
              type: string
            thumbnail:
              description: A URL to a thumbnail of this photo.  The size of the thumbnail depends on the device_pixel_ratio parameter and can vary from 120px by 120px up to 360px by 360px (but the thumbnail is not guaranteed to be square).
              type: string
            url:
              description: A URL to a version of this photo that is at most 800px by 600px (but may be smaller if no copy of the photo exists at that exact size).
              type: string
          type: object
        type: array
      post_id:
        type: string
      satisfied:
        description: |
          For offer and wanted posts, indicates whether or not this post has been satisfied or not. An offer that has been taken or a want that has been received have both been satisfied. For other types of posts, this is always null.
        type: boolean
      source:
        description: |
          The source of the post.  One of: groups, trashnothing.  A value of groups indicates the post is from a group and the group_id field will contain the ID of the group. A value of trashnothing indicates the post is a public post not associated with any group.
        type: string
      title:
        type: string
      type:
        description: |
          The type of post.  One of: offer, taken, wanted, received, admin
        type: string
      user_id:
        type: string
    type: object
  PostSearchResult:
    allOf:
      - $ref: '#/definitions/Post'
      - properties:
          search_content:
            description: |
              A snippet of the post content as HTML with the parts of the content that matched the search query (if any) wrapped in an HTML span tags with the class 'highlight' (eg. &lt;span class="highlight"&gt;matched words&lt;/span&gt;). May be null if none of the words in the post content matched the search query. <br /><br /> NOTE: This is not the full content of the post  It is just a snippet of around 200 characters that can be used to display the parts of the post content relevant to the search query.
            type: string
          search_subject:
            description: |
              The post subject as HTML with the parts of the subject that matched the search query (if any) wrapped in HTML span tags with the class 'highlight'. (eg. &lt;span class="highlight"&gt;matched words&lt;/span&gt;). May be null if none of the words in the subject matched the search query.
            type: string
        type: object
    example:
      content: |
        Panasonic microwave oven in good working order 800 W power and turntable inside Has all the normal microwave functions plus grill elements for browning Comes with original instructions booklet It's an old microwave and could do with a bit of a clean, but still works very well
      date: '2018-02-18T17:11:38.000Z'
      group_id: 81
      latitude: 42.961404
      longitude: -88.012586
      post_id: 25997431
      satisfied: false
      search_content: Panasonic <span class="highlight">microwave</span> oven in good working order 800 W power and turntable
      search_subject: <span class="highlight">Microwave</span> Oven (Greenfield)
      title: Microwave Oven (Greenfield)
      type: offer
      user_id: 82928
  User:
    example:
      country: GB
      member_since: '2017-01-27T06:35:55.000Z'
      profile_image: 'https://lh3.googleusercontent.com/-1qVLzuOCyYg/AAAAAAAAAAI/AAAAAAAAAAA/0aGNzRAO61c/s64-c/100783935580725962164.jpg'
      user_id: 2946512
      username: fred gibson
    properties:
      country:
        description: |
          A 2 letter country code for the country that has been automatically detected for the user (see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ). May be null if no country has been set.
        type: string
      firstname:
        description: The first name of the user (may be null).
        type: string
      lastname:
        description: The last name of the user (may be null).
        type: string
      member_since:
        description: The date and time when the user first became publicly active on a group (the date may be older than when the user signed up).
        type: string
      profile_image:
        description: 'A URL to a profile image for the user.  Profile images sizes vary based on the source (Google, Facebook, Twitter, Gravatar, etc) and some can be as small as 64px by 64px.'
        type: string
      user_id:
        type: string
      username:
        description: A username that can be displayed for the user (the username is NOT guaranteed to be unique).
        type: string
    type: object
