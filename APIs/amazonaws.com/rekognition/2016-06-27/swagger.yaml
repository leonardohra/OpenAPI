swagger: '2.0'
info:
  version: '2016-06-27'
  x-release: v4
  title: Amazon Rekognition
  description: This is the Amazon Rekognition API reference.
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: rekognition
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/rekognition-2016-06-27.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/rekognition/'
host: rekognition.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
parameters:
  Action:
    name: Action
    in: header
    type: string
    required: true
  Version:
    name: Version
    in: header
    type: string
    required: true
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  /:
    post:
      operationId: CompareFaces
      description: '<p>Compares a face in the <i>source</i> input image with each of the 100 largest faces detected in the <i>target</i> input image. </p> <note> <p> If the source image contains multiple faces, the service detects the largest face and compares it with each face detected in the target image. </p> </note> <p>You pass the input and target images either as base64-encoded image bytes or as a references to images in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes is not supported. The image must be either a PNG or JPEG formatted file. </p> <p>In response, the operation returns an array of face matches ordered by similarity score in descending order. For each face match, the response provides a bounding box of the face, facial landmarks, pose details (pitch, role, and yaw), quality (brightness and sharpness), and confidence value (indicating the level of confidence that the bounding box contains a face). The response also provides a similarity score, which indicates how closely the faces match. </p> <note> <p>By default, only faces with a similarity score of greater than or equal to 80% are returned in the response. You can change this value by specifying the <code>SimilarityThreshold</code> parameter.</p> </note> <p> <code>CompareFaces</code> also returns an array of faces that don''t match the source image. For each face, it returns a bounding box, confidence value, landmarks, pose details, and quality. The response also returns information about the face in the source image, including the bounding box of the face and confidence value.</p> <p>If the image doesn''t contain Exif metadata, <code>CompareFaces</code> returns orientation information for the source and target images. Use these values to display the images with the correct image orientation.</p> <p>If no faces are detected in the source or target images, <code>CompareFaces</code> returns an <code>InvalidParameterException</code> error. </p> <note> <p> This is a stateless API operation. That is, data returned by this operation doesn''t persist.</p> </note> <p>For an example, see Comparing Faces in Images in the Amazon Rekognition Developer Guide.</p> <p>This operation requires permissions to perform the <code>rekognition:CompareFaces</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompareFacesResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '482':
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        '483':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CompareFacesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateCollection':
    post:
      operationId: CreateCollection
      description: '<p>Creates a collection in an AWS Region. You can add faces to the collection using the operation. </p> <p>For example, you might create collections, one for each of your application users. A user can then index faces using the <code>IndexFaces</code> operation and persist results in a specific collection. Then, a user can search the collection for faces in the user-specific container. </p> <note> <p>Collection names are case-sensitive.</p> </note> <p>This operation requires permissions to perform the <code>rekognition:CreateCollection</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateCollectionResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceAlreadyExistsException
          schema:
            $ref: '#/definitions/ResourceAlreadyExistsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateCollectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateStreamProcessor':
    post:
      operationId: CreateStreamProcessor
      description: '<p>Creates an Amazon Rekognition stream processor that you can use to detect and recognize faces in a streaming video.</p> <p>Amazon Rekognition Video is a consumer of live video from Amazon Kinesis Video Streams. Amazon Rekognition Video sends analysis results to Amazon Kinesis Data Streams.</p> <p>You provide as input a Kinesis video stream (<code>Input</code>) and a Kinesis data stream (<code>Output</code>) stream. You also specify the face recognition criteria in <code>Settings</code>. For example, the collection containing faces that you want to recognize. Use <code>Name</code> to assign an identifier for the stream processor. You use <code>Name</code> to manage the stream processor. For example, you can start processing the source video by calling with the <code>Name</code> field. </p> <p>After you have finished analyzing a streaming video, use to stop processing. You can delete the stream processor by calling .</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateStreamProcessorResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateStreamProcessorRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteCollection':
    post:
      operationId: DeleteCollection
      description: '<p>Deletes the specified collection. Note that this operation removes all faces in the collection. For an example, see <a>delete-collection-procedure</a>.</p> <p>This operation requires permissions to perform the <code>rekognition:DeleteCollection</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteCollectionResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteCollectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteFaces':
    post:
      operationId: DeleteFaces
      description: '<p>Deletes faces from a collection. You specify a collection ID and an array of face IDs to remove from the collection.</p> <p>This operation requires permissions to perform the <code>rekognition:DeleteFaces</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteFacesResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteFacesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteStreamProcessor':
    post:
      operationId: DeleteStreamProcessor
      description: Deletes the stream processor identified by <code>Name</code>. You assign the value for <code>Name</code> when you create the stream processor with . You might not be able to use the same name for a stream processor for a few seconds after calling <code>DeleteStreamProcessor</code>.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteStreamProcessorResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '484':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '485':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteStreamProcessorRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DescribeCollection':
    post:
      operationId: DescribeCollection
      description: '<p>Describes the specified collection. You can use <code>DescribeCollection</code> to get information, such as the number of faces indexed into a collection and the version of the model used by the collection for face detection.</p> <p>For more information, see Describing a Collection in the Amazon Rekognition Developer Guide.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeCollectionResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeCollectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DescribeStreamProcessor':
    post:
      operationId: DescribeStreamProcessor
      description: 'Provides information about a stream processor created by . You can get information about the input and output streams, the input parameters for the face recognition being performed, and the current status of the stream processor.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeStreamProcessorResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '484':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '485':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeStreamProcessorRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DetectFaces':
    post:
      operationId: DetectFaces
      description: '<p>Detects faces within an image that is provided as input.</p> <p> <code>DetectFaces</code> detects the 100 largest faces in the image. For each face detected, the operation returns face details including a bounding box of the face, a confidence value (that the bounding box contains a face), and a fixed set of attributes such as facial landmarks (for example, coordinates of eye and mouth), gender, presence of beard, sunglasses, etc. </p> <p>The face-detection algorithm is most effective on frontal faces. For non-frontal or obscured faces, the algorithm may not detect the faces or might detect faces with lower confidence. </p> <p>You pass the input image either as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes is not supported. The image must be either a PNG or JPEG formatted file. </p> <note> <p>This is a stateless API operation. That is, the operation does not persist any data.</p> </note> <p>This operation requires permissions to perform the <code>rekognition:DetectFaces</code> action. </p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DetectFacesResponse'
        '480':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        '483':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DetectFacesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DetectLabels':
    post:
      operationId: DetectLabels
      description: '<p>Detects instances of real-world entities within an image (JPEG or PNG) provided as input. This includes objects like flower, tree, and table; events like wedding, graduation, and birthday party; and concepts like landscape, evening, and nature. </p> <p>For an example, see Analyzing Images Stored in an Amazon S3 Bucket in the Amazon Rekognition Developer Guide.</p> <note> <p> <code>DetectLabels</code> does not support the detection of activities. However, activity detection is supported for label detection in videos. For more information, see StartLabelDetection in the Amazon Rekognition Developer Guide.</p> </note> <p>You pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes is not supported. The image must be either a PNG or JPEG formatted file. </p> <p> For each object, scene, and concept the API returns one or more labels. Each label provides the object name, and the level of confidence that the image contains the object. For example, suppose the input image has a lighthouse, the sea, and a rock. The response will include all three labels, one for each object. </p> <p> <code>{Name: lighthouse, Confidence: 98.4629}</code> </p> <p> <code>{Name: rock,Confidence: 79.2097}</code> </p> <p> <code> {Name: sea,Confidence: 75.061}</code> </p> <p>In the preceding example, the operation returns one label for each of the three objects. The operation can also return multiple labels for the same object in the image. For example, if the input image shows a flower (for example, a tulip), the operation might return the following three labels. </p> <p> <code>{Name: flower,Confidence: 99.0562}</code> </p> <p> <code>{Name: plant,Confidence: 99.0562}</code> </p> <p> <code>{Name: tulip,Confidence: 99.0562}</code> </p> <p>In this example, the detection algorithm more precisely identifies the flower as a tulip.</p> <p>In response, the API returns an array of labels. In addition, the response also includes the orientation correction. Optionally, you can specify <code>MinConfidence</code> to control the confidence threshold for the labels returned. The default is 50%. You can also add the <code>MaxLabels</code> parameter to limit the number of labels returned. </p> <note> <p>If the object detected is a person, the operation doesn''t provide the same facial details that the <a>DetectFaces</a> operation provides.</p> </note> <p>This is a stateless API operation. That is, the operation does not persist any data.</p> <p>This operation requires permissions to perform the <code>rekognition:DetectLabels</code> action. </p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DetectLabelsResponse'
        '480':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        '483':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DetectLabelsRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DetectModerationLabels':
    post:
      operationId: DetectModerationLabels
      description: '<p>Detects explicit or suggestive adult content in a specified JPEG or PNG format image. Use <code>DetectModerationLabels</code> to moderate images depending on your requirements. For example, you might want to filter images that contain nudity, but not images containing suggestive content.</p> <p>To filter images, use the labels returned by <code>DetectModerationLabels</code> to determine which types of content are appropriate.</p> <p>For information about moderation labels, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p> <p>You pass the input image either as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes is not supported. The image must be either a PNG or JPEG formatted file. </p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DetectModerationLabelsResponse'
        '480':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        '483':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DetectModerationLabelsRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DetectText':
    post:
      operationId: DetectText
      description: '<p>Detects text in the input image and converts it into machine-readable text.</p> <p>Pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, you must pass it as a reference to an image in an Amazon S3 bucket. For the AWS CLI, passing image bytes is not supported. The image must be either a .png or .jpeg formatted file. </p> <p>The <code>DetectText</code> operation returns text in an array of elements, <code>TextDetections</code>. Each <code>TextDetection</code> element provides information about a single word or line of text that was detected in the image. </p> <p>A word is one or more ISO basic latin script characters that are not separated by spaces. <code>DetectText</code> can detect up to 50 words in an image.</p> <p>A line is a string of equally spaced words. A line isn''t necessarily a complete sentence. For example, a driver''s license number is detected as a line. A line ends when there is no aligned text after it. Also, a line ends when there is a large gap between words, relative to the length of the words. This means, depending on the gap between words, Amazon Rekognition may detect multiple lines in text aligned in the same direction. Periods don''t represent the end of a line. If a sentence spans multiple lines, the <code>DetectText</code> operation returns multiple lines.</p> <p>To determine whether a <code>TextDetection</code> element is a line of text or a word, use the <code>TextDetection</code> object <code>Type</code> field. </p> <p>To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.</p> <p>For more information, see DetectText in the Amazon Rekognition Developer Guide.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DetectTextResponse'
        '480':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        '483':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DetectTextRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetCelebrityInfo':
    post:
      operationId: GetCelebrityInfo
      description: '<p>Gets the name and additional information about a celebrity based on his or her Rekognition ID. The additional information is returned as an array of URLs. If there is no additional information about the celebrity, this list is empty.</p> <p>For more information, see Recognizing Celebrities in an Image in the Amazon Rekognition Developer Guide.</p> <p>This operation requires permissions to perform the <code>rekognition:GetCelebrityInfo</code> action. </p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCelebrityInfoResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCelebrityInfoRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetCelebrityRecognition':
    post:
      operationId: GetCelebrityRecognition
      description: '<p>Gets the celebrity recognition results for a Amazon Rekognition Video analysis started by .</p> <p>Celebrity recognition in a video is an asynchronous operation. Analysis is started by a call to which returns a job identifier (<code>JobId</code>). When the celebrity recognition operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic registered in the initial call to <code>StartCelebrityRecognition</code>. To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetCelebrityDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>. </p> <p>For more information, see Working With Stored Videos in the Amazon Rekognition Developer Guide.</p> <p> <code>GetCelebrityRecognition</code> returns detected celebrities and the time(s) they are detected in an array (<code>Celebrities</code>) of objects. Each <code>CelebrityRecognition</code> contains information about the celebrity in a object and the time, <code>Timestamp</code>, the celebrity was detected. </p> <note> <p> <code>GetCelebrityRecognition</code> only returns the default facial attributes (<code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed in the <code>Face</code> object of the following response syntax are not returned. For more information, see FaceDetail in the Amazon Rekognition Developer Guide. </p> </note> <p>By default, the <code>Celebrities</code> array is sorted by time (milliseconds from the start of the video). You can also sort the array by celebrity by specifying the value <code>ID</code> in the <code>SortBy</code> input parameter.</p> <p>The <code>CelebrityDetail</code> object includes the celebrity identifer and additional information urls. If you don''t store the additional information urls, you can get them later by calling with the celebrity identifer.</p> <p>No information is returned for faces not recognized as celebrities.</p> <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call <code>GetCelebrityDetection</code> and populate the <code>NextToken</code> request parameter with the token value returned from the previous call to <code>GetCelebrityRecognition</code>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCelebrityRecognitionResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '486':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCelebrityRecognitionRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetContentModeration':
    post:
      operationId: GetContentModeration
      description: '<p>Gets the content moderation analysis results for a Amazon Rekognition Video analysis started by .</p> <p>Content moderation analysis of a video is an asynchronous operation. You start analysis by calling . which returns a job identifier (<code>JobId</code>). When analysis finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic registered in the initial call to <code>StartContentModeration</code>. To get the results of the content moderation analysis, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetCelebrityDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartCelebrityDetection</code>. </p> <p>For more information, see Working with Stored Videos in the Amazon Rekognition Devlopers Guide.</p> <p> <code>GetContentModeration</code> returns detected content moderation labels, and the time they are detected, in an array, <code>ModerationLabels</code>, of objects. </p> <p>By default, the moderated labels are returned sorted by time, in milliseconds from the start of the video. You can also sort them by moderated label by specifying <code>NAME</code> for the <code>SortBy</code> input parameter. </p> <p>Since video analysis can return a large number of results, use the <code>MaxResults</code> parameter to limit the number of labels returned in a single call to <code>GetContentModeration</code>. If there are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call <code>GetContentModeration</code> and populate the <code>NextToken</code> request parameter with the value of <code>NextToken</code> returned from the previous call to <code>GetContentModeration</code>.</p> <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetContentModerationResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '486':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetContentModerationRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetFaceDetection':
    post:
      operationId: GetFaceDetection
      description: '<p>Gets face detection results for a Amazon Rekognition Video analysis started by .</p> <p>Face detection with Amazon Rekognition Video is an asynchronous operation. You start face detection by calling which returns a job identifier (<code>JobId</code>). When the face detection operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic registered in the initial call to <code>StartFaceDetection</code>. To get the results of the face detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartFaceDetection</code>.</p> <p> <code>GetFaceDetection</code> returns an array of detected faces (<code>Faces</code>) sorted by the time the faces were detected. </p> <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call <code>GetFaceDetection</code> and populate the <code>NextToken</code> request parameter with the token value returned from the previous call to <code>GetFaceDetection</code>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFaceDetectionResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '486':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetFaceDetectionRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetFaceSearch':
    post:
      operationId: GetFaceSearch
      description: '<p>Gets the face search results for Amazon Rekognition Video face search started by . The search returns faces in a collection that match the faces of persons detected in a video. It also includes the time(s) that faces are matched in the video.</p> <p>Face search in a video is an asynchronous operation. You start face search by calling to which returns a job identifier (<code>JobId</code>). When the search operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic registered in the initial call to <code>StartFaceSearch</code>. To get the search results, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call <code>GetFaceSearch</code> and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartFaceSearch</code>.</p> <p>For more information, see Searching Faces in a Collection in the Amazon Rekognition Developer Guide.</p> <p>The search results are retured in an array, <code>Persons</code>, of objects. Each<code>PersonMatch</code> element contains details about the matching faces in the input collection, person information (facial attributes, bounding boxes, and person identifer) for the matched person, and the time the person was matched in the video.</p> <note> <p> <code>GetFaceSearch</code> only returns the default facial attributes (<code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed in the <code>Face</code> object of the following response syntax are not returned. For more information, see FaceDetail in the Amazon Rekognition Developer Guide. </p> </note> <p>By default, the <code>Persons</code> array is sorted by the time, in milliseconds from the start of the video, persons are matched. You can also sort by persons by specifying <code>INDEX</code> for the <code>SORTBY</code> input parameter.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFaceSearchResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '486':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetFaceSearchRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetLabelDetection':
    post:
      operationId: GetLabelDetection
      description: '<p>Gets the label detection results of a Amazon Rekognition Video analysis started by . </p> <p>The label detection operation is started by a call to which returns a job identifier (<code>JobId</code>). When the label detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service topic registered in the initial call to <code>StartlabelDetection</code>. To get the results of the label detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p> <p> <code>GetLabelDetection</code> returns an array of detected labels (<code>Labels</code>) sorted by the time the labels were detected. You can also sort by the label name by specifying <code>NAME</code> for the <code>SortBy</code> input parameter.</p> <p>The labels returned include the label name, the percentage confidence in the accuracy of the detected label, and the time the label was detected in the video.</p> <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call <code>GetlabelDetection</code> and populate the <code>NextToken</code> request parameter with the token value returned from the previous call to <code>GetLabelDetection</code>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetLabelDetectionResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '486':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetLabelDetectionRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetPersonTracking':
    post:
      operationId: GetPersonTracking
      description: '<p>Gets the person tracking results of a Amazon Rekognition Video analysis started by .</p> <p>The person detection operation is started by a call to <code>StartPersonTracking</code> which returns a job identifier (<code>JobId</code>). When the person detection operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic registered in the initial call to <code>StartPersonTracking</code>.</p> <p>To get the results of the person tracking operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.</p> <p> <code>GetPersonTracking</code> returns an array, <code>Persons</code>, of tracked persons and the time(s) they were tracked in the video. </p> <note> <p> <code>GetPersonTracking</code> only returns the default facial attributes (<code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed in the <code>Face</code> object of the following response syntax are not returned. </p> <p>For more information, see FaceDetail in the Amazon Rekognition Developer Guide.</p> </note> <p>By default, the array is sorted by the time(s) a person is tracked in the video. You can sort by tracked persons by specifying <code>INDEX</code> for the <code>SortBy</code> input parameter.</p> <p>Use the <code>MaxResults</code> parameter to limit the number of items returned. If there are more results than specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call <code>GetPersonTracking</code> and populate the <code>NextToken</code> request parameter with the token value returned from the previous call to <code>GetPersonTracking</code>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetPersonTrackingResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '486':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetPersonTrackingRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#IndexFaces':
    post:
      operationId: IndexFaces
      description: '<p>Detects faces in the input image and adds them to the specified collection. </p> <p>Amazon Rekognition does not save the actual faces detected. Instead, the underlying detection algorithm first detects the faces in the input image, and for each face extracts facial features into a feature vector, and stores it in the back-end database. Amazon Rekognition uses feature vectors when performing face match and search operations using the and operations.</p> <p>To get the number of faces in a collection, call . </p> <p>If you are using version 1.0 of the face detection model, <code>IndexFaces</code> indexes the 15 largest faces in the input image. Later versions of the face detection model index the 100 largest faces in the input image. To determine which version of the model you are using, call and supply the collection ID. You also get the model version from the value of <code>FaceModelVersion</code> in the response from <code>IndexFaces</code>. </p> <p>For more information, see Model Versioning in the Amazon Rekognition Developer Guide.</p> <p>If you provide the optional <code>ExternalImageID</code> for the input image you provided, Amazon Rekognition associates this ID with all faces that it detects. When you call the operation, the response returns the external ID. You can use this external image ID to create a client-side index to associate the faces with each image. You can then use the index to find all faces in an image.</p> <p>You can specify the maximum number of faces to index with the <code>MaxFaces</code> input parameter. This is useful when you want to index the largest faces in an image, and you don''t want to index other faces detected in the image.</p> <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces that don’t meet the required quality bar chosen by Amazon Rekognition. The quality bar is based on a variety of common use cases.</p> <p>In response, the operation returns an array of metadata for all detected faces, <code>FaceRecords</code>. This includes: </p> <ul> <li> <p>The bounding box, <code>BoundingBox</code>, of the detected face. </p> </li> <li> <p>A confidence value, <code>Confidence</code>, indicating the confidence that the bounding box contains a face.</p> </li> <li> <p>A face ID, <code>faceId</code>, assigned by the service for each face that is detected and stored.</p> </li> <li> <p>An image ID, <code>ImageId</code>, assigned by the service for the input image.</p> </li> </ul> <p>If you request all facial attributes (using the <code>detectionAttributes</code> parameter), Amazon Rekognition returns detailed facial attributes such as facial landmarks (for example, location of eye and mouth) and other facial attributes such gender. If you provide the same image, specify the same collection, and use the same external ID in the <code>IndexFaces</code> operation, Amazon Rekognition doesn''t save duplicate face metadata.</p> <p>Information about faces detected in an image, but not indexed, is returned in an array of objects, <code>UnindexedFaces</code>. Faces are not indexed for reasons such as:</p> <ul> <li> <p>The face is too blurry.</p> </li> <li> <p>The image is too dark.</p> </li> <li> <p>The face has an extreme pose.</p> </li> <li> <p>The face is too small.</p> </li> <li> <p>The number of faces detected exceeds the value of the <code>MaxFaces</code> request parameter.</p> </li> </ul> <p/> <p>For more information, see Adding Faces to a Collection in the Amazon Rekognition Developer Guide.</p> <p>The input image is passed either as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes is not supported. The image must be either a PNG or JPEG formatted file. </p> <p>This operation requires permissions to perform the <code>rekognition:IndexFaces</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IndexFacesResponse'
        '480':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        '483':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '488':
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/IndexFacesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListCollections':
    post:
      operationId: ListCollections
      description: '<p>Returns list of collection IDs in your account. If the result is truncated, the response also provides a <code>NextToken</code> that you can use in the subsequent request to fetch the next set of collection IDs.</p> <p>For an example, see Listing Collections in the Amazon Rekognition Developer Guide.</p> <p>This operation requires permissions to perform the <code>rekognition:ListCollections</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListCollectionsResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        '486':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListCollectionsRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListFaces':
    post:
      operationId: ListFaces
      description: '<p>Returns metadata for faces in the specified collection. This metadata includes information such as the bounding box coordinates, the confidence (that the bounding box contains a face), and face ID. For an example, see Listing Faces in a Collection in the Amazon Rekognition Developer Guide.</p> <p>This operation requires permissions to perform the <code>rekognition:ListFaces</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListFacesResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        '486':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListFacesRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListStreamProcessors':
    post:
      operationId: ListStreamProcessors
      description: 'Gets a list of stream processors that you have created with . '
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListStreamProcessorsResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '484':
          description: InvalidPaginationTokenException
          schema:
            $ref: '#/definitions/InvalidPaginationTokenException'
        '485':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListStreamProcessorsRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#RecognizeCelebrities':
    post:
      operationId: RecognizeCelebrities
      description: '<p>Returns an array of celebrities recognized in the input image. For more information, see Recognizing Celebrities in the Amazon Rekognition Developer Guide. </p> <p> <code>RecognizeCelebrities</code> returns the 100 largest faces in the image. It lists recognized celebrities in the <code>CelebrityFaces</code> array and unrecognized faces in the <code>UnrecognizedFaces</code> array. <code>RecognizeCelebrities</code> doesn''t return celebrities whose faces are not amongst the largest 100 faces in the image.</p> <p>For each celebrity recognized, the <code>RecognizeCelebrities</code> returns a <code>Celebrity</code> object. The <code>Celebrity</code> object contains the celebrity name, ID, URL links to additional information, match confidence, and a <code>ComparedFace</code> object that you can use to locate the celebrity''s face on the image.</p> <p>Rekognition does not retain information about which images a celebrity has been recognized in. Your application must store this information and use the <code>Celebrity</code> ID property as a unique identifier for the celebrity. If you don''t store the celebrity name or additional information URLs returned by <code>RecognizeCelebrities</code>, you will need the ID to identify the celebrity in a call to the operation.</p> <p>You pass the imput image either as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes is not supported. The image must be either a PNG or JPEG formatted file. </p> <p>For an example, see Recognizing Celebrities in an Image in the Amazon Rekognition Developer Guide.</p> <p>This operation requires permissions to perform the <code>rekognition:RecognizeCelebrities</code> operation.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RecognizeCelebritiesResponse'
        '480':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
        '483':
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        '484':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '485':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '486':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '487':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '488':
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RecognizeCelebritiesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#SearchFaces':
    post:
      operationId: SearchFaces
      description: '<p>For a given input face ID, searches for matching faces in the collection the face belongs to. You get a face ID when you add a face to the collection using the <a>IndexFaces</a> operation. The operation compares the features of the input face with faces in the specified collection. </p> <note> <p>You can also search faces without indexing faces by using the <code>SearchFacesByImage</code> operation.</p> </note> <p> The operation response returns an array of faces that match, ordered by similarity score with the highest similarity first. More specifically, it is an array of metadata for each face match that is found. Along with the metadata, the response also includes a <code>confidence</code> value for each face match, indicating the confidence that the specific face matches the input face. </p> <p>For an example, see Searching for a Face Using Its Face ID in the Amazon Rekognition Developer Guide.</p> <p>This operation requires permissions to perform the <code>rekognition:SearchFaces</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SearchFacesResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '482':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '485':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SearchFacesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#SearchFacesByImage':
    post:
      operationId: SearchFacesByImage
      description: '<p>For a given input image, first detects the largest face in the image, and then searches the specified collection for matching faces. The operation compares the features of the input face with faces in the specified collection. </p> <note> <p>To search for all faces in an input image, you might first call the operation, and then use the face IDs returned in subsequent calls to the operation. </p> <p> You can also call the <code>DetectFaces</code> operation and use the bounding boxes in the response to make face crops, which then you can pass in to the <code>SearchFacesByImage</code> operation. </p> </note> <p>You pass the input image either as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes is not supported. The image must be either a PNG or JPEG formatted file. </p> <p> The response returns an array of faces that match, ordered by similarity score with the highest similarity first. More specifically, it is an array of metadata for each face match found. Along with the metadata, the response also includes a <code>similarity</code> indicating how similar the face is to the input face. In the response, the operation also returns the bounding box (and a confidence level that the bounding box contains a face) of the face that Amazon Rekognition used for the input image. </p> <p>For an example, Searching for a Face Using an Image in the Amazon Rekognition Developer Guide.</p> <p>This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code> action.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SearchFacesByImageResponse'
        '480':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: ImageTooLargeException
          schema:
            $ref: '#/definitions/ImageTooLargeException'
        '483':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '488':
          description: InvalidImageFormatException
          schema:
            $ref: '#/definitions/InvalidImageFormatException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SearchFacesByImageRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartCelebrityRecognition':
    post:
      operationId: StartCelebrityRecognition
      description: '<p>Starts asynchronous recognition of celebrities in a stored video.</p> <p>Amazon Rekognition Video can detect celebrities in a video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and the filename of the video. <code>StartCelebrityRecognition</code> returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis. When celebrity recognition analysis is finished, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>. To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartCelebrityRecognition</code>. </p> <p>For more information, see Recognizing Celebrities in the Amazon Rekognition Developer Guide.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartCelebrityRecognitionResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '488':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartCelebrityRecognitionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartContentModeration':
    post:
      operationId: StartContentModeration
      description: '<p> Starts asynchronous detection of explicit or suggestive adult content in a stored video.</p> <p>Amazon Rekognition Video can moderate content in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and the filename of the video. <code>StartContentModeration</code> returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis. When content moderation analysis is finished, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p> <p>To get the results of the content moderation analysis, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p> <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartContentModerationResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '488':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartContentModerationRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartFaceDetection':
    post:
      operationId: StartFaceDetection
      description: '<p>Starts asynchronous detection of faces in a stored video.</p> <p>Amazon Rekognition Video can detect faces in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and the filename of the video. <code>StartFaceDetection</code> returns a job identifier (<code>JobId</code>) that you use to get the results of the operation. When face detection is finished, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>. To get the results of the label detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartFaceDetection</code>.</p> <p>For more information, see Detecting Faces in a Stored Video in the Amazon Rekognition Developer Guide.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartFaceDetectionResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '488':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartFaceDetectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartFaceSearch':
    post:
      operationId: StartFaceSearch
      description: '<p>Starts the asynchronous search for faces in a collection that match the faces of persons detected in a stored video.</p> <p>The video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and the filename of the video. <code>StartFaceSearch</code> returns a job identifier (<code>JobId</code>) which you use to get the search results once the search has completed. When searching is finished, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>. To get the search results, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartFaceSearch</code>. For more information, see <a>procedure-person-search-videos</a>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartFaceSearchResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '488':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '489':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartFaceSearchRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartLabelDetection':
    post:
      operationId: StartLabelDetection
      description: '<p>Starts asynchronous detection of labels in a stored video.</p> <p>Amazon Rekognition Video can detect labels in a video. Labels are instances of real-world entities. This includes objects like flower, tree, and table; events like wedding, graduation, and birthday party; concepts like landscape, evening, and nature; and activities like a person getting out of a car or a person skiing.</p> <p>The video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and the filename of the video. <code>StartLabelDetection</code> returns a job identifier (<code>JobId</code>) which you use to get the results of the operation. When label detection is finished, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p> <p>To get the results of the label detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p> <p/>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartLabelDetectionResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '488':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartLabelDetectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartPersonTracking':
    post:
      operationId: StartPersonTracking
      description: '<p>Starts the asynchronous tracking of persons in a stored video.</p> <p>Amazon Rekognition Video can track persons in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and the filename of the video. <code>StartPersonTracking</code> returns a job identifier (<code>JobId</code>) which you use to get the results of the operation. When label detection is finished, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>. </p> <p>To get the results of the person detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. If so, call and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartPersonTrackingResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        '482':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '483':
          description: InvalidS3ObjectException
          schema:
            $ref: '#/definitions/InvalidS3ObjectException'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: VideoTooLargeException
          schema:
            $ref: '#/definitions/VideoTooLargeException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
        '487':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '488':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartPersonTrackingRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartStreamProcessor':
    post:
      operationId: StartStreamProcessor
      description: 'Starts processing a stream processor. You create a stream processor by calling . To tell <code>StartStreamProcessor</code> which stream processor to start, use the value of the <code>Name</code> field specified in the call to <code>CreateStreamProcessor</code>.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartStreamProcessorResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '484':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '485':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartStreamProcessorRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StopStreamProcessor':
    post:
      operationId: StopStreamProcessor
      description: Stops a running stream processor that was created by .
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StopStreamProcessorResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '484':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '485':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '486':
          description: ProvisionedThroughputExceededException
          schema:
            $ref: '#/definitions/ProvisionedThroughputExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StopStreamProcessorRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  CompareFacesResponse:
    type: object
    example:
      FaceMatches:
        - Face:
            BoundingBox:
              Height: 0.33481481671333313
              Left: 0.31888890266418457
              Top: 0.4933333396911621
              Width: 0.25
            Confidence: 99.9991226196289
          Similarity: 100
      SourceImageFace:
        BoundingBox:
          Height: 0.33481481671333313
          Left: 0.31888890266418457
          Top: 0.4933333396911621
          Width: 0.25
        Confidence: 99.9991226196289
    properties:
      SourceImageFace:
        $ref: '#/definitions/ComparedSourceImageFace'
        description: The face in the source image that was used for comparison.
      FaceMatches:
        $ref: '#/definitions/CompareFacesMatchList'
        description: 'An array of faces in the target image that match the source image face. Each <code>CompareFacesMatch</code> object provides the bounding box, the confidence level that the bounding box contains a face, and the similarity score for the face in the bounding box and the face in the source image.'
      UnmatchedFaces:
        $ref: '#/definitions/CompareFacesUnmatchList'
        description: An array of faces in the target image that did not match the source image face.
      SourceImageOrientationCorrection:
        $ref: '#/definitions/OrientationCorrection'
        description: '<p> The orientation of the source image (counterclockwise direction). If your application displays the source image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>SourceImageFace</code> represent the location of the face before the image orientation is corrected. </p> <note> <p>If the source image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image''s orientation. If the Exif metadata for the source image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the <code>SourceImageFace</code> bounding box coordinates represent the location of the face after Exif metadata is used to correct the orientation. Images in .png format don''t contain Exif metadata.</p> </note>'
      TargetImageOrientationCorrection:
        $ref: '#/definitions/OrientationCorrection'
        description: '<p> The orientation of the target image (in counterclockwise direction). If your application displays the target image, you can use this value to correct the orientation of the image. The bounding box coordinates returned in <code>FaceMatches</code> and <code>UnmatchedFaces</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the target image is in .jpg format, it might contain Exif metadata that includes the orientation of the image. If the Exif metadata for the target image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the bounding box coordinates in <code>FaceMatches</code> and <code>UnmatchedFaces</code> represent the location of the face after Exif metadata is used to correct the orientation. Images in .png format don''t contain Exif metadata.</p> </note>'
  CompareFacesRequest:
    type: object
    required:
      - SourceImage
      - TargetImage
    example:
      SimilarityThreshold: 90
      SourceImage:
        S3Object:
          Bucket: mybucket
          Name: mysourceimage
      TargetImage:
        S3Object:
          Bucket: mybucket
          Name: mytargetimage
    properties:
      SourceImage:
        $ref: '#/definitions/Image'
        description: 'The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. '
      TargetImage:
        $ref: '#/definitions/Image'
        description: 'The target image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. '
      SimilarityThreshold:
        $ref: '#/definitions/Percent'
        description: The minimum level of confidence in the face matches that a match must meet to be included in the <code>FaceMatches</code> array.
  InvalidParameterException: {}
  InvalidS3ObjectException: {}
  ImageTooLargeException: {}
  AccessDeniedException: {}
  InternalServerError: {}
  ThrottlingException: {}
  ProvisionedThroughputExceededException: {}
  InvalidImageFormatException: {}
  CreateCollectionResponse:
    type: object
    example:
      CollectionArn: 'aws:rekognition:us-west-2:123456789012:collection/myphotos'
      StatusCode: 200
    properties:
      StatusCode:
        $ref: '#/definitions/UInteger'
        description: HTTP status code indicating the result of the operation.
      CollectionArn:
        $ref: '#/definitions/String'
        description: 'Amazon Resource Name (ARN) of the collection. You can use this to manage permissions on your resources. '
      FaceModelVersion:
        $ref: '#/definitions/String'
        description: Version number of the face detection model associated with the collection you are creating.
  CreateCollectionRequest:
    type: object
    required:
      - CollectionId
    example:
      CollectionId: myphotos
    properties:
      CollectionId:
        $ref: '#/definitions/CollectionId'
        description: ID for the collection that you are creating.
  ResourceAlreadyExistsException: {}
  CreateStreamProcessorResponse:
    type: object
    properties:
      StreamProcessorArn:
        $ref: '#/definitions/StreamProcessorArn'
        description: ARN for the newly create stream processor.
  CreateStreamProcessorRequest:
    type: object
    required:
      - Input
      - Output
      - Name
      - Settings
      - RoleArn
    properties:
      Input:
        $ref: '#/definitions/StreamProcessorInput'
        description: 'Kinesis video stream stream that provides the source streaming video. If you are using the AWS CLI, the parameter name is <code>StreamProcessorInput</code>.'
      Output:
        $ref: '#/definitions/StreamProcessorOutput'
        description: 'Kinesis data stream stream to which Amazon Rekognition Video puts the analysis results. If you are using the AWS CLI, the parameter name is <code>StreamProcessorOutput</code>.'
      Name:
        $ref: '#/definitions/StreamProcessorName'
        description: 'An identifier you assign to the stream processor. You can use <code>Name</code> to manage the stream processor. For example, you can get the current status of the stream processor by calling . <code>Name</code> is idempotent. '
      Settings:
        $ref: '#/definitions/StreamProcessorSettings'
        description: Face recognition input parameters to be used by the stream processor. Includes the collection to use for face recognition and the face attributes to detect.
      RoleArn:
        $ref: '#/definitions/RoleArn'
        description: ARN of the IAM role that allows access to the stream processor.
  LimitExceededException: {}
  ResourceInUseException: {}
  DeleteCollectionResponse:
    type: object
    example:
      StatusCode: 200
    properties:
      StatusCode:
        $ref: '#/definitions/UInteger'
        description: HTTP status code that indicates the result of the operation.
  DeleteCollectionRequest:
    type: object
    required:
      - CollectionId
    example:
      CollectionId: myphotos
    properties:
      CollectionId:
        $ref: '#/definitions/CollectionId'
        description: ID of the collection to delete.
  ResourceNotFoundException: {}
  DeleteFacesResponse:
    type: object
    example:
      DeletedFaces:
        - ff43d742-0c13-5d16-a3e8-03d3f58e980b
    properties:
      DeletedFaces:
        $ref: '#/definitions/FaceIdList'
        description: An array of strings (face IDs) of the faces that were deleted.
  DeleteFacesRequest:
    type: object
    required:
      - CollectionId
      - FaceIds
    example:
      CollectionId: myphotos
      FaceIds:
        - ff43d742-0c13-5d16-a3e8-03d3f58e980b
    properties:
      CollectionId:
        $ref: '#/definitions/CollectionId'
        description: Collection from which to remove the specific faces.
      FaceIds:
        $ref: '#/definitions/FaceIdList'
        description: An array of face IDs to delete.
  DeleteStreamProcessorResponse:
    type: object
    properties: {}
  DeleteStreamProcessorRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/StreamProcessorName'
        description: The name of the stream processor you want to delete.
  DescribeCollectionResponse:
    type: object
    properties:
      FaceCount:
        $ref: '#/definitions/ULong'
        description: 'The number of faces that are indexed into the collection. To index faces into a collection, use .'
      FaceModelVersion:
        $ref: '#/definitions/String'
        description: '<p>The version of the face model that''s used by the collection for face detection.</p> <p>For more information, see Model Versioning in the Amazon Rekognition Developer Guide.</p>'
      CollectionARN:
        $ref: '#/definitions/String'
        description: The Amazon Resource Name (ARN) of the collection.
      CreationTimestamp:
        $ref: '#/definitions/DateTime'
        description: 'The number of milliseconds since the Unix epoch time until the creation of the collection. The Unix epoch time is 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970.'
  DescribeCollectionRequest:
    type: object
    required:
      - CollectionId
    properties:
      CollectionId:
        $ref: '#/definitions/CollectionId'
        description: The ID of the collection to describe.
  DescribeStreamProcessorResponse:
    type: object
    properties:
      Name:
        $ref: '#/definitions/StreamProcessorName'
        description: 'Name of the stream processor. '
      StreamProcessorArn:
        $ref: '#/definitions/StreamProcessorArn'
        description: ARN of the stream processor.
      Status:
        $ref: '#/definitions/StreamProcessorStatus'
        description: Current status of the stream processor.
      StatusMessage:
        $ref: '#/definitions/String'
        description: Detailed status message about the stream processor.
      CreationTimestamp:
        $ref: '#/definitions/DateTime'
        description: Date and time the stream processor was created
      LastUpdateTimestamp:
        $ref: '#/definitions/DateTime'
        description: 'The time, in Unix format, the stream processor was last updated. For example, when the stream processor moves from a running state to a failed state, or when the user starts or stops the stream processor.'
      Input:
        $ref: '#/definitions/StreamProcessorInput'
        description: Kinesis video stream that provides the source streaming video.
      Output:
        $ref: '#/definitions/StreamProcessorOutput'
        description: Kinesis data stream to which Amazon Rekognition Video puts the analysis results.
      RoleArn:
        $ref: '#/definitions/RoleArn'
        description: ARN of the IAM role that allows access to the stream processor.
      Settings:
        $ref: '#/definitions/StreamProcessorSettings'
        description: Face recognition input parameters that are being used by the stream processor. Includes the collection to use for face recognition and the face attributes to detect.
  DescribeStreamProcessorRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/StreamProcessorName'
        description: Name of the stream processor for which you want information.
  DetectFacesResponse:
    type: object
    example:
      FaceDetails:
        - BoundingBox:
            Height: 0.18000000715255737
            Left: 0.5555555820465088
            Top: 0.33666667342185974
            Width: 0.23999999463558197
          Confidence: 100
          Landmarks:
            - Type: eyeLeft
              X: 0.6394737362861633
              'Y': 0.40819624066352844
            - Type: eyeRight
              X: 0.7266660928726196
              'Y': 0.41039225459098816
            - Type: eyeRight
              X: 0.6912462115287781
              'Y': 0.44240960478782654
            - Type: mouthDown
              X: 0.6306198239326477
              'Y': 0.46700039505958557
            - Type: mouthUp
              X: 0.7215608954429626
              'Y': 0.47114261984825134
          Pose:
            Pitch: 4.050806522369385
            Roll: 0.9950747489929199
            Yaw: 13.693790435791016
          Quality:
            Brightness: 37.60169982910156
            Sharpness: 80
      OrientationCorrection: ROTATE_0
    properties:
      FaceDetails:
        $ref: '#/definitions/FaceDetailList'
        description: 'Details of each face found in the image. '
      OrientationCorrection:
        $ref: '#/definitions/OrientationCorrection'
        description: '<p> The orientation of the input image (counter-clockwise direction). If your application displays the image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>FaceDetails</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the input image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image''s orientation. If so, and the Exif metadata for the input image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the <code>FaceDetails</code> bounding box coordinates represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don''t contain Exif metadata.</p> </note>'
  DetectFacesRequest:
    type: object
    required:
      - Image
    example:
      Image:
        S3Object:
          Bucket: mybucket
          Name: myphoto
    properties:
      Image:
        $ref: '#/definitions/Image'
        description: 'The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. '
      Attributes:
        $ref: '#/definitions/Attributes'
        description: '<p>An array of facial attributes you want to be returned. This can be the default list of attributes or all attributes. If you don''t specify a value for <code>Attributes</code> or if you specify <code>["DEFAULT"]</code>, the API returns the following subset of facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>, <code>Quality</code> and <code>Landmarks</code>. If you provide <code>["ALL"]</code>, all facial attributes are returned but the operation will take longer to complete.</p> <p>If you provide both, <code>["ALL", "DEFAULT"]</code>, the service uses a logical AND operator to determine which attributes to return (in this case, all attributes). </p>'
  DetectLabelsResponse:
    type: object
    example:
      Labels:
        - Confidence: 99.25072479248047
          Name: People
        - Confidence: 99.25074005126953
          Name: Person
    properties:
      Labels:
        $ref: '#/definitions/Labels'
        description: 'An array of labels for the real-world objects detected. '
      OrientationCorrection:
        $ref: '#/definitions/OrientationCorrection'
        description: '<p> The orientation of the input image (counter-clockwise direction). If your application displays the image, you can use this value to correct the orientation. If Amazon Rekognition detects that the input image was rotated (for example, by 90 degrees), it first corrects the orientation before detecting the labels. </p> <note> <p>If the input image Exif metadata populates the orientation field, Amazon Rekognition does not perform orientation correction and the value of OrientationCorrection will be null.</p> </note>'
  DetectLabelsRequest:
    type: object
    required:
      - Image
    example:
      Image:
        S3Object:
          Bucket: mybucket
          Name: myphoto
      MaxLabels: 123
      MinConfidence: 70
    properties:
      Image:
        $ref: '#/definitions/Image'
        description: 'The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. '
      MaxLabels:
        $ref: '#/definitions/UInteger'
        description: 'Maximum number of labels you want the service to return in the response. The service returns the specified number of highest confidence labels. '
      MinConfidence:
        $ref: '#/definitions/Percent'
        description: '<p>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn''t return any labels with confidence lower than this specified value.</p> <p>If <code>MinConfidence</code> is not specified, the operation returns labels with a confidence values greater than or equal to 50 percent.</p>'
  DetectModerationLabelsResponse:
    type: object
    properties:
      ModerationLabels:
        $ref: '#/definitions/ModerationLabels'
        description: 'Array of detected Moderation labels and the time, in millseconds from the start of the video, they were detected.'
  DetectModerationLabelsRequest:
    type: object
    required:
      - Image
    properties:
      Image:
        $ref: '#/definitions/Image'
        description: 'The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. '
      MinConfidence:
        $ref: '#/definitions/Percent'
        description: '<p>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn''t return any labels with a confidence level lower than this specified value.</p> <p>If you don''t specify <code>MinConfidence</code>, the operation returns labels with confidence values greater than or equal to 50 percent.</p>'
  DetectTextResponse:
    type: object
    properties:
      TextDetections:
        $ref: '#/definitions/TextDetectionList'
        description: An array of text that was detected in the input image.
  DetectTextRequest:
    type: object
    required:
      - Image
    properties:
      Image:
        $ref: '#/definitions/Image'
        description: 'The input image as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Rekognition operations, you can''t pass image bytes. '
  GetCelebrityInfoResponse:
    type: object
    properties:
      Urls:
        $ref: '#/definitions/Urls'
        description: 'An array of URLs pointing to additional celebrity information. '
      Name:
        $ref: '#/definitions/String'
        description: The name of the celebrity.
  GetCelebrityInfoRequest:
    type: object
    required:
      - Id
    properties:
      Id:
        $ref: '#/definitions/RekognitionUniqueId'
        description: 'The ID for the celebrity. You get the celebrity ID from a call to the operation, which recognizes celebrities in an image. '
  GetCelebrityRecognitionResponse:
    type: object
    properties:
      JobStatus:
        $ref: '#/definitions/VideoJobStatus'
        description: The current status of the celebrity recognition job.
      StatusMessage:
        $ref: '#/definitions/StatusMessage'
        description: 'If the job fails, <code>StatusMessage</code> provides a descriptive error message.'
      VideoMetadata:
        $ref: '#/definitions/VideoMetadata'
        description: Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in every page of paginated responses from a Amazon Rekognition Video operation.
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of celebrities.'
      Celebrities:
        $ref: '#/definitions/CelebrityRecognitions'
        description: Array of celebrities recognized in the video.
  GetCelebrityRecognitionRequest:
    type: object
    required:
      - JobId
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: Job identifier for the required celebrity recognition analysis. You can get the job identifer from a call to <code>StartCelebrityRecognition</code>.
      MaxResults:
        $ref: '#/definitions/MaxResults'
        description: 'Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.'
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the previous response was incomplete (because there is more recognized celebrities to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of celebrities. '
      SortBy:
        $ref: '#/definitions/CelebrityRecognitionSortBy'
        description: 'Sort to use for celebrities returned in <code>Celebrities</code> field. Specify <code>ID</code> to sort by the celebrity identifier, specify <code>TIMESTAMP</code> to sort by the time the celebrity was recognized.'
  InvalidPaginationTokenException: {}
  GetContentModerationResponse:
    type: object
    properties:
      JobStatus:
        $ref: '#/definitions/VideoJobStatus'
        description: The current status of the content moderation job.
      StatusMessage:
        $ref: '#/definitions/StatusMessage'
        description: 'If the job fails, <code>StatusMessage</code> provides a descriptive error message.'
      VideoMetadata:
        $ref: '#/definitions/VideoMetadata'
        description: 'Information about a video that Amazon Rekognition analyzed. <code>Videometadata</code> is returned in every page of paginated responses from <code>GetContentModeration</code>. '
      ModerationLabels:
        $ref: '#/definitions/ContentModerationDetections'
        description: The detected moderation labels and the time(s) they were detected.
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of moderation labels. '
  GetContentModerationRequest:
    type: object
    required:
      - JobId
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: The identifier for the content moderation job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetContentModeration</code>.
      MaxResults:
        $ref: '#/definitions/MaxResults'
        description: 'Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.'
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of content moderation labels.'
      SortBy:
        $ref: '#/definitions/ContentModerationSortBy'
        description: 'Sort to use for elements in the <code>ModerationLabelDetections</code> array. Use <code>TIMESTAMP</code> to sort array elements by the time labels are detected. Use <code>NAME</code> to alphabetically group elements for a label together. Within each label group, the array element are sorted by detection confidence. The default sort is by <code>TIMESTAMP</code>.'
  GetFaceDetectionResponse:
    type: object
    properties:
      JobStatus:
        $ref: '#/definitions/VideoJobStatus'
        description: The current status of the face detection job.
      StatusMessage:
        $ref: '#/definitions/StatusMessage'
        description: 'If the job fails, <code>StatusMessage</code> provides a descriptive error message.'
      VideoMetadata:
        $ref: '#/definitions/VideoMetadata'
        description: Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in every page of paginated responses from a Amazon Rekognition video operation.
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces. '
      Faces:
        $ref: '#/definitions/FaceDetections'
        description: 'An array of faces detected in the video. Each element contains a detected face''s details and the time, in milliseconds from the start of the video, the face was detected. '
  GetFaceDetectionRequest:
    type: object
    required:
      - JobId
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: Unique identifier for the face detection job. The <code>JobId</code> is returned from <code>StartFaceDetection</code>.
      MaxResults:
        $ref: '#/definitions/MaxResults'
        description: 'Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.'
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the previous response was incomplete (because there are more faces to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of faces.'
  GetFaceSearchResponse:
    type: object
    properties:
      JobStatus:
        $ref: '#/definitions/VideoJobStatus'
        description: The current status of the face search job.
      StatusMessage:
        $ref: '#/definitions/StatusMessage'
        description: 'If the job fails, <code>StatusMessage</code> provides a descriptive error message.'
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of search results. '
      VideoMetadata:
        $ref: '#/definitions/VideoMetadata'
        description: 'Information about a video that Amazon Rekognition analyzed. <code>Videometadata</code> is returned in every page of paginated responses from a Amazon Rekognition Video operation. '
      Persons:
        $ref: '#/definitions/PersonMatches'
        description: 'An array of persons, , in the video whose face(s) match the face(s) in an Amazon Rekognition collection. It also includes time information for when persons are matched in the video. You specify the input collection in an initial call to <code>StartFaceSearch</code>. Each <code>Persons</code> element includes a time the person was matched, face match details (<code>FaceMatches</code>) for matching faces in the collection, and person information (<code>Person</code>) for the matched person. '
  GetFaceSearchRequest:
    type: object
    required:
      - JobId
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: The job identifer for the search request. You get the job identifier from an initial call to <code>StartFaceSearch</code>.
      MaxResults:
        $ref: '#/definitions/MaxResults'
        description: 'Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.'
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the previous response was incomplete (because there is more search results to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of search results. '
      SortBy:
        $ref: '#/definitions/FaceSearchSortBy'
        description: 'Sort to use for grouping faces in the response. Use <code>TIMESTAMP</code> to group faces by the time that they are recognized. Use <code>INDEX</code> to sort by recognized faces. '
  GetLabelDetectionResponse:
    type: object
    properties:
      JobStatus:
        $ref: '#/definitions/VideoJobStatus'
        description: The current status of the label detection job.
      StatusMessage:
        $ref: '#/definitions/StatusMessage'
        description: 'If the job fails, <code>StatusMessage</code> provides a descriptive error message.'
      VideoMetadata:
        $ref: '#/definitions/VideoMetadata'
        description: Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in every page of paginated responses from a Amazon Rekognition video operation.
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of labels.'
      Labels:
        $ref: '#/definitions/LabelDetections'
        description: 'An array of labels detected in the video. Each element contains the detected label and the time, in milliseconds from the start of the video, that the label was detected. '
  GetLabelDetectionRequest:
    type: object
    required:
      - JobId
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: Job identifier for the label detection operation for which you want results returned. You get the job identifer from an initial call to <code>StartlabelDetection</code>.
      MaxResults:
        $ref: '#/definitions/MaxResults'
        description: 'Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.'
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the previous response was incomplete (because there are more labels to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of labels. '
      SortBy:
        $ref: '#/definitions/LabelDetectionSortBy'
        description: 'Sort to use for elements in the <code>Labels</code> array. Use <code>TIMESTAMP</code> to sort array elements by the time labels are detected. Use <code>NAME</code> to alphabetically group elements for a label together. Within each label group, the array element are sorted by detection confidence. The default sort is by <code>TIMESTAMP</code>.'
  GetPersonTrackingResponse:
    type: object
    properties:
      JobStatus:
        $ref: '#/definitions/VideoJobStatus'
        description: The current status of the person tracking job.
      StatusMessage:
        $ref: '#/definitions/StatusMessage'
        description: 'If the job fails, <code>StatusMessage</code> provides a descriptive error message.'
      VideoMetadata:
        $ref: '#/definitions/VideoMetadata'
        description: Information about a video that Amazon Rekognition Video analyzed. <code>Videometadata</code> is returned in every page of paginated responses from a Amazon Rekognition Video operation.
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of persons. '
      Persons:
        $ref: '#/definitions/PersonDetections'
        description: 'An array of the persons detected in the video and the times they are tracked throughout the video. An array element will exist for each time the person is tracked. '
  GetPersonTrackingRequest:
    type: object
    required:
      - JobId
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: 'The identifier for a job that tracks persons in a video. You get the <code>JobId</code> from a call to <code>StartPersonTracking</code>. '
      MaxResults:
        $ref: '#/definitions/MaxResults'
        description: 'Maximum number of results to return per paginated call. The largest value you can specify is 1000. If you specify a value greater than 1000, a maximum of 1000 results is returned. The default value is 1000.'
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the previous response was incomplete (because there are more persons to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of persons. '
      SortBy:
        $ref: '#/definitions/PersonTrackingSortBy'
        description: 'Sort to use for elements in the <code>Persons</code> array. Use <code>TIMESTAMP</code> to sort array elements by the time persons are detected. Use <code>INDEX</code> to sort by the tracked persons. If you sort by <code>INDEX</code>, the array elements for each person are sorted by detection confidence. The default sort is by <code>TIMESTAMP</code>.'
  IndexFacesResponse:
    type: object
    example:
      FaceRecords:
        - Face:
            BoundingBox:
              Height: 0.33481481671333313
              Left: 0.31888890266418457
              Top: 0.4933333396911621
              Width: 0.25
            Confidence: 99.9991226196289
            FaceId: ff43d742-0c13-5d16-a3e8-03d3f58e980b
            ImageId: 465f4e93-763e-51d0-b030-b9667a2d94b1
          FaceDetail:
            BoundingBox:
              Height: 0.33481481671333313
              Left: 0.31888890266418457
              Top: 0.4933333396911621
              Width: 0.25
            Confidence: 99.9991226196289
            Landmarks:
              - Type: eyeLeft
                X: 0.3976764678955078
                'Y': 0.6248345971107483
              - Type: eyeRight
                X: 0.4810936450958252
                'Y': 0.6317117214202881
              - Type: noseLeft
                X: 0.41986238956451416
                'Y': 0.7111940383911133
              - Type: mouthDown
                X: 0.40525302290916443
                'Y': 0.7497701048851013
              - Type: mouthUp
                X: 0.4753248989582062
                'Y': 0.7558549642562866
            Pose:
              Pitch: -9.713645935058594
              Roll: 4.707281112670898
              Yaw: -24.438663482666016
            Quality:
              Brightness: 29.23358917236328
              Sharpness: 80
        - Face:
            BoundingBox:
              Height: 0.32592591643333435
              Left: 0.5144444704055786
              Top: 0.15111111104488373
              Width: 0.24444444477558136
            Confidence: 99.99950408935547
            FaceId: 8be04dba-4e58-520d-850e-9eae4af70eb2
            ImageId: 465f4e93-763e-51d0-b030-b9667a2d94b1
          FaceDetail:
            BoundingBox:
              Height: 0.32592591643333435
              Left: 0.5144444704055786
              Top: 0.15111111104488373
              Width: 0.24444444477558136
            Confidence: 99.99950408935547
            Landmarks:
              - Type: eyeLeft
                X: 0.6006892323493958
                'Y': 0.290842205286026
              - Type: eyeRight
                X: 0.6808141469955444
                'Y': 0.29609042406082153
              - Type: noseLeft
                X: 0.6395332217216492
                'Y': 0.3522595763206482
              - Type: mouthDown
                X: 0.5892083048820496
                'Y': 0.38689887523651123
              - Type: mouthUp
                X: 0.674560010433197
                'Y': 0.394125759601593
            Pose:
              Pitch: -4.683138370513916
              Roll: 2.1029529571533203
              Yaw: 6.716655254364014
            Quality:
              Brightness: 34.951698303222656
              Sharpness: 160
      OrientationCorrection: ROTATE_0
    properties:
      FaceRecords:
        $ref: '#/definitions/FaceRecordList'
        description: 'An array of faces detected and added to the collection. For more information, see Searching Faces in a Collection in the Amazon Rekognition Developer Guide. '
      OrientationCorrection:
        $ref: '#/definitions/OrientationCorrection'
        description: '<p>The orientation of the input image (counterclockwise direction). If your application displays the image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>FaceRecords</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the input image is in jpeg format, it might contain exchangeable image (Exif) metadata. If so, and the Exif metadata populates the orientation field, the value of <code>OrientationCorrection</code> is null and the bounding box coordinates in <code>FaceRecords</code> represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don''t contain Exif metadata.</p> </note>'
      FaceModelVersion:
        $ref: '#/definitions/String'
        description: Version number of the face detection model associated with the input collection (<code>CollectionId</code>).
      UnindexedFaces:
        $ref: '#/definitions/UnindexedFaces'
        description: 'An array of faces that detected in the image but not indexed either because the quality filter deemed them to be of low-quality or the <code>MaxFaces</code> request parameter filtered them out. To use the quality filter, you specify the <code>QualityFilter</code> request parameter.'
  IndexFacesRequest:
    type: object
    required:
      - CollectionId
      - Image
    example:
      CollectionId: myphotos
      DetectionAttributes: []
      ExternalImageId: myphotoid
      Image:
        S3Object:
          Bucket: mybucket
          Name: myphoto
    properties:
      CollectionId:
        $ref: '#/definitions/CollectionId'
        description: The ID of an existing collection to which you want to add the faces that are detected in the input images.
      Image:
        $ref: '#/definitions/Image'
        description: 'The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. '
      ExternalImageId:
        $ref: '#/definitions/ExternalImageId'
        description: ID you want to assign to all the faces detected in the image.
      DetectionAttributes:
        $ref: '#/definitions/Attributes'
        description: '<p>An array of facial attributes that you want to be returned. This can be the default list of attributes or all attributes. If you don''t specify a value for <code>Attributes</code> or if you specify <code>["DEFAULT"]</code>, the API returns the following subset of facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>, <code>Quality</code> and <code>Landmarks</code>. If you provide <code>["ALL"]</code>, all facial attributes are returned but the operation will take longer to complete.</p> <p>If you provide both, <code>["ALL", "DEFAULT"]</code>, the service uses a logical AND operator to determine which attributes to return (in this case, all attributes). </p>'
      MaxFaces:
        $ref: '#/definitions/MaxFacesToIndex'
        description: '<p>The maximum number of faces to index. The value of <code>MaxFaces</code> must be greater than or equal to 1. <code>IndexFaces</code> returns no more that 100 detected faces in an image, even if you specify a larger value for <code>MaxFaces</code>.</p> <p>If <code>IndexFaces</code> detects more faces than the value of <code>MaxFaces</code>, the faces with the lowest quality are filtered out first. If there are still more faces than the value of <code>MaxFaces</code>, the faces with the smallest bounding boxes are filtered out (up to the number needed to satisfy the value of <code>MaxFaces</code>). Information about the unindexed faces is available in the <code>UnindexedFaces</code> array. </p> <p>The faces returned by <code>IndexFaces</code> are sorted, in descending order, by the largest face bounding box size, to the smallest.</p>'
      QualityFilter:
        $ref: '#/definitions/QualityFilter'
        description: 'Specifies how much filtering is done to identify faces detected with low quality. Filtered faces are not indexed. If you specify <code>AUTO</code>, filtering prioritizes the identification of faces that don’t meet the required quality bar chosen by Amazon Rekognition. The quality bar is based on a variety of common use cases. Low quality detections can arise for a number of reasons. For example, an object misidentified as a face, a face that is too blurry, or a face with a pose that is too extreme to use. If you specify <code>NONE</code>, no filtering is performed. The default value is NONE.'
  ListCollectionsResponse:
    type: object
    example:
      CollectionIds:
        - myphotos
    properties:
      CollectionIds:
        $ref: '#/definitions/CollectionIdList'
        description: An array of collection IDs.
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the result is truncated, the response provides a <code>NextToken</code> that you can use in the subsequent request to fetch the next set of collection IDs.'
      FaceModelVersions:
        $ref: '#/definitions/FaceModelVersionList'
        description: 'Version numbers of the face detection models associated with the collections in the array <code>CollectionIds</code>. For example, the value of <code>FaceModelVersions[2]</code> is the version number for the face detection model used by the collection in <code>CollectionId[2]</code>.'
  ListCollectionsRequest:
    type: object
    example: {}
    properties:
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: Pagination token from the previous response.
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: 'Maximum number of collection IDs to return. '
  ListFacesResponse:
    type: object
    example:
      Faces:
        - BoundingBox:
            Height: 0.18000000715255737
            Left: 0.5555559992790222
            Top: 0.336667001247406
            Width: 0.23999999463558197
          Confidence: 100
          FaceId: 1c62e8b5-69a7-5b7d-b3cd-db4338a8a7e7
          ImageId: 147fdf82-7a71-52cf-819b-e786c7b9746e
        - BoundingBox:
            Height: 0.16555599868297577
            Left: 0.30963000655174255
            Top: 0.7066670060157776
            Width: 0.22074100375175476
          Confidence: 100
          FaceId: 29a75abe-397b-5101-ba4f-706783b2246c
          ImageId: 147fdf82-7a71-52cf-819b-e786c7b9746e
        - BoundingBox:
            Height: 0.3234420120716095
            Left: 0.3233329951763153
            Top: 0.5
            Width: 0.24222199618816376
          Confidence: 99.99829864501953
          FaceId: 38271d79-7bc2-5efb-b752-398a8d575b85
          ImageId: d5631190-d039-54e4-b267-abd22c8647c5
        - BoundingBox:
            Height: 0.03555560111999512
            Left: 0.37388700246810913
            Top: 0.2477779984474182
            Width: 0.04747769981622696
          Confidence: 99.99210357666016
          FaceId: 3b01bef0-c883-5654-ba42-d5ad28b720b3
          ImageId: 812d9f04-86f9-54fc-9275-8d0dcbcb6784
        - BoundingBox:
            Height: 0.05333330109715462
            Left: 0.2937690019607544
            Top: 0.35666701197624207
            Width: 0.07121659815311432
          Confidence: 99.99919891357422
          FaceId: 4839a608-49d0-566c-8301-509d71b534d1
          ImageId: 812d9f04-86f9-54fc-9275-8d0dcbcb6784
        - BoundingBox:
            Height: 0.3249259889125824
            Left: 0.5155559778213501
            Top: 0.1513350009918213
            Width: 0.24333299696445465
          Confidence: 99.99949645996094
          FaceId: 70008e50-75e4-55d0-8e80-363fb73b3a14
          ImageId: d5631190-d039-54e4-b267-abd22c8647c5
        - BoundingBox:
            Height: 0.03777780011296272
            Left: 0.7002969980239868
            Top: 0.18777799606323242
            Width: 0.05044509842991829
          Confidence: 99.92639923095703
          FaceId: 7f5f88ed-d684-5a88-b0df-01e4a521552b
          ImageId: 812d9f04-86f9-54fc-9275-8d0dcbcb6784
        - BoundingBox:
            Height: 0.05555560067296028
            Left: 0.13946600258350372
            Top: 0.46333301067352295
            Width: 0.07270029932260513
          Confidence: 99.99469757080078
          FaceId: 895b4e2c-81de-5902-a4bd-d1792bda00b2
          ImageId: 812d9f04-86f9-54fc-9275-8d0dcbcb6784
        - BoundingBox:
            Height: 0.3259260058403015
            Left: 0.5144439935684204
            Top: 0.15111100673675537
            Width: 0.24444399774074554
          Confidence: 99.99949645996094
          FaceId: 8be04dba-4e58-520d-850e-9eae4af70eb2
          ImageId: 465f4e93-763e-51d0-b030-b9667a2d94b1
        - BoundingBox:
            Height: 0.18888899683952332
            Left: 0.3783380091190338
            Top: 0.2355560064315796
            Width: 0.25222599506378174
          Confidence: 99.9999008178711
          FaceId: 908544ad-edc3-59df-8faf-6a87cc256cf5
          ImageId: 3c731605-d772-541a-a5e7-0375dbc68a07
        - BoundingBox:
            Height: 0.33481499552726746
            Left: 0.31888899207115173
            Top: 0.49333301186561584
            Width: 0.25
          Confidence: 99.99909973144531
          FaceId: ff43d742-0c13-5d16-a3e8-03d3f58e980b
          ImageId: 465f4e93-763e-51d0-b030-b9667a2d94b1
    properties:
      Faces:
        $ref: '#/definitions/FaceList'
        description: 'An array of <code>Face</code> objects. '
      NextToken:
        $ref: '#/definitions/String'
        description: 'If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces.'
      FaceModelVersion:
        $ref: '#/definitions/String'
        description: Version number of the face detection model associated with the input collection (<code>CollectionId</code>).
  ListFacesRequest:
    type: object
    required:
      - CollectionId
    example:
      CollectionId: myphotos
      MaxResults: 20
    properties:
      CollectionId:
        $ref: '#/definitions/CollectionId'
        description: ID of the collection from which to list the faces.
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of faces.'
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: Maximum number of faces to return.
  ListStreamProcessorsResponse:
    type: object
    properties:
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the response is truncated, Amazon Rekognition Video returns this token that you can use in the subsequent request to retrieve the next set of stream processors. '
      StreamProcessors:
        $ref: '#/definitions/StreamProcessorList'
        description: List of stream processors that you have created.
  ListStreamProcessorsRequest:
    type: object
    properties:
      NextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'If the previous response was incomplete (because there are more stream processors to retrieve), Amazon Rekognition Video returns a pagination token in the response. You can use this pagination token to retrieve the next set of stream processors. '
      MaxResults:
        $ref: '#/definitions/MaxResults'
        description: 'Maximum number of stream processors you want Amazon Rekognition Video to return in the response. The default is 1000. '
  RecognizeCelebritiesResponse:
    type: object
    properties:
      CelebrityFaces:
        $ref: '#/definitions/CelebrityList'
        description: Details about each celebrity found in the image. Amazon Rekognition can detect a maximum of 15 celebrities in an image.
      UnrecognizedFaces:
        $ref: '#/definitions/ComparedFaceList'
        description: Details about each unrecognized face in the image.
      OrientationCorrection:
        $ref: '#/definitions/OrientationCorrection'
        description: '<p>The orientation of the input image (counterclockwise direction). If your application displays the image, you can use this value to correct the orientation. The bounding box coordinates returned in <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code> represent face locations before the image orientation is corrected. </p> <note> <p>If the input image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image''s orientation. If so, and the Exif metadata for the input image populates the orientation field, the value of <code>OrientationCorrection</code> is null and the <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code> bounding box coordinates represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don''t contain Exif metadata. </p> </note>'
  RecognizeCelebritiesRequest:
    type: object
    required:
      - Image
    properties:
      Image:
        $ref: '#/definitions/Image'
        description: 'The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. '
  SearchFacesResponse:
    type: object
    example:
      FaceMatches:
        - Face:
            BoundingBox:
              Height: 0.3259260058403015
              Left: 0.5144439935684204
              Top: 0.15111100673675537
              Width: 0.24444399774074554
            Confidence: 99.99949645996094
            FaceId: 8be04dba-4e58-520d-850e-9eae4af70eb2
            ImageId: 465f4e93-763e-51d0-b030-b9667a2d94b1
          Similarity: 99.97222137451172
        - Face:
            BoundingBox:
              Height: 0.16555599868297577
              Left: 0.30963000655174255
              Top: 0.7066670060157776
              Width: 0.22074100375175476
            Confidence: 100
            FaceId: 29a75abe-397b-5101-ba4f-706783b2246c
            ImageId: 147fdf82-7a71-52cf-819b-e786c7b9746e
          Similarity: 97.04154968261719
        - Face:
            BoundingBox:
              Height: 0.18888899683952332
              Left: 0.3783380091190338
              Top: 0.2355560064315796
              Width: 0.25222599506378174
            Confidence: 99.9999008178711
            FaceId: 908544ad-edc3-59df-8faf-6a87cc256cf5
            ImageId: 3c731605-d772-541a-a5e7-0375dbc68a07
          Similarity: 95.94520568847656
      SearchedFaceId: 70008e50-75e4-55d0-8e80-363fb73b3a14
    properties:
      SearchedFaceId:
        $ref: '#/definitions/FaceId'
        description: ID of the face that was searched for matches in a collection.
      FaceMatches:
        $ref: '#/definitions/FaceMatchList'
        description: 'An array of faces that matched the input face, along with the confidence in the match.'
      FaceModelVersion:
        $ref: '#/definitions/String'
        description: Version number of the face detection model associated with the input collection (<code>CollectionId</code>).
  SearchFacesRequest:
    type: object
    required:
      - CollectionId
      - FaceId
    example:
      CollectionId: myphotos
      FaceId: 70008e50-75e4-55d0-8e80-363fb73b3a14
      FaceMatchThreshold: 90
      MaxFaces: 10
    properties:
      CollectionId:
        $ref: '#/definitions/CollectionId'
        description: ID of the collection the face belongs to.
      FaceId:
        $ref: '#/definitions/FaceId'
        description: ID of a face to find matches for in the collection.
      MaxFaces:
        $ref: '#/definitions/MaxFaces'
        description: Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.
      FaceMatchThreshold:
        $ref: '#/definitions/Percent'
        description: 'Optional value specifying the minimum confidence in the face match to return. For example, don''t return any matches where confidence in matches is less than 70%.'
  SearchFacesByImageResponse:
    type: object
    example:
      FaceMatches:
        - Face:
            BoundingBox:
              Height: 0.3234420120716095
              Left: 0.3233329951763153
              Top: 0.5
              Width: 0.24222199618816376
            Confidence: 99.99829864501953
            FaceId: 38271d79-7bc2-5efb-b752-398a8d575b85
            ImageId: d5631190-d039-54e4-b267-abd22c8647c5
          Similarity: 99.97036743164062
      SearchedFaceBoundingBox:
        Height: 0.33481481671333313
        Left: 0.31888890266418457
        Top: 0.4933333396911621
        Width: 0.25
      SearchedFaceConfidence: 99.9991226196289
    properties:
      SearchedFaceBoundingBox:
        $ref: '#/definitions/BoundingBox'
        description: The bounding box around the face in the input image that Amazon Rekognition used for the search.
      SearchedFaceConfidence:
        $ref: '#/definitions/Percent'
        description: 'The level of confidence that the <code>searchedFaceBoundingBox</code>, contains a face.'
      FaceMatches:
        $ref: '#/definitions/FaceMatchList'
        description: 'An array of faces that match the input face, along with the confidence in the match.'
      FaceModelVersion:
        $ref: '#/definitions/String'
        description: Version number of the face detection model associated with the input collection (<code>CollectionId</code>).
  SearchFacesByImageRequest:
    type: object
    required:
      - CollectionId
      - Image
    example:
      CollectionId: myphotos
      FaceMatchThreshold: 95
      Image:
        S3Object:
          Bucket: mybucket
          Name: myphoto
      MaxFaces: 5
    properties:
      CollectionId:
        $ref: '#/definitions/CollectionId'
        description: ID of the collection to search.
      Image:
        $ref: '#/definitions/Image'
        description: 'The input image as base64-encoded bytes or an S3 object. If you use the AWS CLI to call Amazon Rekognition operations, passing base64-encoded image bytes is not supported. '
      MaxFaces:
        $ref: '#/definitions/MaxFaces'
        description: Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.
      FaceMatchThreshold:
        $ref: '#/definitions/Percent'
        description: '(Optional) Specifies the minimum confidence in the face match to return. For example, don''t return any matches where confidence in matches is less than 70%.'
  StartCelebrityRecognitionResponse:
    type: object
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: The identifier for the celebrity recognition analysis job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetCelebrityRecognition</code>.
  StartCelebrityRecognitionRequest:
    type: object
    required:
      - Video
    properties:
      Video:
        $ref: '#/definitions/Video'
        description: The video in which you want to recognize celebrities. The video must be stored in an Amazon S3 bucket.
      ClientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'Idempotent token used to identify the start request. If you use the same token with multiple <code>StartCelebrityRecognition</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. '
      NotificationChannel:
        $ref: '#/definitions/NotificationChannel'
        description: The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the celebrity recognition analysis to.
      JobTag:
        $ref: '#/definitions/JobTag'
        description: 'Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. '
  IdempotentParameterMismatchException: {}
  VideoTooLargeException: {}
  StartContentModerationResponse:
    type: object
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: The identifier for the content moderation analysis job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetContentModeration</code>.
  StartContentModerationRequest:
    type: object
    required:
      - Video
    properties:
      Video:
        $ref: '#/definitions/Video'
        description: The video in which you want to moderate content. The video must be stored in an Amazon S3 bucket.
      MinConfidence:
        $ref: '#/definitions/Percent'
        description: Specifies the minimum confidence that Amazon Rekognition must have in order to return a moderated content label. Confidence represents how certain Amazon Rekognition is that the moderated content is correctly identified. 0 is the lowest confidence. 100 is the highest confidence. Amazon Rekognition doesn't return any moderated content labels with a confidence level lower than this specified value.
      ClientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'Idempotent token used to identify the start request. If you use the same token with multiple <code>StartContentModeration</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. '
      NotificationChannel:
        $ref: '#/definitions/NotificationChannel'
        description: The Amazon SNS topic ARN that you want Amazon Rekognition Video to publish the completion status of the content moderation analysis to.
      JobTag:
        $ref: '#/definitions/JobTag'
        description: 'Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. '
  StartFaceDetectionResponse:
    type: object
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: The identifier for the face detection job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetFaceDetection</code>.
  StartFaceDetectionRequest:
    type: object
    required:
      - Video
    properties:
      Video:
        $ref: '#/definitions/Video'
        description: The video in which you want to detect faces. The video must be stored in an Amazon S3 bucket.
      ClientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'Idempotent token used to identify the start request. If you use the same token with multiple <code>StartFaceDetection</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. '
      NotificationChannel:
        $ref: '#/definitions/NotificationChannel'
        description: The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the face detection operation.
      FaceAttributes:
        $ref: '#/definitions/FaceAttributes'
        description: '<p>The face attributes you want returned.</p> <p> <code>DEFAULT</code> - The following subset of facial attributes are returned: BoundingBox, Confidence, Pose, Quality and Landmarks. </p> <p> <code>ALL</code> - All facial attributes are returned.</p>'
      JobTag:
        $ref: '#/definitions/JobTag'
        description: 'Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. '
  StartFaceSearchResponse:
    type: object
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: 'The identifier for the search job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetFaceSearch</code>. '
  StartFaceSearchRequest:
    type: object
    required:
      - Video
      - CollectionId
    properties:
      Video:
        $ref: '#/definitions/Video'
        description: 'The video you want to search. The video must be stored in an Amazon S3 bucket. '
      ClientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'Idempotent token used to identify the start request. If you use the same token with multiple <code>StartFaceSearch</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. '
      FaceMatchThreshold:
        $ref: '#/definitions/Percent'
        description: 'The minimum confidence in the person match to return. For example, don''t return any matches where confidence in matches is less than 70%. '
      CollectionId:
        $ref: '#/definitions/CollectionId'
        description: ID of the collection that contains the faces you want to search for.
      NotificationChannel:
        $ref: '#/definitions/NotificationChannel'
        description: 'The ARN of the Amazon SNS topic to which you want Amazon Rekognition Video to publish the completion status of the search. '
      JobTag:
        $ref: '#/definitions/JobTag'
        description: 'Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. '
  StartLabelDetectionResponse:
    type: object
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: 'The identifier for the label detection job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetLabelDetection</code>. '
  StartLabelDetectionRequest:
    type: object
    required:
      - Video
    properties:
      Video:
        $ref: '#/definitions/Video'
        description: The video in which you want to detect labels. The video must be stored in an Amazon S3 bucket.
      ClientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'Idempotent token used to identify the start request. If you use the same token with multiple <code>StartLabelDetection</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. '
      MinConfidence:
        $ref: '#/definitions/Percent'
        description: '<p>Specifies the minimum confidence that Amazon Rekognition Video must have in order to return a detected label. Confidence represents how certain Amazon Rekognition is that a label is correctly identified.0 is the lowest confidence. 100 is the highest confidence. Amazon Rekognition Video doesn''t return any labels with a confidence level lower than this specified value.</p> <p>If you don''t specify <code>MinConfidence</code>, the operation returns labels with confidence values greater than or equal to 50 percent.</p>'
      NotificationChannel:
        $ref: '#/definitions/NotificationChannel'
        description: 'The Amazon SNS topic ARN you want Amazon Rekognition Video to publish the completion status of the label detection operation to. '
      JobTag:
        $ref: '#/definitions/JobTag'
        description: 'Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. '
  StartPersonTrackingResponse:
    type: object
    properties:
      JobId:
        $ref: '#/definitions/JobId'
        description: The identifier for the person detection job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetPersonTracking</code>.
  StartPersonTrackingRequest:
    type: object
    required:
      - Video
    properties:
      Video:
        $ref: '#/definitions/Video'
        description: The video in which you want to detect people. The video must be stored in an Amazon S3 bucket.
      ClientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'Idempotent token used to identify the start request. If you use the same token with multiple <code>StartPersonTracking</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidently started more than once. '
      NotificationChannel:
        $ref: '#/definitions/NotificationChannel'
        description: The Amazon SNS topic ARN you want Amazon Rekognition Video to publish the completion status of the people detection operation to.
      JobTag:
        $ref: '#/definitions/JobTag'
        description: 'Unique identifier you specify to identify the job in the completion status published to the Amazon Simple Notification Service topic. '
  StartStreamProcessorResponse:
    type: object
    properties: {}
  StartStreamProcessorRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/StreamProcessorName'
        description: The name of the stream processor to start processing.
  StopStreamProcessorResponse:
    type: object
    properties: {}
  StopStreamProcessorRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/StreamProcessorName'
        description: The name of a stream processor created by .
  UInteger:
    type: integer
    minimum: 0
  AgeRange:
    type: object
    properties:
      Low:
        $ref: '#/definitions/UInteger'
        description: The lowest estimated age.
      High:
        $ref: '#/definitions/UInteger'
        description: The highest estimated age.
    description: '<p>Structure containing the estimated age range, in years, for a face.</p> <p>Rekognition estimates an age-range for faces detected in the input image. Estimated age ranges can overlap; a face of a 5 year old may have an estimated range of 4-6 whilst the face of a 6 year old may have an estimated range of 4-8.</p>'
  Attribute:
    type: string
    enum:
      - DEFAULT
      - ALL
  Attributes:
    type: array
    items:
      $ref: '#/definitions/Attribute'
  Boolean:
    type: boolean
  Percent:
    type: number
    format: float
    minimum: 0
    maximum: 100
  Beard:
    type: object
    properties:
      Value:
        $ref: '#/definitions/Boolean'
        description: Boolean value that indicates whether the face has beard or not.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Level of confidence in the determination.
    description: 'Indicates whether or not the face has a beard, and the confidence level in the determination.'
  Float:
    type: number
    format: float
  BoundingBox:
    type: object
    properties:
      Width:
        $ref: '#/definitions/Float'
        description: Width of the bounding box as a ratio of the overall image width.
      Height:
        $ref: '#/definitions/Float'
        description: Height of the bounding box as a ratio of the overall image height.
      Left:
        $ref: '#/definitions/Float'
        description: Left coordinate of the bounding box as a ratio of overall image width.
      Top:
        $ref: '#/definitions/Float'
        description: Top coordinate of the bounding box as a ratio of overall image height.
    description: '<p>Identifies the bounding box around the face or text. The <code>left</code> (x-coordinate) and <code>top</code> (y-coordinate) are coordinates representing the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). </p> <p>The <code>top</code> and <code>left</code> values returned are ratios of the overall image size. For example, if the input image is 700x200 pixels, and the top-left coordinate of the bounding box is 350x50 pixels, the API returns a <code>left</code> value of 0.5 (350/700) and a <code>top</code> value of 0.25 (50/200).</p> <p>The <code>width</code> and <code>height</code> values represent the dimensions of the bounding box as a ratio of the overall image dimension. For example, if the input image is 700x200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. </p> <note> <p> The bounding box coordinates can have negative values. For example, if Amazon Rekognition is able to detect a face that is at the image edge and is only partially visible, the service can return coordinates that are outside the image bounds and, depending on the image edge, you might get negative values or values greater than 1 for the <code>left</code> or <code>top</code> values. </p> </note>'
  Urls:
    type: array
    items:
      $ref: '#/definitions/Url'
  String:
    type: string
  RekognitionUniqueId:
    type: string
    pattern: '[0-9A-Za-z]*'
  ComparedFace:
    type: object
    properties:
      BoundingBox:
        $ref: '#/definitions/BoundingBox'
        description: Bounding box of the face.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Level of confidence that what the bounding box contains is a face.
      Landmarks:
        $ref: '#/definitions/Landmarks'
        description: An array of facial landmarks.
      Pose:
        $ref: '#/definitions/Pose'
        description: 'Indicates the pose of the face as determined by its pitch, roll, and yaw.'
      Quality:
        $ref: '#/definitions/ImageQuality'
        description: 'Identifies face image brightness and sharpness. '
    description: Provides face metadata for target image faces that are analysed by <code>CompareFaces</code> and <code>RecognizeCelebrities</code>.
  Celebrity:
    type: object
    properties:
      Urls:
        $ref: '#/definitions/Urls'
        description: 'An array of URLs pointing to additional information about the celebrity. If there is no additional information about the celebrity, this list is empty.'
      Name:
        $ref: '#/definitions/String'
        description: The name of the celebrity.
      Id:
        $ref: '#/definitions/RekognitionUniqueId'
        description: 'A unique identifier for the celebrity. '
      Face:
        $ref: '#/definitions/ComparedFace'
        description: 'Provides information about the celebrity''s face, such as its location on the image.'
      MatchConfidence:
        $ref: '#/definitions/Percent'
        description: 'The confidence, in percentage, that Rekognition has that the recognized face is the celebrity.'
    description: Provides information about a celebrity recognized by the operation.
  FaceDetail:
    type: object
    properties:
      BoundingBox:
        $ref: '#/definitions/BoundingBox'
        description: Bounding box of the face. Default attribute.
      AgeRange:
        $ref: '#/definitions/AgeRange'
        description: 'The estimated age range, in years, for the face. Low represents the lowest estimated age and High represents the highest estimated age.'
      Smile:
        $ref: '#/definitions/Smile'
        description: 'Indicates whether or not the face is smiling, and the confidence level in the determination.'
      Eyeglasses:
        $ref: '#/definitions/Eyeglasses'
        description: 'Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.'
      Sunglasses:
        $ref: '#/definitions/Sunglasses'
        description: 'Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.'
      Gender:
        $ref: '#/definitions/Gender'
        description: Gender of the face and the confidence level in the determination.
      Beard:
        $ref: '#/definitions/Beard'
        description: 'Indicates whether or not the face has a beard, and the confidence level in the determination.'
      Mustache:
        $ref: '#/definitions/Mustache'
        description: 'Indicates whether or not the face has a mustache, and the confidence level in the determination.'
      EyesOpen:
        $ref: '#/definitions/EyeOpen'
        description: 'Indicates whether or not the eyes on the face are open, and the confidence level in the determination.'
      MouthOpen:
        $ref: '#/definitions/MouthOpen'
        description: 'Indicates whether or not the mouth on the face is open, and the confidence level in the determination.'
      Emotions:
        $ref: '#/definitions/Emotions'
        description: 'The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY. '
      Landmarks:
        $ref: '#/definitions/Landmarks'
        description: Indicates the location of landmarks on the face. Default attribute.
      Pose:
        $ref: '#/definitions/Pose'
        description: 'Indicates the pose of the face as determined by its pitch, roll, and yaw. Default attribute.'
      Quality:
        $ref: '#/definitions/ImageQuality'
        description: Identifies image brightness and sharpness. Default attribute.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Confidence level that the bounding box contains a face (and not a different object such as a tree). Default attribute.
    description: '<p>Structure containing attributes of the face that the algorithm detected.</p> <p>A <code>FaceDetail</code> object contains either the default facial attributes or all facial attributes. The default attributes are <code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>.</p> <p> is the only Amazon Rekognition Video stored video operation that can return a <code>FaceDetail</code> object with all attributes. To specify which attributes to return, use the <code>FaceAttributes</code> input parameter for . The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations don''t have a <code>FaceAttributes</code> input parameter.</p> <ul> <li> <p>GetCelebrityRecognition</p> </li> <li> <p>GetPersonTracking</p> </li> <li> <p>GetFaceSearch</p> </li> </ul> <p>The Amazon Rekognition Image and operations can return all facial attributes. To specify which attributes to return, use the <code>Attributes</code> input parameter for <code>DetectFaces</code>. For <code>IndexFaces</code>, use the <code>DetectAttributes</code> input parameter.</p>'
  CelebrityDetail:
    type: object
    properties:
      Urls:
        $ref: '#/definitions/Urls'
        description: 'An array of URLs pointing to additional celebrity information. '
      Name:
        $ref: '#/definitions/String'
        description: The name of the celebrity.
      Id:
        $ref: '#/definitions/RekognitionUniqueId'
        description: 'The unique identifier for the celebrity. '
      Confidence:
        $ref: '#/definitions/Percent'
        description: 'The confidence, in percentage, that Amazon Rekognition has that the recognized face is the celebrity. '
      BoundingBox:
        $ref: '#/definitions/BoundingBox'
        description: Bounding box around the body of a celebrity.
      Face:
        $ref: '#/definitions/FaceDetail'
        description: Face details for the recognized celebrity.
    description: Information about a recognized celebrity.
  CelebrityList:
    type: array
    items:
      $ref: '#/definitions/Celebrity'
  Timestamp:
    type: integer
  CelebrityRecognition:
    type: object
    properties:
      Timestamp:
        $ref: '#/definitions/Timestamp'
        description: 'The time, in milliseconds from the start of the video, that the celebrity was recognized.'
      Celebrity:
        $ref: '#/definitions/CelebrityDetail'
        description: Information about a recognized celebrity.
    description: 'Information about a detected celebrity and the time the celebrity was detected in a stored video. For more information, see GetCelebrityRecognition in the Amazon Rekognition Developer Guide.'
  CelebrityRecognitionSortBy:
    type: string
    enum:
      - ID
      - TIMESTAMP
  CelebrityRecognitions:
    type: array
    items:
      $ref: '#/definitions/CelebrityRecognition'
  ClientRequestToken:
    type: string
    pattern: '^[a-zA-Z0-9-_]+$'
    minLength: 1
    maxLength: 64
  CollectionId:
    type: string
    pattern: '[a-zA-Z0-9_.\-]+'
    minLength: 1
    maxLength: 255
  CollectionIdList:
    type: array
    items:
      $ref: '#/definitions/CollectionId'
  CompareFacesMatch:
    type: object
    properties:
      Similarity:
        $ref: '#/definitions/Percent'
        description: Level of confidence that the faces match.
      Face:
        $ref: '#/definitions/ComparedFace'
        description: Provides face metadata (bounding box and confidence that the bounding box actually contains a face).
    description: Provides information about a face in a target image that matches the source image face analysed by <code>CompareFaces</code>. The <code>Face</code> property contains the bounding box of the face in the target image. The <code>Similarity</code> property is the confidence that the source image face matches the face in the bounding box.
  CompareFacesMatchList:
    type: array
    items:
      $ref: '#/definitions/CompareFacesMatch'
  Image:
    type: object
    properties:
      Bytes:
        $ref: '#/definitions/ImageBlob'
        description: Blob of image bytes up to 5 MBs.
      S3Object:
        $ref: '#/definitions/S3Object'
        description: Identifies an S3 object as the image source.
    description: '<p>Provides the input image either as bytes or an S3 object.</p> <p>You pass image bytes to a Rekognition API operation by using the <code>Bytes</code> property. For example, you would use the <code>Bytes</code> property to pass an image loaded from a local file system. Image bytes passed by using the <code>Bytes</code> property must be base64-encoded. Your code may not need to encode image bytes if you are using an AWS SDK to call Rekognition API operations. </p> <p>For more information, see Analyzing an Image Loaded from a Local File System in the Amazon Rekognition Developer Guide.</p> <p> You pass images stored in an S3 bucket to a Rekognition API operation by using the <code>S3Object</code> property. Images stored in an S3 bucket do not need to be base64-encoded.</p> <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> <p>If you use the Amazon CLI to call Amazon Rekognition operations, passing image bytes using the Bytes property is not supported. You must first upload the image to an Amazon S3 bucket and then call the operation using the S3Object property.</p> <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see Resource Based Policies in the Amazon Rekognition Developer Guide. </p>'
  ComparedSourceImageFace:
    type: object
    properties:
      BoundingBox:
        $ref: '#/definitions/BoundingBox'
        description: Bounding box of the face.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Confidence level that the selected bounding box contains a face.
    description: 'Type that describes the face Amazon Rekognition chose to compare with the faces in the target. This contains a bounding box for the selected face and confidence level that the bounding box contains a face. Note that Amazon Rekognition selects the largest face in the source image for this comparison. '
  CompareFacesUnmatchList:
    type: array
    items:
      $ref: '#/definitions/ComparedFace'
  OrientationCorrection:
    type: string
    enum:
      - ROTATE_0
      - ROTATE_90
      - ROTATE_180
      - ROTATE_270
  Landmarks:
    type: array
    items:
      $ref: '#/definitions/Landmark'
  Pose:
    type: object
    properties:
      Roll:
        $ref: '#/definitions/Degree'
        description: Value representing the face rotation on the roll axis.
      Yaw:
        $ref: '#/definitions/Degree'
        description: Value representing the face rotation on the yaw axis.
      Pitch:
        $ref: '#/definitions/Degree'
        description: Value representing the face rotation on the pitch axis.
    description: 'Indicates the pose of the face as determined by its pitch, roll, and yaw.'
  ImageQuality:
    type: object
    properties:
      Brightness:
        $ref: '#/definitions/Float'
        description: Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.
      Sharpness:
        $ref: '#/definitions/Float'
        description: Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.
    description: 'Identifies face image brightness and sharpness. '
  ComparedFaceList:
    type: array
    items:
      $ref: '#/definitions/ComparedFace'
  ModerationLabel:
    type: object
    properties:
      Confidence:
        $ref: '#/definitions/Percent'
        description: '<p>Specifies the confidence that Amazon Rekognition has that the label has been correctly identified.</p> <p>If you don''t specify the <code>MinConfidence</code> parameter in the call to <code>DetectModerationLabels</code>, the operation returns labels with a confidence value greater than or equal to 50 percent.</p>'
      Name:
        $ref: '#/definitions/String'
        description: The label name for the type of content detected in the image.
      ParentName:
        $ref: '#/definitions/String'
        description: The name for the parent label. Labels at the top-level of the hierarchy have the parent label <code>""</code>.
    description: 'Provides information about a single type of moderated content found in an image or video. Each type of moderated content has a label within a hierarchical taxonomy. For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.'
  ContentModerationDetection:
    type: object
    properties:
      Timestamp:
        $ref: '#/definitions/Timestamp'
        description: 'Time, in milliseconds from the beginning of the video, that the moderation label was detected.'
      ModerationLabel:
        $ref: '#/definitions/ModerationLabel'
        description: The moderation label detected by in the stored video.
    description: Information about a moderation label detection in a stored video.
  ContentModerationDetections:
    type: array
    items:
      $ref: '#/definitions/ContentModerationDetection'
  ContentModerationSortBy:
    type: string
    enum:
      - NAME
      - TIMESTAMP
  StreamProcessorInput:
    type: object
    properties:
      KinesisVideoStream:
        $ref: '#/definitions/KinesisVideoStream'
        description: The Kinesis video stream input stream for the source streaming video.
    description: 'Information about the source streaming video. '
  StreamProcessorOutput:
    type: object
    properties:
      KinesisDataStream:
        $ref: '#/definitions/KinesisDataStream'
        description: The Amazon Kinesis Data Streams stream to which the Amazon Rekognition stream processor streams the analysis results.
    description: 'Information about the Amazon Kinesis Data Streams stream to which a Amazon Rekognition Video stream processor streams the results of a video analysis. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide.'
  StreamProcessorName:
    type: string
    pattern: '[a-zA-Z0-9_.\-]+'
    minLength: 1
    maxLength: 128
  StreamProcessorSettings:
    type: object
    properties:
      FaceSearch:
        $ref: '#/definitions/FaceSearchSettings'
        description: 'Face search settings to use on a streaming video. '
    description: Input parameters used to recognize faces in a streaming video analyzed by a Amazon Rekognition stream processor.
  RoleArn:
    type: string
    pattern: 'arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+'
  StreamProcessorArn:
    type: string
    pattern: '(^arn:[a-z\d-]+:rekognition:[a-z\d-]+:\d{12}:streamprocessor\/.+$)'
  DateTime:
    type: string
    format: date-time
  Degree:
    type: number
    format: float
    minimum: -180
    maximum: 180
  FaceIdList:
    type: array
    items:
      $ref: '#/definitions/FaceId'
    minItems: 1
    maxItems: 4096
  ULong:
    type: integer
    minimum: 0
  StreamProcessorStatus:
    type: string
    enum:
      - STOPPED
      - STARTING
      - RUNNING
      - FAILED
      - STOPPING
  FaceDetailList:
    type: array
    items:
      $ref: '#/definitions/FaceDetail'
  Labels:
    type: array
    items:
      $ref: '#/definitions/Label'
  ModerationLabels:
    type: array
    items:
      $ref: '#/definitions/ModerationLabel'
  TextDetectionList:
    type: array
    items:
      $ref: '#/definitions/TextDetection'
  EmotionName:
    type: string
    enum:
      - HAPPY
      - SAD
      - ANGRY
      - CONFUSED
      - DISGUSTED
      - SURPRISED
      - CALM
      - UNKNOWN
  Emotion:
    type: object
    properties:
      Type:
        $ref: '#/definitions/EmotionName'
        description: Type of emotion detected.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Level of confidence in the determination.
    description: 'The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY.'
  Emotions:
    type: array
    items:
      $ref: '#/definitions/Emotion'
  ExternalImageId:
    type: string
    pattern: '[a-zA-Z0-9_.\-:]+'
    minLength: 1
    maxLength: 255
  EyeOpen:
    type: object
    properties:
      Value:
        $ref: '#/definitions/Boolean'
        description: Boolean value that indicates whether the eyes on the face are open.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Level of confidence in the determination.
    description: 'Indicates whether or not the eyes on the face are open, and the confidence level in the determination.'
  Eyeglasses:
    type: object
    properties:
      Value:
        $ref: '#/definitions/Boolean'
        description: Boolean value that indicates whether the face is wearing eye glasses or not.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Level of confidence in the determination.
    description: 'Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.'
  FaceId:
    type: string
    pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
  ImageId:
    type: string
    pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
  Face:
    type: object
    properties:
      FaceId:
        $ref: '#/definitions/FaceId'
        description: Unique identifier that Amazon Rekognition assigns to the face.
      BoundingBox:
        $ref: '#/definitions/BoundingBox'
        description: Bounding box of the face.
      ImageId:
        $ref: '#/definitions/ImageId'
        description: Unique identifier that Amazon Rekognition assigns to the input image.
      ExternalImageId:
        $ref: '#/definitions/ExternalImageId'
        description: Identifier that you assign to all the faces in the input image.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Confidence level that the bounding box contains a face (and not a different object such as a tree).
    description: 'Describes the face properties such as the bounding box, face ID, image ID of the input image, and external image ID that you assigned. '
  FaceAttributes:
    type: string
    enum:
      - DEFAULT
      - ALL
  Smile:
    type: object
    properties:
      Value:
        $ref: '#/definitions/Boolean'
        description: Boolean value that indicates whether the face is smiling or not.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Level of confidence in the determination.
    description: 'Indicates whether or not the face is smiling, and the confidence level in the determination.'
  Sunglasses:
    type: object
    properties:
      Value:
        $ref: '#/definitions/Boolean'
        description: Boolean value that indicates whether the face is wearing sunglasses or not.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Level of confidence in the determination.
    description: 'Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.'
  Gender:
    type: object
    properties:
      Value:
        $ref: '#/definitions/GenderType'
        description: Gender of the face.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Level of confidence in the determination.
    description: Gender of the face and the confidence level in the determination.
  Mustache:
    type: object
    properties:
      Value:
        $ref: '#/definitions/Boolean'
        description: Boolean value that indicates whether the face has mustache or not.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Level of confidence in the determination.
    description: 'Indicates whether or not the face has a mustache, and the confidence level in the determination.'
  MouthOpen:
    type: object
    properties:
      Value:
        $ref: '#/definitions/Boolean'
        description: Boolean value that indicates whether the mouth on the face is open or not.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Level of confidence in the determination.
    description: 'Indicates whether or not the mouth on the face is open, and the confidence level in the determination.'
  FaceDetection:
    type: object
    properties:
      Timestamp:
        $ref: '#/definitions/Timestamp'
        description: 'Time, in milliseconds from the start of the video, that the face was detected.'
      Face:
        $ref: '#/definitions/FaceDetail'
        description: The face properties for the detected face.
    description: 'Information about a face detected in a video analysis request and the time the face was detected in the video. '
  FaceDetections:
    type: array
    items:
      $ref: '#/definitions/FaceDetection'
  FaceList:
    type: array
    items:
      $ref: '#/definitions/Face'
  FaceMatch:
    type: object
    properties:
      Similarity:
        $ref: '#/definitions/Percent'
        description: Confidence in the match of this face with the input face.
      Face:
        $ref: '#/definitions/Face'
        description: 'Describes the face properties such as the bounding box, face ID, image ID of the source image, and external image ID that you assigned.'
    description: 'Provides face metadata. In addition, it also provides the confidence in the match of this face with the input face.'
  FaceMatchList:
    type: array
    items:
      $ref: '#/definitions/FaceMatch'
  FaceModelVersionList:
    type: array
    items:
      $ref: '#/definitions/String'
  FaceRecord:
    type: object
    properties:
      Face:
        $ref: '#/definitions/Face'
        description: 'Describes the face properties such as the bounding box, face ID, image ID of the input image, and external image ID that you assigned. '
      FaceDetail:
        $ref: '#/definitions/FaceDetail'
        description: Structure containing attributes of the face that the algorithm detected.
    description: Object containing both the face metadata (stored in the back-end database) and facial attributes that are detected but aren't stored in the database.
  FaceRecordList:
    type: array
    items:
      $ref: '#/definitions/FaceRecord'
  FaceSearchSettings:
    type: object
    properties:
      CollectionId:
        $ref: '#/definitions/CollectionId'
        description: The ID of a collection that contains faces that you want to search for.
      FaceMatchThreshold:
        $ref: '#/definitions/Percent'
        description: Minimum face match confidence score that must be met to return a result for a recognized face. Default is 70. 0 is the lowest confidence. 100 is the highest confidence.
    description: Input face recognition parameters for an Amazon Rekognition stream processor. <code>FaceRecognitionSettings</code> is a request parameter for .
  FaceSearchSortBy:
    type: string
    enum:
      - INDEX
      - TIMESTAMP
  GenderType:
    type: string
    enum:
      - Male
      - Female
  Polygon:
    type: array
    items:
      $ref: '#/definitions/Point'
  Geometry:
    type: object
    properties:
      BoundingBox:
        $ref: '#/definitions/BoundingBox'
        description: An axis-aligned coarse representation of the detected text's location on the image.
      Polygon:
        $ref: '#/definitions/Polygon'
        description: 'Within the bounding box, a fine-grained polygon around the detected text.'
    description: Information about where text detected by is located on an image.
  JobId:
    type: string
    pattern: '^[a-zA-Z0-9-_]+$'
    minLength: 1
    maxLength: 64
  MaxResults:
    type: integer
    minimum: 1
  PaginationToken:
    type: string
    maxLength: 255
  VideoJobStatus:
    type: string
    enum:
      - IN_PROGRESS
      - SUCCEEDED
      - FAILED
  StatusMessage:
    type: string
  VideoMetadata:
    type: object
    properties:
      Codec:
        $ref: '#/definitions/String'
        description: 'Type of compression used in the analyzed video. '
      DurationMillis:
        $ref: '#/definitions/ULong'
        description: Length of the video in milliseconds.
      Format:
        $ref: '#/definitions/String'
        description: 'Format of the analyzed video. Possible values are MP4, MOV and AVI. '
      FrameRate:
        $ref: '#/definitions/Float'
        description: Number of frames per second in the video.
      FrameHeight:
        $ref: '#/definitions/ULong'
        description: Vertical pixel dimension of the video.
      FrameWidth:
        $ref: '#/definitions/ULong'
        description: Horizontal pixel dimension of the video.
    description: Information about a video that Amazon Rekognition analyzed. <code>Videometadata</code> is returned in every page of paginated responses from a Amazon Rekognition video operation.
  PersonMatches:
    type: array
    items:
      $ref: '#/definitions/PersonMatch'
  LabelDetectionSortBy:
    type: string
    enum:
      - NAME
      - TIMESTAMP
  LabelDetections:
    type: array
    items:
      $ref: '#/definitions/LabelDetection'
  PersonTrackingSortBy:
    type: string
    enum:
      - INDEX
      - TIMESTAMP
  PersonDetections:
    type: array
    items:
      $ref: '#/definitions/PersonDetection'
  ImageBlob:
    type: string
    minLength: 1
    maxLength: 5242880
  S3Object:
    type: object
    properties:
      Bucket:
        $ref: '#/definitions/S3Bucket'
        description: Name of the S3 bucket.
      Name:
        $ref: '#/definitions/S3ObjectName'
        description: S3 object key name.
      Version:
        $ref: '#/definitions/S3ObjectVersion'
        description: 'If the bucket is versioning enabled, you can specify the object version. '
    description: '<p>Provides the S3 bucket name and object name.</p> <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see Resource Based Policies in the Amazon Rekognition Developer Guide. </p>'
  MaxFacesToIndex:
    type: integer
    minimum: 1
  QualityFilter:
    type: string
    enum:
      - NONE
      - AUTO
  UnindexedFaces:
    type: array
    items:
      $ref: '#/definitions/UnindexedFace'
  JobTag:
    type: string
    pattern: '[a-zA-Z0-9_.\-:]+'
    minLength: 1
    maxLength: 256
  KinesisDataArn:
    type: string
    pattern: '(^arn:([a-z\d-]+):kinesis:([a-z\d-]+):\d{12}:.+$)'
  KinesisDataStream:
    type: object
    properties:
      Arn:
        $ref: '#/definitions/KinesisDataArn'
        description: ARN of the output Amazon Kinesis Data Streams stream.
    description: 'The Kinesis data stream Amazon Rekognition to which the analysis results of a Amazon Rekognition stream processor are streamed. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide.'
  KinesisVideoArn:
    type: string
    pattern: '(^arn:([a-z\d-]+):kinesisvideo:([a-z\d-]+):\d{12}:.+$)'
  KinesisVideoStream:
    type: object
    properties:
      Arn:
        $ref: '#/definitions/KinesisVideoArn'
        description: ARN of the Kinesis video stream stream that streams the source video.
    description: 'Kinesis video stream stream that provides the source streaming video for a Amazon Rekognition Video stream processor. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide.'
  Label:
    type: object
    properties:
      Name:
        $ref: '#/definitions/String'
        description: The name (label) of the object.
      Confidence:
        $ref: '#/definitions/Percent'
        description: Level of confidence.
    description: 'Structure containing details about the detected label, including name, and level of confidence.'
  LabelDetection:
    type: object
    properties:
      Timestamp:
        $ref: '#/definitions/Timestamp'
        description: 'Time, in milliseconds from the start of the video, that the label was detected.'
      Label:
        $ref: '#/definitions/Label'
        description: Details about the detected label.
    description: 'Information about a label detected in a video analysis request and the time the label was detected in the video. '
  LandmarkType:
    type: string
    enum:
      - eyeLeft
      - eyeRight
      - nose
      - mouthLeft
      - mouthRight
      - leftEyeBrowLeft
      - leftEyeBrowRight
      - leftEyeBrowUp
      - rightEyeBrowLeft
      - rightEyeBrowRight
      - rightEyeBrowUp
      - leftEyeLeft
      - leftEyeRight
      - leftEyeUp
      - leftEyeDown
      - rightEyeLeft
      - rightEyeRight
      - rightEyeUp
      - rightEyeDown
      - noseLeft
      - noseRight
      - mouthUp
      - mouthDown
      - leftPupil
      - rightPupil
  Landmark:
    type: object
    properties:
      Type:
        $ref: '#/definitions/LandmarkType'
        description: Type of the landmark.
      X:
        $ref: '#/definitions/Float'
        description: 'x-coordinate from the top left of the landmark expressed as the ratio of the width of the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5. '
      'Y':
        $ref: '#/definitions/Float'
        description: 'y-coordinate from the top left of the landmark expressed as the ratio of the height of the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5.'
    description: Indicates the location of the landmark on the face.
  PageSize:
    type: integer
    minimum: 0
    maximum: 4096
  StreamProcessorList:
    type: array
    items:
      $ref: '#/definitions/StreamProcessor'
  MaxFaces:
    type: integer
    minimum: 1
    maximum: 4096
  SNSTopicArn:
    type: string
    pattern: '(^arn:aws:sns:.*:\w{12}:.+$)'
  NotificationChannel:
    type: object
    required:
      - SNSTopicArn
      - RoleArn
    properties:
      SNSTopicArn:
        $ref: '#/definitions/SNSTopicArn'
        description: The Amazon SNS topic to which Amazon Rekognition to posts the completion status.
      RoleArn:
        $ref: '#/definitions/RoleArn'
        description: 'The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. '
    description: 'The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status of a video analysis operation. For more information, see <a>api-video</a>.'
  PersonIndex:
    type: integer
  PersonDetail:
    type: object
    properties:
      Index:
        $ref: '#/definitions/PersonIndex'
        description: Identifier for the person detected person within a video. Use to keep track of the person throughout the video. The identifier is not stored by Amazon Rekognition.
      BoundingBox:
        $ref: '#/definitions/BoundingBox'
        description: Bounding box around the detected person.
      Face:
        $ref: '#/definitions/FaceDetail'
        description: Face details for the detected person.
    description: Details about a person detected in a video analysis request.
  PersonDetection:
    type: object
    properties:
      Timestamp:
        $ref: '#/definitions/Timestamp'
        description: 'The time, in milliseconds from the start of the video, that the person was tracked.'
      Person:
        $ref: '#/definitions/PersonDetail'
        description: Details about a person tracked in a video.
    description: '<p>Details and tracking information for a single time a person is tracked in a video. Amazon Rekognition operations that track persons return an array of <code>PersonDetection</code> objects with elements for each time a person is tracked in a video. </p> <p>For more information, see API_GetPersonTracking in the Amazon Rekognition Developer Guide. </p>'
  PersonMatch:
    type: object
    properties:
      Timestamp:
        $ref: '#/definitions/Timestamp'
        description: 'The time, in milliseconds from the beginning of the video, that the person was matched in the video.'
      Person:
        $ref: '#/definitions/PersonDetail'
        description: Information about the matched person.
      FaceMatches:
        $ref: '#/definitions/FaceMatchList'
        description: Information about the faces in the input collection that match the face of a person in the video.
    description: 'Information about a person whose face matches a face(s) in a Amazon Rekognition collection. Includes information about the faces in the Amazon Rekognition collection (), information about the person (<a>PersonDetail</a>) and the timestamp for when the person was detected in a video. An array of <code>PersonMatch</code> objects is returned by . '
  Point:
    type: object
    properties:
      X:
        $ref: '#/definitions/Float'
        description: The value of the X coordinate for a point on a <code>Polygon</code>.
      'Y':
        $ref: '#/definitions/Float'
        description: The value of the Y coordinate for a point on a <code>Polygon</code>.
    description: '<p>The X and Y coordinates of a point on an image. The X and Y values returned are ratios of the overall image size. For example, if the input image is 700x200 and the operation returns X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the image.</p> <p>An array of <code>Point</code> objects, <code>Polygon</code>, is returned by . <code>Polygon</code> represents a fine-grained polygon around detected text. For more information, see Geometry in the Amazon Rekognition Developer Guide. </p>'
  Reason:
    type: string
    enum:
      - EXCEEDS_MAX_FACES
      - EXTREME_POSE
      - LOW_BRIGHTNESS
      - LOW_SHARPNESS
      - LOW_CONFIDENCE
      - SMALL_BOUNDING_BOX
  Reasons:
    type: array
    items:
      $ref: '#/definitions/Reason'
  S3Bucket:
    type: string
    pattern: '[0-9A-Za-z\.\-_]*'
    minLength: 3
    maxLength: 255
  S3ObjectName:
    type: string
    minLength: 1
    maxLength: 1024
  S3ObjectVersion:
    type: string
    minLength: 1
    maxLength: 1024
  Video:
    type: object
    properties:
      S3Object:
        $ref: '#/definitions/S3Object'
        description: The Amazon S3 bucket name and file name for the video.
    description: 'Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as use <code>Video</code> to specify a video for analysis. The supported file formats are .mp4, .mov and .avi.'
  StreamProcessor:
    type: object
    properties:
      Name:
        $ref: '#/definitions/StreamProcessorName'
        description: 'Name of the Amazon Rekognition stream processor. '
      Status:
        $ref: '#/definitions/StreamProcessorStatus'
        description: Current status of the Amazon Rekognition stream processor.
    description: 'An object that recognizes faces in a streaming video. An Amazon Rekognition stream processor is created by a call to . The request parameters for <code>CreateStreamProcessor</code> describe the Kinesis video stream source for the streaming video, face recognition parameters, and where to stream the analysis resullts. '
  TextTypes:
    type: string
    enum:
      - LINE
      - WORD
  TextDetection:
    type: object
    properties:
      DetectedText:
        $ref: '#/definitions/String'
        description: 'The word or line of text recognized by Amazon Rekognition. '
      Type:
        $ref: '#/definitions/TextTypes'
        description: The type of text that was detected.
      Id:
        $ref: '#/definitions/UInteger'
        description: 'The identifier for the detected text. The identifier is only unique for a single call to <code>DetectText</code>. '
      ParentId:
        $ref: '#/definitions/UInteger'
        description: 'The Parent identifier for the detected text identified by the value of <code>ID</code>. If the type of detected text is <code>LINE</code>, the value of <code>ParentId</code> is <code>Null</code>. '
      Confidence:
        $ref: '#/definitions/Percent'
        description: The confidence that Amazon Rekognition has in the accuracy of the detected text and the accuracy of the geometry points around the detected text.
      Geometry:
        $ref: '#/definitions/Geometry'
        description: The location of the detected text on the image. Includes an axis aligned coarse bounding box surrounding the text and a finer grain polygon for more accurate spatial information.
    description: '<p>Information about a word or line of text detected by .</p> <p>The <code>DetectedText</code> field contains the text that Amazon Rekognition detected in the image. </p> <p>Every word and line has an identifier (<code>Id</code>). Each word belongs to a line and has a parent identifier (<code>ParentId</code>) that identifies the line of text in which the word appears. The word <code>Id</code> is also an index for the word within a line of words. </p> <p>For more information, see Detecting Text in the Amazon Rekognition Developer Guide.</p>'
  UnindexedFace:
    type: object
    properties:
      Reasons:
        $ref: '#/definitions/Reasons'
        description: '<p>An array of reasons specifying why a face was not indexed. </p> <ul> <li> <p>EXTREME_POSE - The face is at a pose that can''t be detected. For example, the head is turned too far away from the camera.</p> </li> <li> <p>EXCEEDS_MAX_FACES - The number of faces detected is already higher than that specified by the <code>MaxFaces</code> input parameter for <code>IndexFaces</code>.</p> </li> <li> <p>LOW_BRIGHTNESS - The image is too dark.</p> </li> <li> <p>LOW_SHARPNESS - The image is too blurry.</p> </li> <li> <p>LOW_CONFIDENCE - The face was detected with a low confidence.</p> </li> <li> <p>SMALL_BOUNDING_BOX - The bounding box around the face is too small.</p> </li> </ul>'
      FaceDetail:
        $ref: '#/definitions/FaceDetail'
        description: 'Structure containing attributes of a face that was detected, but not indexed, by <code>IndexFaces</code>. '
    description: A face detected by but not indexed. Use the <code>Reasons</code> response attribute to determine why a face is not indexed.
  Url:
    type: string
