swagger: '2.0'
info:
  version: '2015-02-01'
  x-release: v4
  title: Amazon Elastic File System
  description: '<fullname>Amazon Elastic File System</fullname> <p>Amazon Elastic File System (Amazon EFS) provides simple, scalable file storage for use with Amazon EC2 instances in the AWS Cloud. With Amazon EFS, storage capacity is elastic, growing and shrinking automatically as you add and remove files, so your applications have the storage they need, when they need it. For more information, see the <a href="http://docs.aws.amazon.com/efs/latest/ug/api-reference.html">User Guide</a>.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: elasticfilesystem
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/elasticfilesystem-2015-02-01.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/elasticfilesystem/'
host: elasticfilesystem.amazonaws.com
basePath: /
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
parameters:
  Action:
    name: Action
    in: header
    type: string
    required: true
  Version:
    name: Version
    in: header
    type: string
    required: true
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  /2015-02-01/file-systems:
    post:
      operationId: CreateFileSystem
      description: '<p>Creates a new, empty file system. The operation requires a creation token in the request that Amazon EFS uses to ensure idempotent creation (calling the operation with same creation token has no effect). If a file system does not currently exist that is owned by the caller''s AWS account with the specified creation token, this operation does the following:</p> <ul> <li> <p>Creates a new, empty file system. The file system will have an Amazon EFS assigned ID, and an initial lifecycle state <code>creating</code>.</p> </li> <li> <p>Returns with the description of the created file system.</p> </li> </ul> <p>Otherwise, this operation returns a <code>FileSystemAlreadyExists</code> error with the ID of the existing file system.</p> <note> <p>For basic use cases, you can use a randomly generated UUID for the creation token.</p> </note> <p> The idempotent operation allows you to retry a <code>CreateFileSystem</code> call without risk of creating an extra file system. This can happen when an initial call fails in a way that leaves it uncertain whether or not a file system was actually created. An example might be that a transport level timeout occurred or your connection was reset. As long as you use the same creation token, if the initial call had succeeded in creating a file system, the client can learn of its existence from the <code>FileSystemAlreadyExists</code> error.</p> <note> <p>The <code>CreateFileSystem</code> call returns while the file system''s lifecycle state is still <code>creating</code>. You can check the file system creation status by calling the <a>DescribeFileSystems</a> operation, which among other things returns the file system state.</p> </note> <p>This operation also takes an optional <code>PerformanceMode</code> parameter that you choose for your file system. We recommend <code>generalPurpose</code> performance mode for most file systems. File systems using the <code>maxIO</code> performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. The performance mode can''t be changed after the file system has been created. For more information, see <a href="http://docs.aws.amazon.com/efs/latest/ug/performance.html#performancemodes.html">Amazon EFS: Performance Modes</a>.</p> <p>After the file system is fully created, Amazon EFS sets its lifecycle state to <code>available</code>, at which point you can create one or more mount targets for the file system in your VPC. For more information, see <a>CreateMountTarget</a>. You mount your Amazon EFS file system on an EC2 instances in your VPC via the mount target. For more information, see <a href="http://docs.aws.amazon.com/efs/latest/ug/how-it-works.html">Amazon EFS: How it Works</a>. </p> <p> This operation requires permissions for the <code>elasticfilesystem:CreateFileSystem</code> action. </p>'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/FileSystemDescription'
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: FileSystemAlreadyExists
          schema:
            $ref: '#/definitions/FileSystemAlreadyExists'
        '483':
          description: FileSystemLimitExceeded
          schema:
            $ref: '#/definitions/FileSystemLimitExceeded'
        '484':
          description: InsufficientThroughputCapacity
          schema:
            $ref: '#/definitions/InsufficientThroughputCapacity'
        '485':
          description: ThroughputLimitExceeded
          schema:
            $ref: '#/definitions/ThroughputLimitExceeded'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateFileSystemRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeFileSystems
      description: '<p>Returns the description of a specific Amazon EFS file system if either the file system <code>CreationToken</code> or the <code>FileSystemId</code> is provided. Otherwise, it returns descriptions of all file systems owned by the caller''s AWS account in the AWS Region of the endpoint that you''re calling.</p> <p> When retrieving all file system descriptions, you can optionally specify the <code>MaxItems</code> parameter to limit the number of descriptions in a response. If more file system descriptions remain, Amazon EFS returns a <code>NextMarker</code>, an opaque token, in the response. In this case, you should send a subsequent request with the <code>Marker</code> request parameter set to the value of <code>NextMarker</code>. </p> <p>To retrieve a list of your file system descriptions, this operation is used in an iterative process, where <code>DescribeFileSystems</code> is called first without the <code>Marker</code> and then the operation continues to call it with the <code>Marker</code> parameter set to the value of the <code>NextMarker</code> from the previous response until the response has no <code>NextMarker</code>. </p> <p>The implementation may return fewer than <code>MaxItems</code> file system descriptions while still including a <code>NextMarker</code> value. </p> <p> The order of file systems returned in the response of one <code>DescribeFileSystems</code> call and the order of file systems returned across the responses of a multi-call iteration is unspecified. </p> <p> This operation requires permissions for the <code>elasticfilesystem:DescribeFileSystems</code> action. </p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeFileSystemsResponse'
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: FileSystemNotFound
          schema:
            $ref: '#/definitions/FileSystemNotFound'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeFileSystemsRequest'
  /2015-02-01/mount-targets:
    post:
      operationId: CreateMountTarget
      description: '<p>Creates a mount target for a file system. You can then mount the file system on EC2 instances via the mount target.</p> <p>You can create one mount target in each Availability Zone in your VPC. All EC2 instances in a VPC within a given Availability Zone share a single mount target for a given file system. If you have multiple subnets in an Availability Zone, you create a mount target in one of the subnets. EC2 instances do not need to be in the same subnet as the mount target in order to access their file system. For more information, see <a href="http://docs.aws.amazon.com/efs/latest/ug/how-it-works.html">Amazon EFS: How it Works</a>. </p> <p>In the request, you also specify a file system ID for which you are creating the mount target and the file system''s lifecycle state must be <code>available</code>. For more information, see <a>DescribeFileSystems</a>.</p> <p>In the request, you also provide a subnet ID, which determines the following:</p> <ul> <li> <p>VPC in which Amazon EFS creates the mount target</p> </li> <li> <p>Availability Zone in which Amazon EFS creates the mount target</p> </li> <li> <p>IP address range from which Amazon EFS selects the IP address of the mount target (if you don''t specify an IP address in the request)</p> </li> </ul> <p>After creating the mount target, Amazon EFS returns a response that includes, a <code>MountTargetId</code> and an <code>IpAddress</code>. You use this IP address when mounting the file system in an EC2 instance. You can also use the mount target''s DNS name when mounting the file system. The EC2 instance on which you mount the file system via the mount target can resolve the mount target''s DNS name to its IP address. For more information, see <a href="http://docs.aws.amazon.com/efs/latest/ug/how-it-works.html#how-it-works-implementation">How it Works: Implementation Overview</a>. </p> <p>Note that you can create mount targets for a file system in only one VPC, and there can be only one mount target per Availability Zone. That is, if the file system already has one or more mount targets created for it, the subnet specified in the request to add another mount target must meet the following requirements:</p> <ul> <li> <p>Must belong to the same VPC as the subnets of the existing mount targets</p> </li> <li> <p>Must not be in the same Availability Zone as any of the subnets of the existing mount targets</p> </li> </ul> <p>If the request satisfies the requirements, Amazon EFS does the following:</p> <ul> <li> <p>Creates a new mount target in the specified subnet.</p> </li> <li> <p>Also creates a new network interface in the subnet as follows:</p> <ul> <li> <p>If the request provides an <code>IpAddress</code>, Amazon EFS assigns that IP address to the network interface. Otherwise, Amazon EFS assigns a free address in the subnet (in the same way that the Amazon EC2 <code>CreateNetworkInterface</code> call does when a request does not specify a primary private IP address).</p> </li> <li> <p>If the request provides <code>SecurityGroups</code>, this network interface is associated with those security groups. Otherwise, it belongs to the default security group for the subnet''s VPC.</p> </li> <li> <p>Assigns the description <code>Mount target <i>fsmt-id</i> for file system <i>fs-id</i> </code> where <code> <i>fsmt-id</i> </code> is the mount target ID, and <code> <i>fs-id</i> </code> is the <code>FileSystemId</code>.</p> </li> <li> <p>Sets the <code>requesterManaged</code> property of the network interface to <code>true</code>, and the <code>requesterId</code> value to <code>EFS</code>.</p> </li> </ul> <p>Each Amazon EFS mount target has one corresponding requester-managed EC2 network interface. After the network interface is created, Amazon EFS sets the <code>NetworkInterfaceId</code> field in the mount target''s description to the network interface ID, and the <code>IpAddress</code> field to its address. If network interface creation fails, the entire <code>CreateMountTarget</code> operation fails.</p> </li> </ul> <note> <p>The <code>CreateMountTarget</code> call returns only after creating the network interface, but while the mount target state is still <code>creating</code>, you can check the mount target creation status by calling the <a>DescribeMountTargets</a> operation, which among other things returns the mount target state.</p> </note> <p>We recommend you create a mount target in each of the Availability Zones. There are cost considerations for using a file system in an Availability Zone through a mount target created in another Availability Zone. For more information, see <a href="http://aws.amazon.com/efs/">Amazon EFS</a>. In addition, by always using a mount target local to the instance''s Availability Zone, you eliminate a partial failure scenario. If the Availability Zone in which your mount target is created goes down, then you won''t be able to access your file system through that mount target. </p> <p>This operation requires permissions for the following action on the file system:</p> <ul> <li> <p> <code>elasticfilesystem:CreateMountTarget</code> </p> </li> </ul> <p>This operation also requires permissions for the following Amazon EC2 actions:</p> <ul> <li> <p> <code>ec2:DescribeSubnets</code> </p> </li> <li> <p> <code>ec2:DescribeNetworkInterfaces</code> </p> </li> <li> <p> <code>ec2:CreateNetworkInterface</code> </p> </li> </ul>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MountTargetDescription'
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: FileSystemNotFound
          schema:
            $ref: '#/definitions/FileSystemNotFound'
        '483':
          description: IncorrectFileSystemLifeCycleState
          schema:
            $ref: '#/definitions/IncorrectFileSystemLifeCycleState'
        '484':
          description: MountTargetConflict
          schema:
            $ref: '#/definitions/MountTargetConflict'
        '485':
          description: SubnetNotFound
          schema:
            $ref: '#/definitions/SubnetNotFound'
        '486':
          description: NoFreeAddressesInSubnet
          schema:
            $ref: '#/definitions/NoFreeAddressesInSubnet'
        '487':
          description: IpAddressInUse
          schema:
            $ref: '#/definitions/IpAddressInUse'
        '488':
          description: NetworkInterfaceLimitExceeded
          schema:
            $ref: '#/definitions/NetworkInterfaceLimitExceeded'
        '489':
          description: SecurityGroupLimitExceeded
          schema:
            $ref: '#/definitions/SecurityGroupLimitExceeded'
        '490':
          description: SecurityGroupNotFound
          schema:
            $ref: '#/definitions/SecurityGroupNotFound'
        '491':
          description: UnsupportedAvailabilityZone
          schema:
            $ref: '#/definitions/UnsupportedAvailabilityZone'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateMountTargetRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeMountTargets
      description: '<p>Returns the descriptions of all the current mount targets, or a specific mount target, for a file system. When requesting all of the current mount targets, the order of mount targets returned in the response is unspecified.</p> <p>This operation requires permissions for the <code>elasticfilesystem:DescribeMountTargets</code> action, on either the file system ID that you specify in <code>FileSystemId</code>, or on the file system of the mount target that you specify in <code>MountTargetId</code>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeMountTargetsResponse'
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: FileSystemNotFound
          schema:
            $ref: '#/definitions/FileSystemNotFound'
        '483':
          description: MountTargetNotFound
          schema:
            $ref: '#/definitions/MountTargetNotFound'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeMountTargetsRequest'
  '/2015-02-01/create-tags/{FileSystemId}':
    post:
      operationId: CreateTags
      description: '<p>Creates or overwrites tags associated with a file system. Each tag is a key-value pair. If a tag key specified in the request already exists on the file system, this operation overwrites its value with the value provided in the request. If you add the <code>Name</code> tag to your file system, Amazon EFS returns it in the response to the <a>DescribeFileSystems</a> operation. </p> <p>This operation requires permission for the <code>elasticfilesystem:CreateTags</code> action.</p>'
      responses:
        '204':
          description: Success
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: FileSystemNotFound
          schema:
            $ref: '#/definitions/FileSystemNotFound'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateTagsRequest'
        - name: FileSystemId
          in: path
          type: string
          required: true
        - name: FileSystemId
          in: query
          type: string
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/2015-02-01/file-systems/{FileSystemId}':
    delete:
      operationId: DeleteFileSystem
      description: '<p>Deletes a file system, permanently severing access to its contents. Upon return, the file system no longer exists and you can''t access any contents of the deleted file system.</p> <p> You can''t delete a file system that is in use. That is, if the file system has any mount targets, you must first delete them. For more information, see <a>DescribeMountTargets</a> and <a>DeleteMountTarget</a>. </p> <note> <p>The <code>DeleteFileSystem</code> call returns while the file system state is still <code>deleting</code>. You can check the file system deletion status by calling the <a>DescribeFileSystems</a> operation, which returns a list of file systems in your account. If you pass file system ID or creation token for the deleted file system, the <a>DescribeFileSystems</a> returns a <code>404 FileSystemNotFound</code> error.</p> </note> <p>This operation requires permissions for the <code>elasticfilesystem:DeleteFileSystem</code> action.</p>'
      responses:
        '204':
          description: Success
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: FileSystemNotFound
          schema:
            $ref: '#/definitions/FileSystemNotFound'
        '483':
          description: FileSystemInUse
          schema:
            $ref: '#/definitions/FileSystemInUse'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteFileSystemRequest'
        - name: FileSystemId
          in: path
          type: string
          required: true
        - name: FileSystemId
          in: query
          type: string
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      operationId: UpdateFileSystem
      description: Updates the throughput mode or the amount of provisioned throughput of an existing file system.
      responses:
        '202':
          description: Success
          schema:
            $ref: '#/definitions/FileSystemDescription'
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: FileSystemNotFound
          schema:
            $ref: '#/definitions/FileSystemNotFound'
        '482':
          description: IncorrectFileSystemLifeCycleState
          schema:
            $ref: '#/definitions/IncorrectFileSystemLifeCycleState'
        '483':
          description: InsufficientThroughputCapacity
          schema:
            $ref: '#/definitions/InsufficientThroughputCapacity'
        '484':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '485':
          description: ThroughputLimitExceeded
          schema:
            $ref: '#/definitions/ThroughputLimitExceeded'
        '486':
          description: TooManyRequests
          schema:
            $ref: '#/definitions/TooManyRequests'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateFileSystemRequest'
        - name: FileSystemId
          in: path
          type: string
          required: true
        - name: FileSystemId
          in: query
          type: string
  '/2015-02-01/mount-targets/{MountTargetId}':
    delete:
      operationId: DeleteMountTarget
      description: '<p>Deletes the specified mount target.</p> <p>This operation forcibly breaks any mounts of the file system via the mount target that is being deleted, which might disrupt instances or applications using those mounts. To avoid applications getting cut off abruptly, you might consider unmounting any mounts of the mount target, if feasible. The operation also deletes the associated network interface. Uncommitted writes may be lost, but breaking a mount target using this operation does not corrupt the file system itself. The file system you created remains. You can mount an EC2 instance in your VPC via another mount target.</p> <p>This operation requires permissions for the following action on the file system:</p> <ul> <li> <p> <code>elasticfilesystem:DeleteMountTarget</code> </p> </li> </ul> <note> <p>The <code>DeleteMountTarget</code> call returns while the mount target state is still <code>deleting</code>. You can check the mount target deletion by calling the <a>DescribeMountTargets</a> operation, which returns a list of mount target descriptions for the given file system. </p> </note> <p>The operation also requires permissions for the following Amazon EC2 action on the mount target''s network interface:</p> <ul> <li> <p> <code>ec2:DeleteNetworkInterface</code> </p> </li> </ul>'
      responses:
        '204':
          description: Success
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: DependencyTimeout
          schema:
            $ref: '#/definitions/DependencyTimeout'
        '483':
          description: MountTargetNotFound
          schema:
            $ref: '#/definitions/MountTargetNotFound'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteMountTargetRequest'
        - name: MountTargetId
          in: path
          type: string
          required: true
        - name: MountTargetId
          in: query
          type: string
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/2015-02-01/delete-tags/{FileSystemId}':
    post:
      operationId: DeleteTags
      description: '<p>Deletes the specified tags from a file system. If the <code>DeleteTags</code> request includes a tag key that does not exist, Amazon EFS ignores it and doesn''t cause an error. For more information about tags and related restrictions, see <a href="http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Tag Restrictions</a> in the <i>AWS Billing and Cost Management User Guide</i>.</p> <p>This operation requires permissions for the <code>elasticfilesystem:DeleteTags</code> action.</p>'
      responses:
        '204':
          description: Success
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: FileSystemNotFound
          schema:
            $ref: '#/definitions/FileSystemNotFound'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteTagsRequest'
        - name: FileSystemId
          in: path
          type: string
          required: true
        - name: FileSystemId
          in: query
          type: string
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/2015-02-01/mount-targets/{MountTargetId}/security-groups':
    get:
      operationId: DescribeMountTargetSecurityGroups
      description: '<p>Returns the security groups currently in effect for a mount target. This operation requires that the network interface of the mount target has been created and the lifecycle state of the mount target is not <code>deleted</code>.</p> <p>This operation requires permissions for the following actions:</p> <ul> <li> <p> <code>elasticfilesystem:DescribeMountTargetSecurityGroups</code> action on the mount target''s file system. </p> </li> <li> <p> <code>ec2:DescribeNetworkInterfaceAttribute</code> action on the mount target''s network interface. </p> </li> </ul>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeMountTargetSecurityGroupsResponse'
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: MountTargetNotFound
          schema:
            $ref: '#/definitions/MountTargetNotFound'
        '483':
          description: IncorrectMountTargetState
          schema:
            $ref: '#/definitions/IncorrectMountTargetState'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeMountTargetSecurityGroupsRequest'
        - name: MountTargetId
          in: path
          type: string
          required: true
        - name: MountTargetId
          in: query
          type: string
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      operationId: ModifyMountTargetSecurityGroups
      description: '<p>Modifies the set of security groups in effect for a mount target.</p> <p>When you create a mount target, Amazon EFS also creates a new network interface. For more information, see <a>CreateMountTarget</a>. This operation replaces the security groups in effect for the network interface associated with a mount target, with the <code>SecurityGroups</code> provided in the request. This operation requires that the network interface of the mount target has been created and the lifecycle state of the mount target is not <code>deleted</code>. </p> <p>The operation requires permissions for the following actions:</p> <ul> <li> <p> <code>elasticfilesystem:ModifyMountTargetSecurityGroups</code> action on the mount target''s file system. </p> </li> <li> <p> <code>ec2:ModifyNetworkInterfaceAttribute</code> action on the mount target''s network interface. </p> </li> </ul>'
      responses:
        '204':
          description: Success
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: MountTargetNotFound
          schema:
            $ref: '#/definitions/MountTargetNotFound'
        '483':
          description: IncorrectMountTargetState
          schema:
            $ref: '#/definitions/IncorrectMountTargetState'
        '484':
          description: SecurityGroupLimitExceeded
          schema:
            $ref: '#/definitions/SecurityGroupLimitExceeded'
        '485':
          description: SecurityGroupNotFound
          schema:
            $ref: '#/definitions/SecurityGroupNotFound'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModifyMountTargetSecurityGroupsRequest'
        - name: MountTargetId
          in: path
          type: string
          required: true
        - name: MountTargetId
          in: query
          type: string
  '/2015-02-01/tags/{FileSystemId}/':
    get:
      operationId: DescribeTags
      description: '<p>Returns the tags associated with a file system. The order of tags returned in the response of one <code>DescribeTags</code> call and the order of tags returned across the responses of a multi-call iteration (when using pagination) is unspecified. </p> <p> This operation requires permissions for the <code>elasticfilesystem:DescribeTags</code> action. </p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeTagsResponse'
        '480':
          description: BadRequest
          schema:
            $ref: '#/definitions/BadRequest'
        '481':
          description: InternalServerError
          schema:
            $ref: '#/definitions/InternalServerError'
        '482':
          description: FileSystemNotFound
          schema:
            $ref: '#/definitions/FileSystemNotFound'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeTagsRequest'
        - name: FileSystemId
          in: path
          type: string
          required: true
        - name: FileSystemId
          in: query
          type: string
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  FileSystemDescription:
    type: object
    required:
      - OwnerId
      - CreationToken
      - FileSystemId
      - CreationTime
      - LifeCycleState
      - NumberOfMountTargets
      - SizeInBytes
      - PerformanceMode
    example:
      CreationTime: '1481841524.0'
      CreationToken: tokenstring
      FileSystemId: fs-01234567
      LifeCycleState: creating
      NumberOfMountTargets: 0
      OwnerId: 012345678912
      PerformanceMode: generalPurpose
      SizeInBytes:
        Value: 0
    properties:
      OwnerId:
        $ref: '#/definitions/AwsAccountId'
        description: 'AWS account that created the file system. If the file system was created by an IAM user, the parent account to which the user belongs is the owner.'
      CreationToken:
        $ref: '#/definitions/CreationToken'
        description: Opaque string specified in the request.
      FileSystemId:
        $ref: '#/definitions/FileSystemId'
        description: 'ID of the file system, assigned by Amazon EFS.'
      CreationTime:
        $ref: '#/definitions/Timestamp'
        description: 'Time that the file system was created, in seconds (since 1970-01-01T00:00:00Z).'
      LifeCycleState:
        $ref: '#/definitions/LifeCycleState'
        description: Lifecycle phase of the file system.
      Name:
        $ref: '#/definitions/TagValue'
        description: 'You can add tags to a file system, including a <code>Name</code> tag. For more information, see <a>CreateTags</a>. If the file system has a <code>Name</code> tag, Amazon EFS returns the value in this field. '
      NumberOfMountTargets:
        $ref: '#/definitions/MountTargetCount'
        description: 'Current number of mount targets that the file system has. For more information, see <a>CreateMountTarget</a>.'
      SizeInBytes:
        $ref: '#/definitions/FileSystemSize'
        description: 'Latest known metered size (in bytes) of data stored in the file system, in its <code>Value</code> field, and the time at which that size was determined in its <code>Timestamp</code> field. The <code>Timestamp</code> value is the integer number of seconds since 1970-01-01T00:00:00Z. The <code>SizeInBytes</code> value doesn''t represent the size of a consistent snapshot of the file system, but it is eventually consistent when there are no writes to the file system. That is, <code>SizeInBytes</code> represents actual size only if the file system is not modified for a period longer than a couple of hours. Otherwise, the value is not the exact size that the file system was at any point in time. '
      PerformanceMode:
        $ref: '#/definitions/PerformanceMode'
        description: The <code>PerformanceMode</code> of the file system.
      Encrypted:
        $ref: '#/definitions/Encrypted'
        description: 'A Boolean value that, if true, indicates that the file system is encrypted.'
      KmsKeyId:
        $ref: '#/definitions/KmsKeyId'
        description: The ID of an AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the encrypted file system.
      ThroughputMode:
        $ref: '#/definitions/ThroughputMode'
        description: 'The throughput mode for a file system. There are two throughput modes to choose from for your file system: bursting and provisioned. You can decrease your file system''s throughput in Provisioned Throughput mode or change between the throughput modes as long as it’s been more than 24 hours since the last decrease or throughput mode change.'
      ProvisionedThroughputInMibps:
        $ref: '#/definitions/ProvisionedThroughputInMibps'
        description: 'The throughput, measured in MiB/s, that you want to provision for a file system. The limit on throughput is 1024 MiB/s. You can get these limits increased by contacting AWS Support. For more information, see <a href="http://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits">Amazon EFS Limits That You Can Increase</a> in the <i>Amazon EFS User Guide.</i> '
    description: Description of the file system.
  CreateFileSystemRequest:
    type: object
    required:
      - CreationToken
    example:
      CreationToken: tokenstring
      PerformanceMode: generalPurpose
    properties:
      CreationToken:
        $ref: '#/definitions/CreationToken'
        description: String of up to 64 ASCII characters. Amazon EFS uses this to ensure idempotent creation.
      PerformanceMode:
        $ref: '#/definitions/PerformanceMode'
        description: The <code>PerformanceMode</code> of the file system. We recommend <code>generalPurpose</code> performance mode for most file systems. File systems using the <code>maxIO</code> performance mode can scale to higher levels of aggregate throughput and operations per second with a tradeoff of slightly higher latencies for most file operations. This can't be changed after the file system has been created.
      Encrypted:
        $ref: '#/definitions/Encrypted'
        description: 'A Boolean value that, if true, creates an encrypted file system. When creating an encrypted file system, you have the option of specifying a <a>CreateFileSystemRequest$KmsKeyId</a> for an existing AWS Key Management Service (AWS KMS) customer master key (CMK). If you don''t specify a CMK, then the default CMK for Amazon EFS, <code>/aws/elasticfilesystem</code>, is used to protect the encrypted file system. '
      KmsKeyId:
        $ref: '#/definitions/KmsKeyId'
        description: '<p>The ID of the AWS KMS CMK to be used to protect the encrypted file system. This parameter is only required if you want to use a non-default CMK. If this parameter is not specified, the default CMK for Amazon EFS is used. This ID can be in one of the following formats:</p> <ul> <li> <p>Key ID - A unique identifier of the key, for example, <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li> <li> <p>ARN - An Amazon Resource Name (ARN) for the key, for example, <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>.</p> </li> <li> <p>Key alias - A previously created display name for a key. For example, <code>alias/projectKey1</code>.</p> </li> <li> <p>Key alias ARN - An ARN for a key alias, for example, <code>arn:aws:kms:us-west-2:444455556666:alias/projectKey1</code>.</p> </li> </ul> <p>If KmsKeyId is specified, the <a>CreateFileSystemRequest$Encrypted</a> parameter must be set to true.</p>'
      ThroughputMode:
        $ref: '#/definitions/ThroughputMode'
        description: 'The throughput mode for the file system to be created. There are two throughput modes to choose from for your file system: bursting and provisioned. You can decrease your file system''s throughput in Provisioned Throughput mode or change between the throughput modes as long as it’s been more than 24 hours since the last decrease or throughput mode change.'
      ProvisionedThroughputInMibps:
        $ref: '#/definitions/ProvisionedThroughputInMibps'
        description: 'The throughput, measured in MiB/s, that you want to provision for a file system that you''re creating. The limit on throughput is 1024 MiB/s. You can get these limits increased by contacting AWS Support. For more information, see <a href="http://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits">Amazon EFS Limits That You Can Increase</a> in the <i>Amazon EFS User Guide.</i> '
  BadRequest:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if the request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
  InternalServerError:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if an error occurred on the server side.
  FileSystemAlreadyExists:
    type: object
    required:
      - ErrorCode
      - FileSystemId
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
      FileSystemId:
        $ref: '#/definitions/FileSystemId'
    description: 'Returned if the file system you are trying to create already exists, with the creation token you provided.'
  FileSystemLimitExceeded:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if the AWS account has already created the maximum number of file systems allowed per account.
  InsufficientThroughputCapacity:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: 'Returned if there''s not enough capacity to provision additional throughput. This value might be returned when you try to create a file system in provisioned throughput mode, when you attempt to increase the provisioned throughput of an existing file system, or when you attempt to change an existing file system from bursting to provisioned throughput mode.'
  ThroughputLimitExceeded:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if the throughput mode or amount of provisioned throughput can't be changed because the throughput limit of 1024 MiB/s has been reached.
  MountTargetDescription:
    type: object
    required:
      - MountTargetId
      - FileSystemId
      - SubnetId
      - LifeCycleState
    example:
      FileSystemId: fs-01234567
      IpAddress: 192.0.0.2
      LifeCycleState: creating
      MountTargetId: fsmt-12340abc
      NetworkInterfaceId: eni-cedf6789
      OwnerId: 012345678912
      SubnetId: subnet-1234abcd
    properties:
      OwnerId:
        $ref: '#/definitions/AwsAccountId'
        description: AWS account ID that owns the resource.
      MountTargetId:
        $ref: '#/definitions/MountTargetId'
        description: System-assigned mount target ID.
      FileSystemId:
        $ref: '#/definitions/FileSystemId'
        description: ID of the file system for which the mount target is intended.
      SubnetId:
        $ref: '#/definitions/SubnetId'
        description: ID of the mount target's subnet.
      LifeCycleState:
        $ref: '#/definitions/LifeCycleState'
        description: Lifecycle state of the mount target.
      IpAddress:
        $ref: '#/definitions/IpAddress'
        description: Address at which the file system may be mounted via the mount target.
      NetworkInterfaceId:
        $ref: '#/definitions/NetworkInterfaceId'
        description: ID of the network interface that Amazon EFS created when it created the mount target.
    description: Provides a description of a mount target.
  CreateMountTargetRequest:
    type: object
    required:
      - FileSystemId
      - SubnetId
    example:
      FileSystemId: fs-01234567
      SubnetId: subnet-1234abcd
    properties:
      FileSystemId:
        $ref: '#/definitions/FileSystemId'
        description: ID of the file system for which to create the mount target.
      SubnetId:
        $ref: '#/definitions/SubnetId'
        description: ID of the subnet to add the mount target in.
      IpAddress:
        $ref: '#/definitions/IpAddress'
        description: Valid IPv4 address within the address range of the specified subnet.
      SecurityGroups:
        $ref: '#/definitions/SecurityGroups'
        description: 'Up to five VPC security group IDs, of the form <code>sg-xxxxxxxx</code>. These must be for the same VPC as subnet specified.'
    description: <p/>
  FileSystemNotFound:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if the specified <code>FileSystemId</code> value doesn't exist in the requester's AWS account.
  IncorrectFileSystemLifeCycleState:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if the file system's lifecycle state is not "available".
  MountTargetConflict:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if the mount target would violate one of the specified restrictions based on the file system's existing mount targets.
  SubnetNotFound:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if there is no subnet with ID <code>SubnetId</code> provided in the request.
  NoFreeAddressesInSubnet:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if <code>IpAddress</code> was not specified in the request and there are no free IP addresses in the subnet.
  IpAddressInUse:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if the request specified an <code>IpAddress</code> that is already in use in the subnet.
  NetworkInterfaceLimitExceeded:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: 'The calling account has reached the limit for elastic network interfaces for the specific AWS Region. The client should try to delete some elastic network interfaces or get the account limit raised. For more information, see <a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html">Amazon VPC Limits</a> in the <i>Amazon VPC User Guide </i> (see the Network interfaces per VPC entry in the table). '
  SecurityGroupLimitExceeded:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if the size of <code>SecurityGroups</code> specified in the request is greater than five.
  SecurityGroupNotFound:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if one of the specified security groups doesn't exist in the subnet's VPC.
  UnsupportedAvailabilityZone:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: <p/>
  CreateTagsRequest:
    type: object
    required:
      - Tags
    example:
      FileSystemId: fs-01234567
      Tags:
        - Key: Name
          Value: MyFileSystem
    properties:
      Tags:
        $ref: '#/definitions/Tags'
        description: 'Array of <code>Tag</code> objects to add. Each <code>Tag</code> object is a key-value pair. '
    description: <p/>
  DeleteFileSystemRequest:
    type: object
    example:
      FileSystemId: fs-01234567
    properties: {}
    description: <p/>
  FileSystemInUse:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if a file system has mount targets.
  DeleteMountTargetRequest:
    type: object
    example:
      MountTargetId: fsmt-12340abc
    properties: {}
    description: <p/>
  DependencyTimeout:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: 'The service timed out trying to fulfill the request, and the client should try the call again.'
  MountTargetNotFound:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if there is no mount target with the specified ID found in the caller's account.
  DeleteTagsRequest:
    type: object
    required:
      - TagKeys
    example:
      FileSystemId: fs-01234567
      TagKeys:
        - Name
    properties:
      TagKeys:
        $ref: '#/definitions/TagKeys'
        description: List of tag keys to delete.
    description: <p/>
  DescribeFileSystemsResponse:
    type: object
    example:
      FileSystems:
        - CreationTime: '1481841524.0'
          CreationToken: tokenstring
          FileSystemId: fs-01234567
          LifeCycleState: available
          Name: MyFileSystem
          NumberOfMountTargets: 1
          OwnerId: 012345678912
          PerformanceMode: generalPurpose
          SizeInBytes:
            Value: 6144
    properties:
      Marker:
        $ref: '#/definitions/Marker'
        description: Present if provided by caller in the request (String).
      FileSystems:
        $ref: '#/definitions/FileSystemDescriptions'
        description: Array of file system descriptions.
      NextMarker:
        $ref: '#/definitions/Marker'
        description: Present if there are more file systems than returned in the response (String). You can use the <code>NextMarker</code> in the subsequent request to fetch the descriptions.
  DescribeFileSystemsRequest:
    type: object
    example: {}
    properties: {}
    description: <p/>
  DescribeMountTargetSecurityGroupsResponse:
    type: object
    required:
      - SecurityGroups
    example:
      SecurityGroups:
        - sg-fghi4567
    properties:
      SecurityGroups:
        $ref: '#/definitions/SecurityGroups'
        description: Array of security groups.
  DescribeMountTargetSecurityGroupsRequest:
    type: object
    example:
      MountTargetId: fsmt-12340abc
    properties: {}
    description: <p/>
  IncorrectMountTargetState:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: Returned if the mount target is not in the correct state for the operation.
  DescribeMountTargetsResponse:
    type: object
    example:
      MountTargets:
        - FileSystemId: fs-01234567
          IpAddress: 192.0.0.2
          LifeCycleState: available
          MountTargetId: fsmt-12340abc
          NetworkInterfaceId: eni-cedf6789
          OwnerId: 012345678912
          SubnetId: subnet-1234abcd
    properties:
      Marker:
        $ref: '#/definitions/Marker'
        description: 'If the request included the <code>Marker</code>, the response returns that value in this field.'
      MountTargets:
        $ref: '#/definitions/MountTargetDescriptions'
        description: Returns the file system's mount targets as an array of <code>MountTargetDescription</code> objects.
      NextMarker:
        $ref: '#/definitions/Marker'
        description: 'If a value is present, there are more mount targets to return. In a subsequent request, you can provide <code>Marker</code> in your request with this value to retrieve the next set of mount targets.'
    description: <p/>
  DescribeMountTargetsRequest:
    type: object
    example:
      FileSystemId: fs-01234567
    properties: {}
    description: <p/>
  DescribeTagsResponse:
    type: object
    required:
      - Tags
    example:
      Tags:
        - Key: Name
          Value: MyFileSystem
    properties:
      Marker:
        $ref: '#/definitions/Marker'
        description: 'If the request included a <code>Marker</code>, the response returns that value in this field.'
      Tags:
        $ref: '#/definitions/Tags'
        description: 'Returns tags associated with the file system as an array of <code>Tag</code> objects. '
      NextMarker:
        $ref: '#/definitions/Marker'
        description: 'If a value is present, there are more tags to return. In a subsequent request, you can provide the value of <code>NextMarker</code> as the value of the <code>Marker</code> parameter in your next request to retrieve the next set of tags.'
    description: <p/>
  DescribeTagsRequest:
    type: object
    example:
      FileSystemId: fs-01234567
    properties: {}
    description: <p/>
  ModifyMountTargetSecurityGroupsRequest:
    type: object
    example:
      MountTargetId: fsmt-12340abc
      SecurityGroups:
        - sg-abcd1234
    properties:
      SecurityGroups:
        $ref: '#/definitions/SecurityGroups'
        description: Array of up to five VPC security group IDs.
    description: <p/>
  UpdateFileSystemRequest:
    type: object
    properties:
      ThroughputMode:
        $ref: '#/definitions/ThroughputMode'
        description: '(Optional) The throughput mode that you want your file system to use. If you''re not updating your throughput mode, you don''t need to provide this value in your request.'
      ProvisionedThroughputInMibps:
        $ref: '#/definitions/ProvisionedThroughputInMibps'
        description: '(Optional) The amount of throughput, in MiB/s, that you want to provision for your file system. If you''re not updating the amount of provisioned throughput for your file system, you don''t need to provide this value in your request.'
  TooManyRequests:
    type: object
    required:
      - ErrorCode
    properties:
      ErrorCode:
        $ref: '#/definitions/ErrorCode'
      Message:
        $ref: '#/definitions/ErrorMessage'
    description: 'Returned if you don’t wait at least 24 hours before changing the throughput mode, or decreasing the Provisioned Throughput value.'
  AwsAccountId:
    type: string
  ErrorCode:
    type: string
    minLength: 1
  ErrorMessage:
    type: string
  CreationToken:
    type: string
    minLength: 1
    maxLength: 64
  PerformanceMode:
    type: string
    enum:
      - generalPurpose
      - maxIO
  Encrypted:
    type: boolean
  KmsKeyId:
    type: string
    minLength: 1
    maxLength: 2048
  ThroughputMode:
    type: string
    enum:
      - bursting
      - provisioned
  ProvisionedThroughputInMibps:
    type: number
    format: double
    minimum: 0
  FileSystemId:
    type: string
  SubnetId:
    type: string
  IpAddress:
    type: string
  SecurityGroups:
    type: array
    items:
      $ref: '#/definitions/SecurityGroup'
    maxItems: 5
  Tags:
    type: array
    items:
      $ref: '#/definitions/Tag'
  MountTargetId:
    type: string
  TagKeys:
    type: array
    items:
      $ref: '#/definitions/TagKey'
  MaxItems:
    type: integer
    minimum: 1
  Marker:
    type: string
  FileSystemDescriptions:
    type: array
    items:
      $ref: '#/definitions/FileSystemDescription'
  MountTargetDescriptions:
    type: array
    items:
      $ref: '#/definitions/MountTargetDescription'
  Timestamp:
    type: string
    format: date-time
  LifeCycleState:
    type: string
    enum:
      - creating
      - available
      - updating
      - deleting
      - deleted
  TagValue:
    type: string
    maxLength: 256
  MountTargetCount:
    type: integer
    minimum: 0
  FileSystemSize:
    type: object
    required:
      - Value
    properties:
      Value:
        $ref: '#/definitions/FileSystemSizeValue'
        description: Latest known metered size (in bytes) of data stored in the file system.
      Timestamp:
        $ref: '#/definitions/Timestamp'
        description: 'Time at which the size of data, returned in the <code>Value</code> field, was determined. The value is the integer number of seconds since 1970-01-01T00:00:00Z.'
    description: 'Latest known metered size (in bytes) of data stored in the file system, in its <code>Value</code> field, and the time at which that size was determined in its <code>Timestamp</code> field. Note that the value does not represent the size of a consistent snapshot of the file system, but it is eventually consistent when there are no writes to the file system. That is, the value will represent the actual size only if the file system is not modified for a period longer than a couple of hours. Otherwise, the value is not necessarily the exact size the file system was at any instant in time.'
  FileSystemSizeValue:
    type: integer
    minimum: 0
  NetworkInterfaceId:
    type: string
  SecurityGroup:
    type: string
  TagKey:
    type: string
    minLength: 1
    maxLength: 128
  Tag:
    type: object
    required:
      - Key
      - Value
    properties:
      Key:
        $ref: '#/definitions/TagKey'
        description: 'Tag key (String). The key can''t start with <code>aws:</code>.'
      Value:
        $ref: '#/definitions/TagValue'
        description: Value of the tag key.
    description: 'A tag is a key-value pair. Allowed characters: letters, whitespace, and numbers, representable in UTF-8, and the following characters:<code> + - = . _ : /</code> '
