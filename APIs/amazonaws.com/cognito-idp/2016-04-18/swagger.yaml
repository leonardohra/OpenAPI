swagger: '2.0'
info:
  version: '2016-04-18'
  x-release: v4
  title: Amazon Cognito Identity Provider
  description: '<p>Using the Amazon Cognito User Pools API, you can create a user pool to manage directories and users. You can authenticate a user to obtain tokens related to user identity and access policies.</p> <p>This API reference provides information about user pools in Amazon Cognito User Pools.</p> <p>For more information, see the Amazon Cognito Documentation.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: cognito-idp
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-idp-2016-04-18.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/cognito-idp/'
host: cognito-idp.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
parameters:
  Action:
    name: Action
    in: header
    type: string
    required: true
  Version:
    name: Version
    in: header
    type: string
    required: true
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  /:
    post:
      operationId: AddCustomAttributes
      description: Adds additional user attributes to the user pool schema.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AddCustomAttributesResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserImportInProgressException
          schema:
            $ref: '#/definitions/UserImportInProgressException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AddCustomAttributesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminAddUserToGroup':
    post:
      operationId: AdminAddUserToGroup
      description: <p>Adds the specified user to the specified group.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminAddUserToGroupRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminConfirmSignUp':
    post:
      operationId: AdminConfirmSignUp
      description: <p>Confirms user registration as an admin without using a confirmation code. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminConfirmSignUpResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: TooManyFailedAttemptsException
          schema:
            $ref: '#/definitions/TooManyFailedAttemptsException'
        '486':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '488':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '489':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '490':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminConfirmSignUpRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminCreateUser':
    post:
      operationId: AdminCreateUser
      description: '<p>Creates a new user in the specified user pool.</p> <p>If <code>MessageAction</code> is not set, the default is to send a welcome message via email or phone (SMS).</p> <note> <p>This message is based on a template that you configured in your call to or . This template includes your custom sign-up instructions and placeholders for user name and temporary password.</p> </note> <p>Alternatively, you can call AdminCreateUser with “SUPPRESS” for the <code>MessageAction</code> parameter, and Amazon Cognito will not send any email. </p> <p>In either case, the user will be in the <code>FORCE_CHANGE_PASSWORD</code> state until they sign in and change their password.</p> <p>AdminCreateUser requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminCreateUserResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '483':
          description: UsernameExistsException
          schema:
            $ref: '#/definitions/UsernameExistsException'
        '484':
          description: InvalidPasswordException
          schema:
            $ref: '#/definitions/InvalidPasswordException'
        '485':
          description: CodeDeliveryFailureException
          schema:
            $ref: '#/definitions/CodeDeliveryFailureException'
        '486':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '487':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '488':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '489':
          description: PreconditionNotMetException
          schema:
            $ref: '#/definitions/PreconditionNotMetException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '493':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '494':
          description: UnsupportedUserStateException
          schema:
            $ref: '#/definitions/UnsupportedUserStateException'
        '495':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminCreateUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminDeleteUser':
    post:
      operationId: AdminDeleteUser
      description: <p>Deletes a user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminDeleteUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminDeleteUserAttributes':
    post:
      operationId: AdminDeleteUserAttributes
      description: <p>Deletes the user attributes in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminDeleteUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminDeleteUserAttributesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminDisableProviderForUser':
    post:
      operationId: AdminDisableProviderForUser
      description: '<p>Disables the user from signing in with the specified external (SAML or social) identity provider. If the user to disable is a Cognito User Pools native username + password user, they are not permitted to use their password to sign-in. If the user to disable is a linked external IdP user, any link between that user and an existing user is removed. The next time the external user (no longer attached to the previously linked <code>DestinationUser</code>) signs in, they must create a new user account. See .</p> <p>This action is enabled only for admin access and requires developer credentials.</p> <p>The <code>ProviderName</code> must match the value specified when creating an IdP for the pool. </p> <p>To disable a native username + password user, the <code>ProviderName</code> value must be <code>Cognito</code> and the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code>, with the <code>ProviderAttributeValue</code> being the name that is used in the user pool for the user.</p> <p>The <code>ProviderAttributeName</code> must always be <code>Cognito_Subject</code> for social identity providers. The <code>ProviderAttributeValue</code> must always be the exact subject that was used when the user was originally linked as a source user.</p> <p>For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign-in, the <code>ProviderAttributeName</code> and <code>ProviderAttributeValue</code> must be the same values that were used for the <code>SourceUser</code> when the identities were originally linked in the call. (If the linking was done with <code>ProviderAttributeName</code> set to <code>Cognito_Subject</code>, the same applies here). However, if the user has already signed in, the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code> and <code>ProviderAttributeValue</code> must be the subject of the SAML assertion.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminDisableProviderForUserResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: AliasExistsException
          schema:
            $ref: '#/definitions/AliasExistsException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminDisableProviderForUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminDisableUser':
    post:
      operationId: AdminDisableUser
      description: <p>Disables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminDisableUserResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminDisableUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminEnableUser':
    post:
      operationId: AdminEnableUser
      description: <p>Enables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminEnableUserResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminEnableUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminForgetDevice':
    post:
      operationId: AdminForgetDevice
      description: '<p>Forgets the device, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminForgetDeviceRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminGetDevice':
    post:
      operationId: AdminGetDevice
      description: '<p>Gets the device, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminGetDeviceResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '485':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminGetDeviceRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminGetUser':
    post:
      operationId: AdminGetUser
      description: <p>Gets the specified user by user name in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminGetUserResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminGetUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminInitiateAuth':
    post:
      operationId: AdminInitiateAuth
      description: '<p>Initiates the authentication flow, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminInitiateAuthResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '485':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '486':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '487':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '488':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '489':
          description: MFAMethodNotFoundException
          schema:
            $ref: '#/definitions/MFAMethodNotFoundException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '493':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '494':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminInitiateAuthRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminLinkProviderForUser':
    post:
      operationId: AdminLinkProviderForUser
      description: '<p>Links an existing user account in a user pool (<code>DestinationUser</code>) to an identity from an external identity provider (<code>SourceUser</code>) based on a specified attribute name and value from the external identity provider. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in, so that the federated user identity can be used to sign in as the existing user account. </p> <p> For example, if there is an existing user with a username and password, this API links that user to a federated user identity, so that when the federated user identity is used, the user signs in as the existing user account. </p> <important> <p>Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external identity providers and provider attributes that have been trusted by the application owner.</p> </important> <p>See also .</p> <p>This action is enabled only for admin access and requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminLinkProviderForUserResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: AliasExistsException
          schema:
            $ref: '#/definitions/AliasExistsException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminLinkProviderForUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminListDevices':
    post:
      operationId: AdminListDevices
      description: '<p>Lists devices, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminListDevicesResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '485':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminListDevicesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminListGroupsForUser':
    post:
      operationId: AdminListGroupsForUser
      description: <p>Lists the groups that the user belongs to.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminListGroupsForUserResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminListGroupsForUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminListUserAuthEvents':
    post:
      operationId: AdminListUserAuthEvents
      description: Lists a history of user activity and any risks detected as part of Amazon Cognito advanced security.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminListUserAuthEventsResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: UserPoolAddOnNotEnabledException
          schema:
            $ref: '#/definitions/UserPoolAddOnNotEnabledException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminListUserAuthEventsRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminRemoveUserFromGroup':
    post:
      operationId: AdminRemoveUserFromGroup
      description: <p>Removes the specified user from the specified group.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminRemoveUserFromGroupRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminResetUserPassword':
    post:
      operationId: AdminResetUserPassword
      description: '<p>Resets the specified user''s password in a user pool as an administrator. Works on any user.</p> <p>When a developer calls this API, the current password is invalidated, so it must be changed. If a user tries to sign in after the API is called, the app will get a PasswordResetRequiredException exception back and should direct the user down the flow to reset the password, which is the same as the forgot password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminResetUserPasswordResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '487':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '488':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '489':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '490':
          description: InvalidEmailRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidEmailRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminResetUserPasswordRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminRespondToAuthChallenge':
    post:
      operationId: AdminRespondToAuthChallenge
      description: '<p>Responds to an authentication challenge, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminRespondToAuthChallengeResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: CodeMismatchException
          schema:
            $ref: '#/definitions/CodeMismatchException'
        '484':
          description: ExpiredCodeException
          schema:
            $ref: '#/definitions/ExpiredCodeException'
        '485':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '486':
          description: InvalidPasswordException
          schema:
            $ref: '#/definitions/InvalidPasswordException'
        '487':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '488':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '489':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '490':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '491':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '492':
          description: MFAMethodNotFoundException
          schema:
            $ref: '#/definitions/MFAMethodNotFoundException'
        '493':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '494':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '495':
          description: AliasExistsException
          schema:
            $ref: '#/definitions/AliasExistsException'
        '496':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '497':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '498':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '499':
          description: SoftwareTokenMFANotFoundException
          schema:
            $ref: '#/definitions/SoftwareTokenMFANotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminRespondToAuthChallengeRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminSetUserMFAPreference':
    post:
      operationId: AdminSetUserMFAPreference
      description: Sets the user's multi-factor authentication (MFA) preference.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminSetUserMFAPreferenceResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminSetUserMFAPreferenceRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminSetUserSettings':
    post:
      operationId: AdminSetUserSettings
      description: <p>Sets all the user settings for a specified user name. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminSetUserSettingsResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminSetUserSettingsRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminUpdateAuthEventFeedback':
    post:
      operationId: AdminUpdateAuthEventFeedback
      description: Provides feedback for an authentication event as to whether it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminUpdateAuthEventFeedbackResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: UserPoolAddOnNotEnabledException
          schema:
            $ref: '#/definitions/UserPoolAddOnNotEnabledException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminUpdateAuthEventFeedbackRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminUpdateDeviceStatus':
    post:
      operationId: AdminUpdateDeviceStatus
      description: <p>Updates the device status as an administrator.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminUpdateDeviceStatusResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminUpdateDeviceStatusRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminUpdateUserAttributes':
    post:
      operationId: AdminUpdateUserAttributes
      description: '<p>Updates the specified user''s attributes, including developer attributes, as an administrator. Works on any user.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>In addition to updating user attributes, this API can also be used to mark phone and email as verified.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminUpdateUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '484':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '485':
          description: AliasExistsException
          schema:
            $ref: '#/definitions/AliasExistsException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '487':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '488':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '489':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminUpdateUserAttributesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AdminUserGlobalSignOut':
    post:
      operationId: AdminUserGlobalSignOut
      description: '<p>Signs out users from all devices, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AdminUserGlobalSignOutResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AdminUserGlobalSignOutRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#AssociateSoftwareToken':
    post:
      operationId: AssociateSoftwareToken
      description: 'Returns a unique generated shared secret key code for the user account. The request takes an access token or a session string, but not both.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AssociateSoftwareTokenResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '484':
          description: SoftwareTokenMFANotFoundException
          schema:
            $ref: '#/definitions/SoftwareTokenMFANotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AssociateSoftwareTokenRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ChangePassword':
    post:
      operationId: ChangePassword
      description: Changes the password for a specified user in a user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ChangePasswordResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: InvalidPasswordException
          schema:
            $ref: '#/definitions/InvalidPasswordException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '485':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '486':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '487':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '488':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '489':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ChangePasswordRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ConfirmDevice':
    post:
      operationId: ConfirmDevice
      description: Confirms tracking of the device. This API call is the call that begins device tracking.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ConfirmDeviceResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: InvalidPasswordException
          schema:
            $ref: '#/definitions/InvalidPasswordException'
        '484':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '485':
          description: UsernameExistsException
          schema:
            $ref: '#/definitions/UsernameExistsException'
        '486':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '487':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '488':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '489':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '490':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '491':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConfirmDeviceRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ConfirmForgotPassword':
    post:
      operationId: ConfirmForgotPassword
      description: Allows a user to enter a confirmation code to reset a forgotten password.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ConfirmForgotPasswordResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '482':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '483':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '484':
          description: InvalidPasswordException
          schema:
            $ref: '#/definitions/InvalidPasswordException'
        '485':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '486':
          description: CodeMismatchException
          schema:
            $ref: '#/definitions/CodeMismatchException'
        '487':
          description: ExpiredCodeException
          schema:
            $ref: '#/definitions/ExpiredCodeException'
        '488':
          description: TooManyFailedAttemptsException
          schema:
            $ref: '#/definitions/TooManyFailedAttemptsException'
        '489':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '490':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '491':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '492':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '493':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '494':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConfirmForgotPasswordRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ConfirmSignUp':
    post:
      operationId: ConfirmSignUp
      description: Confirms registration of a user and handles the existing alias from a previous user.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ConfirmSignUpResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: TooManyFailedAttemptsException
          schema:
            $ref: '#/definitions/TooManyFailedAttemptsException'
        '486':
          description: CodeMismatchException
          schema:
            $ref: '#/definitions/CodeMismatchException'
        '487':
          description: ExpiredCodeException
          schema:
            $ref: '#/definitions/ExpiredCodeException'
        '488':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '489':
          description: AliasExistsException
          schema:
            $ref: '#/definitions/AliasExistsException'
        '490':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '491':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '492':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '493':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConfirmSignUpRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateGroup':
    post:
      operationId: CreateGroup
      description: <p>Creates a new group in the specified user pool.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateGroupResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: GroupExistsException
          schema:
            $ref: '#/definitions/GroupExistsException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateGroupRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateIdentityProvider':
    post:
      operationId: CreateIdentityProvider
      description: Creates an identity provider for a user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateIdentityProviderResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: DuplicateProviderException
          schema:
            $ref: '#/definitions/DuplicateProviderException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '485':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateIdentityProviderRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateResourceServer':
    post:
      operationId: CreateResourceServer
      description: Creates a new OAuth2.0 resource server and defines custom scopes in it.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateResourceServerResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateResourceServerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateUserImportJob':
    post:
      operationId: CreateUserImportJob
      description: Creates the user import job.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: PreconditionNotMetException
          schema:
            $ref: '#/definitions/PreconditionNotMetException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateUserImportJobRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateUserPool':
    post:
      operationId: CreateUserPool
      description: Creates a new Amazon Cognito user pool and sets the password policy for the pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateUserPoolResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '484':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '485':
          description: InvalidEmailRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidEmailRoleAccessPolicyException'
        '486':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '487':
          description: UserPoolTaggingException
          schema:
            $ref: '#/definitions/UserPoolTaggingException'
        '488':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateUserPoolRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateUserPoolClient':
    post:
      operationId: CreateUserPoolClient
      description: Creates the user pool client.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateUserPoolClientResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: ScopeDoesNotExistException
          schema:
            $ref: '#/definitions/ScopeDoesNotExistException'
        '486':
          description: InvalidOAuthFlowException
          schema:
            $ref: '#/definitions/InvalidOAuthFlowException'
        '487':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateUserPoolClientRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateUserPoolDomain':
    post:
      operationId: CreateUserPoolDomain
      description: Creates a new domain for a user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateUserPoolDomainResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateUserPoolDomainRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteGroup':
    post:
      operationId: DeleteGroup
      description: <p>Deletes a group. Currently only groups with no members can be deleted.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteGroupRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteIdentityProvider':
    post:
      operationId: DeleteIdentityProvider
      description: Deletes an identity provider for a user pool.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: UnsupportedIdentityProviderException
          schema:
            $ref: '#/definitions/UnsupportedIdentityProviderException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteIdentityProviderRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteResourceServer':
    post:
      operationId: DeleteResourceServer
      description: Deletes a resource server.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteResourceServerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteUser':
    post:
      operationId: DeleteUser
      description: Allows a user to delete himself or herself.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '485':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '486':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '487':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteUserAttributes':
    post:
      operationId: DeleteUserAttributes
      description: Deletes the attributes for a user.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '485':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '486':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '487':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteUserAttributesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteUserPool':
    post:
      operationId: DeleteUserPool
      description: Deletes the specified Amazon Cognito user pool.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserImportInProgressException
          schema:
            $ref: '#/definitions/UserImportInProgressException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteUserPoolRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteUserPoolClient':
    post:
      operationId: DeleteUserPoolClient
      description: Allows the developer to delete the user pool client.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteUserPoolClientRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteUserPoolDomain':
    post:
      operationId: DeleteUserPoolDomain
      description: Deletes a domain for a user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteUserPoolDomainResponse'
        '480':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteUserPoolDomainRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DescribeIdentityProvider':
    post:
      operationId: DescribeIdentityProvider
      description: Gets information about a specific identity provider.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeIdentityProviderResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeIdentityProviderRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DescribeResourceServer':
    post:
      operationId: DescribeResourceServer
      description: Describes a resource server.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeResourceServerResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeResourceServerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DescribeRiskConfiguration':
    post:
      operationId: DescribeRiskConfiguration
      description: Describes the risk configuration.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeRiskConfigurationResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserPoolAddOnNotEnabledException
          schema:
            $ref: '#/definitions/UserPoolAddOnNotEnabledException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeRiskConfigurationRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DescribeUserImportJob':
    post:
      operationId: DescribeUserImportJob
      description: Describes the user import job.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeUserImportJobRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DescribeUserPool':
    post:
      operationId: DescribeUserPool
      description: Returns the configuration information and metadata of the specified user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeUserPoolResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserPoolTaggingException
          schema:
            $ref: '#/definitions/UserPoolTaggingException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeUserPoolRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DescribeUserPoolClient':
    post:
      operationId: DescribeUserPoolClient
      description: Client method for returning the configuration information and metadata of the specified user pool app client.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeUserPoolClientResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeUserPoolClientRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DescribeUserPoolDomain':
    post:
      operationId: DescribeUserPoolDomain
      description: Gets information about a domain.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeUserPoolDomainResponse'
        '480':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeUserPoolDomainRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ForgetDevice':
    post:
      operationId: ForgetDevice
      description: Forgets the specified device.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '485':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ForgetDeviceRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ForgotPassword':
    post:
      operationId: ForgotPassword
      description: 'Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user''s password. For the <code>Username</code> parameter, you can use the username or user alias. If a verified phone number exists for the user, the confirmation code is sent to the phone number. Otherwise, if a verified email exists, the confirmation code is sent to the email. If neither a verified phone number nor a verified email exists, <code>InvalidParameterException</code> is thrown. To use the confirmation code for resetting the password, call .'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ForgotPasswordResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '487':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '488':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '489':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '490':
          description: InvalidEmailRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidEmailRoleAccessPolicyException'
        '491':
          description: CodeDeliveryFailureException
          schema:
            $ref: '#/definitions/CodeDeliveryFailureException'
        '492':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '493':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '494':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ForgotPasswordRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetCSVHeader':
    post:
      operationId: GetCSVHeader
      description: Gets the header information for the .csv file to be used as input for the user import job.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCSVHeaderResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCSVHeaderRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetDevice':
    post:
      operationId: GetDevice
      description: Gets the device.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDeviceResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '485':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDeviceRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetGroup':
    post:
      operationId: GetGroup
      description: <p>Gets a group.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetGroupResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetGroupRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetIdentityProviderByIdentifier':
    post:
      operationId: GetIdentityProviderByIdentifier
      description: Gets the specified identity provider.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIdentityProviderByIdentifierResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetIdentityProviderByIdentifierRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetSigningCertificate':
    post:
      operationId: GetSigningCertificate
      description: 'This method takes a user pool ID, and returns the signing certificate.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetSigningCertificateResponse'
        '480':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetSigningCertificateRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetUICustomization':
    post:
      operationId: GetUICustomization
      description: 'Gets the UI Customization information for a particular app client''s app UI, if there is something set. If nothing is set for the particular client, but there is an existing pool level customization (app <code>clientId</code> will be <code>ALL</code>), then that is returned. If nothing is present, then an empty shape is returned.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetUICustomizationResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetUICustomizationRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetUser':
    post:
      operationId: GetUser
      description: Gets the user attributes and metadata for a user.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetUserResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '485':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '486':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '487':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetUserAttributeVerificationCode':
    post:
      operationId: GetUserAttributeVerificationCode
      description: Gets the user attribute verification code for the specified attribute name.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetUserAttributeVerificationCodeResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '485':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '486':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '487':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '488':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '489':
          description: InvalidEmailRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidEmailRoleAccessPolicyException'
        '490':
          description: CodeDeliveryFailureException
          schema:
            $ref: '#/definitions/CodeDeliveryFailureException'
        '491':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '492':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '493':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '494':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '495':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetUserAttributeVerificationCodeRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetUserPoolMfaConfig':
    post:
      operationId: GetUserPoolMfaConfig
      description: Gets the user pool multi-factor authentication (MFA) configuration.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetUserPoolMfaConfigResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetUserPoolMfaConfigRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GlobalSignOut':
    post:
      operationId: GlobalSignOut
      description: Signs out users from all devices.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GlobalSignOutResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '485':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GlobalSignOutRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#InitiateAuth':
    post:
      operationId: InitiateAuth
      description: Initiates the authentication flow.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/InitiateAuthResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '485':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '486':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '487':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '488':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '489':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '490':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '491':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/InitiateAuthRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListDevices':
    post:
      operationId: ListDevices
      description: Lists the devices.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListDevicesResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '484':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '485':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListDevicesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListGroups':
    post:
      operationId: ListGroups
      description: <p>Lists the groups associated with a user pool.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListGroupsResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListGroupsRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListIdentityProviders':
    post:
      operationId: ListIdentityProviders
      description: Lists information about all identity providers for a user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListIdentityProvidersResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListIdentityProvidersRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListResourceServers':
    post:
      operationId: ListResourceServers
      description: Lists the resource servers for a user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListResourceServersResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListResourceServersRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListUserImportJobs':
    post:
      operationId: ListUserImportJobs
      description: Lists the user import jobs.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListUserImportJobsResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListUserImportJobsRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListUserPoolClients':
    post:
      operationId: ListUserPoolClients
      description: Lists the clients that have been created for the specified user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListUserPoolClientsResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListUserPoolClientsRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListUserPools':
    post:
      operationId: ListUserPools
      description: Lists the user pools associated with an AWS account.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListUserPoolsResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListUserPoolsRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListUsers':
    post:
      operationId: ListUsers
      description: Lists the users in the Amazon Cognito user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListUsersResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListUsersRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ListUsersInGroup':
    post:
      operationId: ListUsersInGroup
      description: <p>Lists the users in the specified group.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListUsersInGroupResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListUsersInGroupRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ResendConfirmationCode':
    post:
      operationId: ResendConfirmationCode
      description: Resends the confirmation (for confirmation of registration) to a specific user in the user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ResendConfirmationCodeResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '486':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '487':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '488':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '489':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '490':
          description: InvalidEmailRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidEmailRoleAccessPolicyException'
        '491':
          description: CodeDeliveryFailureException
          schema:
            $ref: '#/definitions/CodeDeliveryFailureException'
        '492':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '493':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ResendConfirmationCodeRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#RespondToAuthChallenge':
    post:
      operationId: RespondToAuthChallenge
      description: Responds to the authentication challenge.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RespondToAuthChallengeResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: CodeMismatchException
          schema:
            $ref: '#/definitions/CodeMismatchException'
        '484':
          description: ExpiredCodeException
          schema:
            $ref: '#/definitions/ExpiredCodeException'
        '485':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '486':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '487':
          description: InvalidPasswordException
          schema:
            $ref: '#/definitions/InvalidPasswordException'
        '488':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '489':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '490':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '491':
          description: MFAMethodNotFoundException
          schema:
            $ref: '#/definitions/MFAMethodNotFoundException'
        '492':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '493':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '494':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '495':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '496':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '497':
          description: AliasExistsException
          schema:
            $ref: '#/definitions/AliasExistsException'
        '498':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '499':
          description: SoftwareTokenMFANotFoundException
          schema:
            $ref: '#/definitions/SoftwareTokenMFANotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RespondToAuthChallengeRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#SetRiskConfiguration':
    post:
      operationId: SetRiskConfiguration
      description: '<p>Configures actions on detected risks. To delete the risk configuration for <code>UserPoolId</code> or <code>ClientId</code>, pass null values for all four configuration types.</p> <p>To enable Amazon Cognito advanced security features, update the user pool to include the <code>UserPoolAddOns</code> key<code>AdvancedSecurityMode</code>.</p> <p>See .</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SetRiskConfigurationResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserPoolAddOnNotEnabledException
          schema:
            $ref: '#/definitions/UserPoolAddOnNotEnabledException'
        '485':
          description: CodeDeliveryFailureException
          schema:
            $ref: '#/definitions/CodeDeliveryFailureException'
        '486':
          description: InvalidEmailRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidEmailRoleAccessPolicyException'
        '487':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SetRiskConfigurationRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#SetUICustomization':
    post:
      operationId: SetUICustomization
      description: '<p>Sets the UI customization information for a user pool''s built-in app UI.</p> <p>You can specify app UI customization settings for a single client (with a specific <code>clientId</code>) or for all clients (by setting the <code>clientId</code> to <code>ALL</code>). If you specify <code>ALL</code>, the default configuration will be used for every client that has no UI customization set previously. If you specify UI customization settings for a particular client, it will no longer fall back to the <code>ALL</code> configuration. </p> <note> <p>To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app''s pages, and the service will throw an error.</p> </note>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SetUICustomizationResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SetUICustomizationRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#SetUserMFAPreference':
    post:
      operationId: SetUserMFAPreference
      description: Set the user's multi-factor authentication (MFA) method preference.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SetUserMFAPreferenceResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SetUserMFAPreferenceRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#SetUserPoolMfaConfig':
    post:
      operationId: SetUserPoolMfaConfig
      description: Set the user pool MFA configuration.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SetUserPoolMfaConfigResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '484':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '485':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SetUserPoolMfaConfigRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#SetUserSettings':
    post:
      operationId: SetUserSettings
      description: 'Sets the user settings like multi-factor authentication (MFA). If MFA is to be removed for a particular attribute pass the attribute with code delivery as null. If null list is passed, all MFA options are removed.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SetUserSettingsResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SetUserSettingsRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#SignUp':
    post:
      operationId: SignUp
      description: 'Registers the user in the specified user pool and creates a user name, password, and user attributes.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SignUpResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: InvalidPasswordException
          schema:
            $ref: '#/definitions/InvalidPasswordException'
        '486':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '487':
          description: UsernameExistsException
          schema:
            $ref: '#/definitions/UsernameExistsException'
        '488':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '489':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: InvalidEmailRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidEmailRoleAccessPolicyException'
        '493':
          description: CodeDeliveryFailureException
          schema:
            $ref: '#/definitions/CodeDeliveryFailureException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SignUpRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartUserImportJob':
    post:
      operationId: StartUserImportJob
      description: Starts the user import.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '484':
          description: PreconditionNotMetException
          schema:
            $ref: '#/definitions/PreconditionNotMetException'
        '485':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartUserImportJobRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StopUserImportJob':
    post:
      operationId: StopUserImportJob
      description: Stops the user import job.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StopUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '484':
          description: PreconditionNotMetException
          schema:
            $ref: '#/definitions/PreconditionNotMetException'
        '485':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StopUserImportJobRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateAuthEventFeedback':
    post:
      operationId: UpdateAuthEventFeedback
      description: Provides the feedback for an authentication event whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateAuthEventFeedbackResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '485':
          description: UserPoolAddOnNotEnabledException
          schema:
            $ref: '#/definitions/UserPoolAddOnNotEnabledException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateAuthEventFeedbackRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateDeviceStatus':
    post:
      operationId: UpdateDeviceStatus
      description: Updates the device status.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDeviceStatusResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '484':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '485':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDeviceStatusRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateGroup':
    post:
      operationId: UpdateGroup
      description: <p>Updates the specified group with the specified attributes.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateGroupResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateGroupRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateIdentityProvider':
    post:
      operationId: UpdateIdentityProvider
      description: Updates identity provider information for a user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateIdentityProviderResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: UnsupportedIdentityProviderException
          schema:
            $ref: '#/definitions/UnsupportedIdentityProviderException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '485':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateIdentityProviderRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateResourceServer':
    post:
      operationId: UpdateResourceServer
      description: Updates the name and scopes of resource server. All other fields are read-only.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateResourceServerResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateResourceServerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateUserAttributes':
    post:
      operationId: UpdateUserAttributes
      description: Allows a user to update a specific attribute (one at a time).
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: CodeMismatchException
          schema:
            $ref: '#/definitions/CodeMismatchException'
        '483':
          description: ExpiredCodeException
          schema:
            $ref: '#/definitions/ExpiredCodeException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: UnexpectedLambdaException
          schema:
            $ref: '#/definitions/UnexpectedLambdaException'
        '486':
          description: UserLambdaValidationException
          schema:
            $ref: '#/definitions/UserLambdaValidationException'
        '487':
          description: InvalidLambdaResponseException
          schema:
            $ref: '#/definitions/InvalidLambdaResponseException'
        '488':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '489':
          description: AliasExistsException
          schema:
            $ref: '#/definitions/AliasExistsException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: InvalidEmailRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidEmailRoleAccessPolicyException'
        '493':
          description: CodeDeliveryFailureException
          schema:
            $ref: '#/definitions/CodeDeliveryFailureException'
        '494':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '495':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '496':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '497':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateUserAttributesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateUserPool':
    post:
      operationId: UpdateUserPool
      description: 'Updates the specified user pool with the specified attributes. If you don''t provide a value for an attribute, it will be set to the default value. You can get a list of the current user pool settings with .'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateUserPoolResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: UserImportInProgressException
          schema:
            $ref: '#/definitions/UserImportInProgressException'
        '486':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '487':
          description: InvalidSmsRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidSmsRoleAccessPolicyException'
        '488':
          description: InvalidSmsRoleTrustRelationshipException
          schema:
            $ref: '#/definitions/InvalidSmsRoleTrustRelationshipException'
        '489':
          description: UserPoolTaggingException
          schema:
            $ref: '#/definitions/UserPoolTaggingException'
        '490':
          description: InvalidEmailRoleAccessPolicyException
          schema:
            $ref: '#/definitions/InvalidEmailRoleAccessPolicyException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateUserPoolRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateUserPoolClient':
    post:
      operationId: UpdateUserPoolClient
      description: 'Updates the specified user pool app client with the specified attributes. If you don''t provide a value for an attribute, it will be set to the default value. You can get a list of the current user pool app client settings with .'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateUserPoolClientResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '483':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: ScopeDoesNotExistException
          schema:
            $ref: '#/definitions/ScopeDoesNotExistException'
        '486':
          description: InvalidOAuthFlowException
          schema:
            $ref: '#/definitions/InvalidOAuthFlowException'
        '487':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateUserPoolClientRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#VerifySoftwareToken':
    post:
      operationId: VerifySoftwareToken
      description: 'Use this API to register a user''s entered TOTP code and mark the user''s software token MFA status as "verified" if successful. The request takes an access token or a session string, but not both.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/VerifySoftwareTokenResponse'
        '480':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: InvalidUserPoolConfigurationException
          schema:
            $ref: '#/definitions/InvalidUserPoolConfigurationException'
        '483':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '485':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
        '489':
          description: EnableSoftwareTokenMFAException
          schema:
            $ref: '#/definitions/EnableSoftwareTokenMFAException'
        '490':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '491':
          description: SoftwareTokenMFANotFoundException
          schema:
            $ref: '#/definitions/SoftwareTokenMFANotFoundException'
        '492':
          description: CodeMismatchException
          schema:
            $ref: '#/definitions/CodeMismatchException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/VerifySoftwareTokenRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#VerifyUserAttribute':
    post:
      operationId: VerifyUserAttribute
      description: Verifies the specified user attributes in the user pool.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/VerifyUserAttributeResponse'
        '480':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          schema:
            $ref: '#/definitions/InvalidParameterException'
        '482':
          description: CodeMismatchException
          schema:
            $ref: '#/definitions/CodeMismatchException'
        '483':
          description: ExpiredCodeException
          schema:
            $ref: '#/definitions/ExpiredCodeException'
        '484':
          description: NotAuthorizedException
          schema:
            $ref: '#/definitions/NotAuthorizedException'
        '485':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '486':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '487':
          description: PasswordResetRequiredException
          schema:
            $ref: '#/definitions/PasswordResetRequiredException'
        '488':
          description: UserNotFoundException
          schema:
            $ref: '#/definitions/UserNotFoundException'
        '489':
          description: UserNotConfirmedException
          schema:
            $ref: '#/definitions/UserNotConfirmedException'
        '490':
          description: InternalErrorException
          schema:
            $ref: '#/definitions/InternalErrorException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/VerifyUserAttributeRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  AddCustomAttributesResponse:
    type: object
    properties: {}
    description: Represents the response from the server for the request to add custom attributes.
  AddCustomAttributesRequest:
    type: object
    required:
      - UserPoolId
      - CustomAttributes
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to add custom attributes.
      CustomAttributes:
        $ref: '#/definitions/CustomAttributesListType'
        description: 'An array of custom attributes, such as Mutable and Name.'
    description: Represents the request to add custom attributes.
  ResourceNotFoundException: {}
  InvalidParameterException: {}
  TooManyRequestsException: {}
  NotAuthorizedException: {}
  UserImportInProgressException: {}
  InternalErrorException: {}
  AdminAddUserToGroupRequest:
    type: object
    required:
      - UserPoolId
      - Username
      - GroupName
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The username for the user.
      GroupName:
        $ref: '#/definitions/GroupNameType'
        description: The group name.
  UserNotFoundException: {}
  AdminConfirmSignUpResponse:
    type: object
    properties: {}
    description: Represents the response from the server for the request to confirm registration.
  AdminConfirmSignUpRequest:
    type: object
    required:
      - UserPoolId
      - Username
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for which you want to confirm user registration.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name for which you want to confirm user registration.
    description: Represents the request to confirm user registration.
  UnexpectedLambdaException: {}
  UserLambdaValidationException: {}
  TooManyFailedAttemptsException: {}
  InvalidLambdaResponseException: {}
  LimitExceededException: {}
  AdminCreateUserResponse:
    type: object
    properties:
      User:
        $ref: '#/definitions/UserType'
        description: The newly created user.
    description: Represents the response from the server to the request to create the user.
  AdminCreateUserRequest:
    type: object
    required:
      - UserPoolId
      - Username
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where the user will be created.
      Username:
        $ref: '#/definitions/UsernameType'
        description: 'The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.'
      UserAttributes:
        $ref: '#/definitions/AttributeListType'
        description: '<p>An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than <code>Username</code>. However, any attributes that you specify as required (in or in the <b>Attributes</b> tab of the console) must be supplied either by you (in your call to <code>AdminCreateUser</code>) or by the user (when he or she signs up in response to your welcome message).</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>To send a message inviting the user to sign up, you must specify the user''s email address or phone number. This can be done in your call to AdminCreateUser or in the <b>Users</b> tab of the Amazon Cognito console for managing your user pools.</p> <p>In your call to <code>AdminCreateUser</code>, you can set the <code>email_verified</code> attribute to <code>True</code>, and you can set the <code>phone_number_verified</code> attribute to <code>True</code>. (You can also do this by calling .)</p> <ul> <li> <p> <b>email</b>: The email address of the user to whom the message that contains the code and username will be sent. Required if the <code>email_verified</code> attribute is set to <code>True</code>, or if <code>"EMAIL"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p> </li> <li> <p> <b>phone_number</b>: The phone number of the user to whom the message that contains the code and username will be sent. Required if the <code>phone_number_verified</code> attribute is set to <code>True</code>, or if <code>"SMS"</code> is specified in the <code>DesiredDeliveryMediums</code> parameter.</p> </li> </ul>'
      ValidationData:
        $ref: '#/definitions/AttributeListType'
        description: '<p>The user''s validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user''s domain.</p> <p>To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process.</p> <p>The user''s validation data is not persisted.</p>'
      TemporaryPassword:
        $ref: '#/definitions/PasswordType'
        description: '<p>The user''s temporary password. This password must conform to the password policy that you specified when you created the user pool.</p> <p>The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins.</p> <p>This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you.</p> <p>The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>"RESEND"</code> for the <code>MessageAction</code> parameter.</p>'
      ForceAliasCreation:
        $ref: '#/definitions/ForceAliasCreation'
        description: '<p>This parameter is only used if the <code>phone_number_verified</code> or <code>email_verified</code> attribute is set to <code>True</code>. Otherwise, it is ignored.</p> <p>If this parameter is set to <code>True</code> and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias.</p> <p>If this parameter is set to <code>False</code>, the API throws an <code>AliasExistsException</code> error if the alias already exists. The default value is <code>False</code>.</p>'
      MessageAction:
        $ref: '#/definitions/MessageActionType'
        description: Set to <code>"RESEND"</code> to resend the invitation message to a user that already exists and reset the expiration limit on the user's account. Set to <code>"SUPPRESS"</code> to suppress sending the message. Only one value can be specified.
      DesiredDeliveryMediums:
        $ref: '#/definitions/DeliveryMediumListType'
        description: Specify <code>"EMAIL"</code> if email will be used to send the welcome message. Specify <code>"SMS"</code> if the phone number will be used. The default value is <code>"SMS"</code>. More than one value can be specified.
    description: Represents the request to create a user in the specified user pool.
  UsernameExistsException: {}
  InvalidPasswordException: {}
  CodeDeliveryFailureException: {}
  PreconditionNotMetException: {}
  InvalidSmsRoleAccessPolicyException: {}
  InvalidSmsRoleTrustRelationshipException: {}
  UnsupportedUserStateException: {}
  AdminDeleteUserRequest:
    type: object
    required:
      - UserPoolId
      - Username
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to delete the user.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user you wish to delete.
    description: Represents the request to delete a user as an administrator.
  AdminDeleteUserAttributesResponse:
    type: object
    properties: {}
    description: Represents the response received from the server for a request to delete user attributes.
  AdminDeleteUserAttributesRequest:
    type: object
    required:
      - UserPoolId
      - Username
      - UserAttributeNames
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to delete user attributes.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user from which you would like to delete attributes.
      UserAttributeNames:
        $ref: '#/definitions/AttributeNameListType'
        description: '<p>An array of strings representing the user attribute names you wish to delete.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
    description: Represents the request to delete user attributes as an administrator.
  AdminDisableProviderForUserResponse:
    type: object
    properties: {}
  AdminDisableProviderForUserRequest:
    type: object
    required:
      - UserPoolId
      - User
    properties:
      UserPoolId:
        $ref: '#/definitions/StringType'
        description: The user pool ID for the user pool.
      User:
        $ref: '#/definitions/ProviderUserIdentifierType'
        description: The user to be disabled.
  AliasExistsException: {}
  AdminDisableUserResponse:
    type: object
    properties: {}
    description: Represents the response received from the server to disable the user as an administrator.
  AdminDisableUserRequest:
    type: object
    required:
      - UserPoolId
      - Username
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to disable the user.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user you wish to disable.
    description: Represents the request to disable any user as an administrator.
  AdminEnableUserResponse:
    type: object
    properties: {}
    description: Represents the response from the server for the request to enable a user as an administrator.
  AdminEnableUserRequest:
    type: object
    required:
      - UserPoolId
      - Username
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to enable the user.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user you wish to enable.
    description: Represents the request that enables the user as an administrator.
  AdminForgetDeviceRequest:
    type: object
    required:
      - UserPoolId
      - Username
      - DeviceKey
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name.
      DeviceKey:
        $ref: '#/definitions/DeviceKeyType'
        description: The device key.
    description: 'Sends the forgot device request, as an administrator.'
  InvalidUserPoolConfigurationException: {}
  AdminGetDeviceResponse:
    type: object
    required:
      - Device
    properties:
      Device:
        $ref: '#/definitions/DeviceType'
        description: The device.
    description: 'Gets the device response, as an administrator.'
  AdminGetDeviceRequest:
    type: object
    required:
      - DeviceKey
      - UserPoolId
      - Username
    properties:
      DeviceKey:
        $ref: '#/definitions/DeviceKeyType'
        description: The device key.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name.
    description: 'Represents the request to get the device, as an administrator.'
  AdminGetUserResponse:
    type: object
    required:
      - Username
    properties:
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user about whom you are receiving information.
      UserAttributes:
        $ref: '#/definitions/AttributeListType'
        description: An array of name-value pairs representing user attributes.
      UserCreateDate:
        $ref: '#/definitions/DateType'
        description: The date the user was created.
      UserLastModifiedDate:
        $ref: '#/definitions/DateType'
        description: The date the user was last modified.
      Enabled:
        $ref: '#/definitions/BooleanType'
        description: Indicates that the status is enabled.
      UserStatus:
        $ref: '#/definitions/UserStatusType'
        description: '<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>'
      MFAOptions:
        $ref: '#/definitions/MFAOptionListType'
        description: 'Specifies the options for MFA (e.g., email or phone number).'
      PreferredMfaSetting:
        $ref: '#/definitions/StringType'
        description: The user's preferred MFA setting.
      UserMFASettingList:
        $ref: '#/definitions/UserMFASettingListType'
        description: The list of the user's MFA settings.
    description: Represents the response from the server from the request to get the specified user as an administrator.
  AdminGetUserRequest:
    type: object
    required:
      - UserPoolId
      - Username
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to get information about the user.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user you wish to retrieve.
    description: Represents the request to get the specified user as an administrator.
  AdminInitiateAuthResponse:
    type: object
    properties:
      ChallengeName:
        $ref: '#/definitions/ChallengeNameType'
        description: '<p>The name of the challenge which you are responding to with this call. This is returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge.</p> <ul> <li> <p> <code>MFA_SETUP</code>: If MFA is required, users who do not have at least one of the MFA methods set up are presented with an <code>MFA_SETUP</code> challenge. The user must set up at least one MFA type to continue to authenticate.</p> </li> <li> <p> <code>SELECT_MFA_TYPE</code>: Selects the MFA type. Valid MFA options are <code>SMS_MFA</code> for text SMS MFA, and <code>SOFTWARE_TOKEN_MFA</code> for TOTP software token MFA.</p> </li> <li> <p> <code>SMS_MFA</code>: Next challenge is to supply an <code>SMS_MFA_CODE</code>, delivered via SMS.</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: Next challenge is to supply <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after the client-side SRP calculations.</p> </li> <li> <p> <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.</p> </li> <li> <p> <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.</p> </li> <li> <p> <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to <code>PASSWORD_VERIFIER</code>, but for devices only.</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: This is returned if you need to authenticate with <code>USERNAME</code> and <code>PASSWORD</code> directly. An app client must be enabled to use this flow.</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change their passwords after successful first login. This challenge should be passed with <code>NEW_PASSWORD</code> and any other required attributes.</p> </li> </ul>'
      Session:
        $ref: '#/definitions/SessionType'
        description: 'The session which should be passed both ways in challenge-response calls to the service. If <code>AdminInitiateAuth</code> or <code>AdminRespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>AdminRespondToAuthChallenge</code> API call.'
      ChallengeParameters:
        $ref: '#/definitions/ChallengeParametersType'
        description: '<p>The challenge parameters. These are returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (<code>AdminRespondToAuthChallenge</code>).</p> <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p> <p>The value of the <code>USER_ID_FOR_SRP</code> attribute will be the user''s actual username, not an alias (such as email address or phone number), even if you specified an alias in your call to <code>AdminInitiateAuth</code>. This is because, in the <code>AdminRespondToAuthChallenge</code> API <code>ChallengeResponses</code>, the <code>USERNAME</code> attribute cannot be an alias.</p>'
      AuthenticationResult:
        $ref: '#/definitions/AuthenticationResultType'
        description: 'The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.'
    description: 'Initiates the authentication response, as an administrator.'
  AdminInitiateAuthRequest:
    type: object
    required:
      - UserPoolId
      - ClientId
      - AuthFlow
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The ID of the Amazon Cognito user pool.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The app client ID.
      AuthFlow:
        $ref: '#/definitions/AuthFlowType'
        description: '<p>The authentication flow for this call to execute. The API action will depend on this value. For example:</p> <ul> <li> <p> <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return new tokens.</p> </li> <li> <p> <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and <code>SRP_A</code> and return the SRP variables to be used for next challenge execution.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and <code>PASSWORD</code> and return the next challenge or tokens.</p> </li> </ul> <p>Valid values include:</p> <ul> <li> <p> <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p> </li> <li> <p> <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p> </li> <li> <p> <code>CUSTOM_AUTH</code>: Custom authentication flow.</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: Non-SRP authentication flow; you can pass in the USERNAME and PASSWORD directly if the flow is enabled for calling the app client.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if the USERNAME is not found in the user pool. </p> </li> </ul>'
      AuthParameters:
        $ref: '#/definitions/AuthParametersType'
        description: '<p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you are invoking. The required values depend on the value of <code>AuthFlow</code>:</p> <ul> <li> <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>ADMIN_NO_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>PASSWORD</code> (required), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code> </p> </li> </ul>'
      ClientMetadata:
        $ref: '#/definitions/ClientMetadataType'
        description: This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.
      AnalyticsMetadata:
        $ref: '#/definitions/AnalyticsMetadataType'
        description: The analytics metadata for collecting Amazon Pinpoint metrics for <code>AdminInitiateAuth</code> calls.
      ContextData:
        $ref: '#/definitions/ContextDataType'
        description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
    description: 'Initiates the authorization request, as an administrator.'
  MFAMethodNotFoundException: {}
  PasswordResetRequiredException: {}
  UserNotConfirmedException: {}
  AdminLinkProviderForUserResponse:
    type: object
    properties: {}
  AdminLinkProviderForUserRequest:
    type: object
    required:
      - UserPoolId
      - DestinationUser
      - SourceUser
    properties:
      UserPoolId:
        $ref: '#/definitions/StringType'
        description: The user pool ID for the user pool.
      DestinationUser:
        $ref: '#/definitions/ProviderUserIdentifierType'
        description: '<p>The existing user in the user pool to be linked to the external identity provider user account. Can be a native (Username + Password) Cognito User Pools user or a federated user (for example, a SAML or Facebook user). If the user doesn''t exist, an exception is thrown. This is the user that is returned when the new user (with the linked identity provider attribute) signs in.</p> <p>For a native username + password user, the <code>ProviderAttributeValue</code> for the <code>DestinationUser</code> should be the username in the user pool. For a federated user, it should be the provider-specific <code>user_id</code>.</p> <p>The <code>ProviderAttributeName</code> of the <code>DestinationUser</code> is ignored.</p> <p>The <code>ProviderName</code> should be set to <code>Cognito</code> for users in Cognito user pools.</p>'
      SourceUser:
        $ref: '#/definitions/ProviderUserIdentifierType'
        description: '<p>An external identity provider account for a user who does not currently exist yet in the user pool. This user must be a federated user (for example, a SAML or Facebook user), not another native user.</p> <p>If the <code>SourceUser</code> is a federated social identity provider user (Facebook, Google, or Login with Amazon), you must set the <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>. For social identity providers, the <code>ProviderName</code> will be <code>Facebook</code>, <code>Google</code>, or <code>LoginWithAmazon</code>, and Cognito will automatically parse the Facebook, Google, and Login with Amazon tokens for <code>id</code>, <code>sub</code>, and <code>user_id</code>, respectively. The <code>ProviderAttributeValue</code> for the user must be the same value as the <code>id</code>, <code>sub</code>, or <code>user_id</code> value found in the social identity provider token.</p> <p/> <p>For SAML, the <code>ProviderAttributeName</code> can be any value that matches a claim in the SAML assertion. If you wish to link SAML users based on the subject of the SAML assertion, you should map the subject to a claim through the SAML identity provider and submit that claim name as the <code>ProviderAttributeName</code>. If you set <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>, Cognito will automatically parse the default unique identifier found in the subject from the SAML token.</p>'
  AdminListDevicesResponse:
    type: object
    properties:
      Devices:
        $ref: '#/definitions/DeviceListType'
        description: The devices in the list of devices response.
      PaginationToken:
        $ref: '#/definitions/SearchPaginationTokenType'
        description: The pagination token.
    description: 'Lists the device''s response, as an administrator.'
  AdminListDevicesRequest:
    type: object
    required:
      - UserPoolId
      - Username
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name.
      Limit:
        $ref: '#/definitions/QueryLimitType'
        description: The limit of the devices request.
      PaginationToken:
        $ref: '#/definitions/SearchPaginationTokenType'
        description: The pagination token.
    description: 'Represents the request to list devices, as an administrator.'
  AdminListGroupsForUserResponse:
    type: object
    properties:
      Groups:
        $ref: '#/definitions/GroupListType'
        description: The groups that the user belongs to.
      NextToken:
        $ref: '#/definitions/PaginationKey'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
  AdminListGroupsForUserRequest:
    type: object
    required:
      - Username
      - UserPoolId
    properties:
      Username:
        $ref: '#/definitions/UsernameType'
        description: The username for the user.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      Limit:
        $ref: '#/definitions/QueryLimitType'
        description: The limit of the request to list groups.
      NextToken:
        $ref: '#/definitions/PaginationKey'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
  AdminListUserAuthEventsResponse:
    type: object
    properties:
      AuthEvents:
        $ref: '#/definitions/AuthEventsType'
        description: 'The response object. It includes the <code>EventID</code>, <code>EventType</code>, <code>CreationDate</code>, <code>EventRisk</code>, and <code>EventResponse</code>.'
      NextToken:
        $ref: '#/definitions/PaginationKey'
        description: A pagination token.
  AdminListUserAuthEventsRequest:
    type: object
    required:
      - UserPoolId
      - Username
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user pool username or an alias.
      MaxResults:
        $ref: '#/definitions/QueryLimitType'
        description: The maximum number of authentication events to return.
      NextToken:
        $ref: '#/definitions/PaginationKey'
        description: A pagination token.
  UserPoolAddOnNotEnabledException: {}
  AdminRemoveUserFromGroupRequest:
    type: object
    required:
      - UserPoolId
      - Username
      - GroupName
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The username for the user.
      GroupName:
        $ref: '#/definitions/GroupNameType'
        description: The group name.
  AdminResetUserPasswordResponse:
    type: object
    properties: {}
    description: Represents the response from the server to reset a user password as an administrator.
  AdminResetUserPasswordRequest:
    type: object
    required:
      - UserPoolId
      - Username
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to reset the user's password.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user whose password you wish to reset.
    description: Represents the request to reset a user's password as an administrator.
  InvalidEmailRoleAccessPolicyException: {}
  AdminRespondToAuthChallengeResponse:
    type: object
    properties:
      ChallengeName:
        $ref: '#/definitions/ChallengeNameType'
        description: 'The name of the challenge. For more information, see .'
      Session:
        $ref: '#/definitions/SessionType'
        description: 'The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.'
      ChallengeParameters:
        $ref: '#/definitions/ChallengeParametersType'
        description: 'The challenge parameters. For more information, see .'
      AuthenticationResult:
        $ref: '#/definitions/AuthenticationResultType'
        description: The result returned by the server in response to the authentication request.
    description: 'Responds to the authentication challenge, as an administrator.'
  AdminRespondToAuthChallengeRequest:
    type: object
    required:
      - UserPoolId
      - ClientId
      - ChallengeName
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The ID of the Amazon Cognito user pool.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The app client ID.
      ChallengeName:
        $ref: '#/definitions/ChallengeNameType'
        description: 'The challenge name. For more information, see .'
      ChallengeResponses:
        $ref: '#/definitions/ChallengeResponsesType'
        description: '<p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p> <ul> <li> <p> <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>ADMIN_NO_SRP_AUTH</code>: <code>PASSWORD</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> </ul> <p>The value of the <code>USERNAME</code> attribute must be the user''s actual username, not an alias (such as email address or phone number). To make this easier, the <code>AdminInitiateAuth</code> response includes the actual username value in the <code>USERNAMEUSER_ID_FOR_SRP</code> attribute, even if you specified an alias in your call to <code>AdminInitiateAuth</code>.</p>'
      Session:
        $ref: '#/definitions/SessionType'
        description: 'The session which should be passed both ways in challenge-response calls to the service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.'
      AnalyticsMetadata:
        $ref: '#/definitions/AnalyticsMetadataType'
        description: The analytics metadata for collecting Amazon Pinpoint metrics for <code>AdminRespondToAuthChallenge</code> calls.
      ContextData:
        $ref: '#/definitions/ContextDataType'
        description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
    description: 'The request to respond to the authentication challenge, as an administrator.'
  CodeMismatchException: {}
  ExpiredCodeException: {}
  SoftwareTokenMFANotFoundException: {}
  AdminSetUserMFAPreferenceResponse:
    type: object
    properties: {}
  AdminSetUserMFAPreferenceRequest:
    type: object
    required:
      - Username
      - UserPoolId
    properties:
      SMSMfaSettings:
        $ref: '#/definitions/SMSMfaSettingsType'
        description: The SMS text message MFA settings.
      SoftwareTokenMfaSettings:
        $ref: '#/definitions/SoftwareTokenMfaSettingsType'
        description: The time-based one-time password software token MFA settings.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user pool username or alias.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
  AdminSetUserSettingsResponse:
    type: object
    properties: {}
    description: Represents the response from the server to set user settings as an administrator.
  AdminSetUserSettingsRequest:
    type: object
    required:
      - UserPoolId
      - Username
      - MFAOptions
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: 'The user pool ID for the user pool where you want to set the user''s settings, such as MFA options.'
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user for whom you wish to set user settings.
      MFAOptions:
        $ref: '#/definitions/MFAOptionListType'
        description: 'Specifies the options for MFA (e.g., email or phone number).'
    description: Represents the request to set user settings as an administrator.
  AdminUpdateAuthEventFeedbackResponse:
    type: object
    properties: {}
  AdminUpdateAuthEventFeedbackRequest:
    type: object
    required:
      - UserPoolId
      - Username
      - EventId
      - FeedbackValue
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user pool username.
      EventId:
        $ref: '#/definitions/EventIdType'
        description: The authentication event ID.
      FeedbackValue:
        $ref: '#/definitions/FeedbackValueType'
        description: The authentication event feedback value.
  AdminUpdateDeviceStatusResponse:
    type: object
    properties: {}
    description: 'The status response from the request to update the device, as an administrator.'
  AdminUpdateDeviceStatusRequest:
    type: object
    required:
      - UserPoolId
      - Username
      - DeviceKey
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name.
      DeviceKey:
        $ref: '#/definitions/DeviceKeyType'
        description: The device key.
      DeviceRememberedStatus:
        $ref: '#/definitions/DeviceRememberedStatusType'
        description: The status indicating whether a device has been remembered or not.
    description: 'The request to update the device status, as an administrator.'
  AdminUpdateUserAttributesResponse:
    type: object
    properties: {}
    description: Represents the response from the server for the request to update user attributes as an administrator.
  AdminUpdateUserAttributesRequest:
    type: object
    required:
      - UserPoolId
      - Username
      - UserAttributes
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to update user attributes.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user for whom you want to update user attributes.
      UserAttributes:
        $ref: '#/definitions/AttributeListType'
        description: '<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
    description: Represents the request to update the user's attributes as an administrator.
  AdminUserGlobalSignOutResponse:
    type: object
    properties: {}
    description: 'The global sign-out response, as an administrator.'
  AdminUserGlobalSignOutRequest:
    type: object
    required:
      - UserPoolId
      - Username
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name.
    description: 'The request to sign out of all devices, as an administrator.'
  AssociateSoftwareTokenResponse:
    type: object
    properties:
      SecretCode:
        $ref: '#/definitions/SecretCodeType'
        description: A unique generated shared secret code that is used in the TOTP algorithm to generate a one time code.
      Session:
        $ref: '#/definitions/SessionType'
        description: The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
  AssociateSoftwareTokenRequest:
    type: object
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token.
      Session:
        $ref: '#/definitions/SessionType'
        description: The session which should be passed both ways in challenge-response calls to the service. This allows authentication of the user as part of the MFA setup process.
  ChangePasswordResponse:
    type: object
    properties: {}
    description: The response from the server to the change password request.
  ChangePasswordRequest:
    type: object
    required:
      - PreviousPassword
      - ProposedPassword
      - AccessToken
    properties:
      PreviousPassword:
        $ref: '#/definitions/PasswordType'
        description: The old password.
      ProposedPassword:
        $ref: '#/definitions/PasswordType'
        description: The new password.
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token.
    description: Represents the request to change a user password.
  ConfirmDeviceResponse:
    type: object
    properties:
      UserConfirmationNecessary:
        $ref: '#/definitions/BooleanType'
        description: Indicates whether the user confirmation is necessary to confirm the device response.
    description: Confirms the device response.
  ConfirmDeviceRequest:
    type: object
    required:
      - AccessToken
      - DeviceKey
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token.
      DeviceKey:
        $ref: '#/definitions/DeviceKeyType'
        description: The device key.
      DeviceSecretVerifierConfig:
        $ref: '#/definitions/DeviceSecretVerifierConfigType'
        description: The configuration of the device secret verifier.
      DeviceName:
        $ref: '#/definitions/DeviceNameType'
        description: The device name.
    description: Confirms the device request.
  ConfirmForgotPasswordResponse:
    type: object
    properties: {}
    description: The response from the server that results from a user's request to retrieve a forgotten password.
  ConfirmForgotPasswordRequest:
    type: object
    required:
      - ClientId
      - Username
      - ConfirmationCode
      - Password
    properties:
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The app client ID of the app associated with the user pool.
      SecretHash:
        $ref: '#/definitions/SecretHashType'
        description: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user for whom you want to enter a code to retrieve a forgotten password.
      ConfirmationCode:
        $ref: '#/definitions/ConfirmationCodeType'
        description: 'The confirmation code sent by a user''s request to retrieve a forgotten password. For more information, see '
      Password:
        $ref: '#/definitions/PasswordType'
        description: The password sent by a user's request to retrieve a forgotten password.
      AnalyticsMetadata:
        $ref: '#/definitions/AnalyticsMetadataType'
        description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmForgotPassword</code> calls.
      UserContextData:
        $ref: '#/definitions/UserContextDataType'
        description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
    description: The request representing the confirmation for a password reset.
  ConfirmSignUpResponse:
    type: object
    properties: {}
    description: Represents the response from the server for the registration confirmation.
  ConfirmSignUpRequest:
    type: object
    required:
      - ClientId
      - Username
      - ConfirmationCode
    properties:
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The ID of the app client associated with the user pool.
      SecretHash:
        $ref: '#/definitions/SecretHashType'
        description: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user whose registration you wish to confirm.
      ConfirmationCode:
        $ref: '#/definitions/ConfirmationCodeType'
        description: The confirmation code sent by a user's request to confirm registration.
      ForceAliasCreation:
        $ref: '#/definitions/ForceAliasCreation'
        description: 'Boolean to be specified to force user confirmation irrespective of existing alias. By default set to <code>False</code>. If this parameter is set to <code>True</code> and the phone number/email used for sign up confirmation already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user being confirmed. If set to <code>False</code>, the API will throw an <b>AliasExistsException</b> error.'
      AnalyticsMetadata:
        $ref: '#/definitions/AnalyticsMetadataType'
        description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmSignUp</code> calls.
      UserContextData:
        $ref: '#/definitions/UserContextDataType'
        description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
    description: Represents the request to confirm registration of a user.
  CreateGroupResponse:
    type: object
    properties:
      Group:
        $ref: '#/definitions/GroupType'
        description: The group object for the group.
  CreateGroupRequest:
    type: object
    required:
      - GroupName
      - UserPoolId
    properties:
      GroupName:
        $ref: '#/definitions/GroupNameType'
        description: The name of the group. Must be unique.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      Description:
        $ref: '#/definitions/DescriptionType'
        description: A string containing the description of the group.
      RoleArn:
        $ref: '#/definitions/ArnType'
        description: The role ARN for the group.
      Precedence:
        $ref: '#/definitions/PrecedenceType'
        description: '<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. Zero is the highest precedence value. Groups with lower <code>Precedence</code> values take precedence over groups with higher or null <code>Precedence</code> values. If a user belongs to two or more groups, it is the group with the lowest precedence value whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user''s tokens.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users'' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>'
  GroupExistsException: {}
  CreateIdentityProviderResponse:
    type: object
    required:
      - IdentityProvider
    properties:
      IdentityProvider:
        $ref: '#/definitions/IdentityProviderType'
        description: The newly created identity provider object.
  CreateIdentityProviderRequest:
    type: object
    required:
      - UserPoolId
      - ProviderName
      - ProviderType
      - ProviderDetails
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      ProviderName:
        $ref: '#/definitions/ProviderNameTypeV1'
        description: The identity provider name.
      ProviderType:
        $ref: '#/definitions/IdentityProviderTypeType'
        description: The identity provider type.
      ProviderDetails:
        $ref: '#/definitions/ProviderDetailsType'
        description: 'The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.'
      AttributeMapping:
        $ref: '#/definitions/AttributeMappingType'
        description: A mapping of identity provider attributes to standard and custom user pool attributes.
      IdpIdentifiers:
        $ref: '#/definitions/IdpIdentifiersListType'
        description: A list of identity provider identifiers.
  DuplicateProviderException: {}
  CreateResourceServerResponse:
    type: object
    required:
      - ResourceServer
    properties:
      ResourceServer:
        $ref: '#/definitions/ResourceServerType'
        description: The newly created resource server.
  CreateResourceServerRequest:
    type: object
    required:
      - UserPoolId
      - Identifier
      - Name
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      Identifier:
        $ref: '#/definitions/ResourceServerIdentifierType'
        description: 'A unique resource server identifier for the resource server. This could be an HTTPS endpoint where the resource server is located. For example, <code>https://my-weather-api.example.com</code>.'
      Name:
        $ref: '#/definitions/ResourceServerNameType'
        description: A friendly name for the resource server.
      Scopes:
        $ref: '#/definitions/ResourceServerScopeListType'
        description: 'A list of scopes. Each scope is map, where the keys are <code>name</code> and <code>description</code>.'
  CreateUserImportJobResponse:
    type: object
    properties:
      UserImportJob:
        $ref: '#/definitions/UserImportJobType'
        description: The job object that represents the user import job.
    description: Represents the response from the server to the request to create the user import job.
  CreateUserImportJobRequest:
    type: object
    required:
      - JobName
      - UserPoolId
      - CloudWatchLogsRoleArn
    properties:
      JobName:
        $ref: '#/definitions/UserImportJobNameType'
        description: The job name for the user import job.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool that the users are being imported into.
      CloudWatchLogsRoleArn:
        $ref: '#/definitions/ArnType'
        description: The role ARN for the Amazon CloudWatch Logging role for the user import job.
    description: Represents the request to create the user import job.
  CreateUserPoolResponse:
    type: object
    properties:
      UserPool:
        $ref: '#/definitions/UserPoolType'
        description: A container for the user pool details.
    description: Represents the response from the server for the request to create a user pool.
  CreateUserPoolRequest:
    type: object
    required:
      - PoolName
    properties:
      PoolName:
        $ref: '#/definitions/UserPoolNameType'
        description: A string used to name the user pool.
      Policies:
        $ref: '#/definitions/UserPoolPolicyType'
        description: The policies associated with the new user pool.
      LambdaConfig:
        $ref: '#/definitions/LambdaConfigType'
        description: '<p>The Lambda trigger configuration information for the new user pool.</p> <note> <p>In a push model, event sources (such as Amazon S3 and custom applications) need permission to invoke a function. So you will need to make an extra call to add permission for these event sources to invoke your Lambda function.</p> <p/> <p>For more information on using the Lambda API to add permission, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html"> AddPermission </a>. </p> <p>For adding permission using the AWS CLI, see <a href="https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html"> add-permission </a>.</p> </note>'
      AutoVerifiedAttributes:
        $ref: '#/definitions/VerifiedAttributesListType'
        description: 'The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>.'
      AliasAttributes:
        $ref: '#/definitions/AliasAttributesListType'
        description: 'Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or <b>preferred_username</b>.'
      UsernameAttributes:
        $ref: '#/definitions/UsernameAttributesListType'
        description: Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
      SmsVerificationMessage:
        $ref: '#/definitions/SmsVerificationMessageType'
        description: A string representing the SMS verification message.
      EmailVerificationMessage:
        $ref: '#/definitions/EmailVerificationMessageType'
        description: A string representing the email verification message.
      EmailVerificationSubject:
        $ref: '#/definitions/EmailVerificationSubjectType'
        description: A string representing the email verification subject.
      VerificationMessageTemplate:
        $ref: '#/definitions/VerificationMessageTemplateType'
        description: The template for the verification message that the user sees when the app requests permission to access the user's information.
      SmsAuthenticationMessage:
        $ref: '#/definitions/SmsVerificationMessageType'
        description: A string representing the SMS authentication message.
      MfaConfiguration:
        $ref: '#/definitions/UserPoolMfaType'
        description: Specifies MFA configuration details.
      DeviceConfiguration:
        $ref: '#/definitions/DeviceConfigurationType'
        description: The device configuration.
      EmailConfiguration:
        $ref: '#/definitions/EmailConfigurationType'
        description: The email configuration.
      SmsConfiguration:
        $ref: '#/definitions/SmsConfigurationType'
        description: The SMS configuration.
      UserPoolTags:
        $ref: '#/definitions/UserPoolTagsType'
        description: 'The cost allocation tags for the user pool. For more information, see <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html">Adding Cost Allocation Tags to Your User Pool</a> '
      AdminCreateUserConfig:
        $ref: '#/definitions/AdminCreateUserConfigType'
        description: The configuration for <code>AdminCreateUser</code> requests.
      Schema:
        $ref: '#/definitions/SchemaAttributesListType'
        description: An array of schema attributes for the new user pool. These attributes can be standard or custom attributes.
      UserPoolAddOns:
        $ref: '#/definitions/UserPoolAddOnsType'
        description: Used to enable advanced security risk detection. Set the key <code>AdvancedSecurityMode</code> to the value "AUDIT".
    description: Represents the request to create a user pool.
  UserPoolTaggingException: {}
  CreateUserPoolClientResponse:
    type: object
    properties:
      UserPoolClient:
        $ref: '#/definitions/UserPoolClientType'
        description: The user pool client that was just created.
    description: Represents the response from the server to create a user pool client.
  CreateUserPoolClientRequest:
    type: object
    required:
      - UserPoolId
      - ClientName
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to create a user pool client.
      ClientName:
        $ref: '#/definitions/ClientNameType'
        description: The client name for the user pool client you would like to create.
      GenerateSecret:
        $ref: '#/definitions/GenerateSecret'
        description: Boolean to specify whether you want to generate a secret for the user pool client being created.
      RefreshTokenValidity:
        $ref: '#/definitions/RefreshTokenValidityType'
        description: 'The time limit, in days, after which the refresh token is no longer valid and cannot be used.'
      ReadAttributes:
        $ref: '#/definitions/ClientPermissionListType'
        description: The read attributes.
      WriteAttributes:
        $ref: '#/definitions/ClientPermissionListType'
        description: The write attributes.
      ExplicitAuthFlows:
        $ref: '#/definitions/ExplicitAuthFlowsListType'
        description: The explicit authentication flows.
      SupportedIdentityProviders:
        $ref: '#/definitions/SupportedIdentityProvidersListType'
        description: A list of provider names for the identity providers that are supported on this client.
      CallbackURLs:
        $ref: '#/definitions/CallbackURLsListType'
        description: '<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
      LogoutURLs:
        $ref: '#/definitions/LogoutURLsListType'
        description: A list of allowed logout URLs for the identity providers.
      DefaultRedirectURI:
        $ref: '#/definitions/RedirectUrlType'
        description: '<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
      AllowedOAuthFlows:
        $ref: '#/definitions/OAuthFlowsType'
        description: '<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>'
      AllowedOAuthScopes:
        $ref: '#/definitions/ScopeListType'
        description: 'A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>, and <code>"Cognito"</code>.'
      AllowedOAuthFlowsUserPoolClient:
        $ref: '#/definitions/BooleanType'
        description: Set to <code>True</code> if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
      AnalyticsConfiguration:
        $ref: '#/definitions/AnalyticsConfigurationType'
        description: The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.
    description: Represents the request to create a user pool client.
  ScopeDoesNotExistException: {}
  InvalidOAuthFlowException: {}
  CreateUserPoolDomainResponse:
    type: object
    properties:
      CloudFrontDomain:
        $ref: '#/definitions/DomainType'
        description: The Amazon CloudFront endpoint that you use as the target of the alias that you set up with your Domain Name Service (DNS) provider.
  CreateUserPoolDomainRequest:
    type: object
    required:
      - Domain
      - UserPoolId
    properties:
      Domain:
        $ref: '#/definitions/DomainType'
        description: The domain string.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      CustomDomainConfig:
        $ref: '#/definitions/CustomDomainConfigType'
        description: '<p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.</p> <p>Provide this parameter only if you want to use own custom domain for your user pool. Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain instead.</p> <p>For more information about the hosted domain and custom domains, see <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html">Configuring a User Pool Domain</a>.</p>'
  DeleteGroupRequest:
    type: object
    required:
      - GroupName
      - UserPoolId
    properties:
      GroupName:
        $ref: '#/definitions/GroupNameType'
        description: The name of the group.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
  DeleteIdentityProviderRequest:
    type: object
    required:
      - UserPoolId
      - ProviderName
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      ProviderName:
        $ref: '#/definitions/ProviderNameType'
        description: The identity provider name.
  UnsupportedIdentityProviderException: {}
  DeleteResourceServerRequest:
    type: object
    required:
      - UserPoolId
      - Identifier
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool that hosts the resource server.
      Identifier:
        $ref: '#/definitions/ResourceServerIdentifierType'
        description: The identifier for the resource server.
  DeleteUserRequest:
    type: object
    required:
      - AccessToken
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token from a request to delete a user.
    description: Represents the request to delete a user.
  DeleteUserAttributesResponse:
    type: object
    properties: {}
    description: Represents the response from the server to delete user attributes.
  DeleteUserAttributesRequest:
    type: object
    required:
      - UserAttributeNames
      - AccessToken
    properties:
      UserAttributeNames:
        $ref: '#/definitions/AttributeNameListType'
        description: '<p>An array of strings representing the user attribute names you wish to delete.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token used in the request to delete user attributes.
    description: Represents the request to delete user attributes.
  DeleteUserPoolRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool you want to delete.
    description: Represents the request to delete a user pool.
  DeleteUserPoolClientRequest:
    type: object
    required:
      - UserPoolId
      - ClientId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to delete the client.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The app client ID of the app associated with the user pool.
    description: Represents the request to delete a user pool client.
  DeleteUserPoolDomainResponse:
    type: object
    properties: {}
  DeleteUserPoolDomainRequest:
    type: object
    required:
      - Domain
      - UserPoolId
    properties:
      Domain:
        $ref: '#/definitions/DomainType'
        description: The domain string.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
  DescribeIdentityProviderResponse:
    type: object
    required:
      - IdentityProvider
    properties:
      IdentityProvider:
        $ref: '#/definitions/IdentityProviderType'
        description: The identity provider that was deleted.
  DescribeIdentityProviderRequest:
    type: object
    required:
      - UserPoolId
      - ProviderName
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      ProviderName:
        $ref: '#/definitions/ProviderNameType'
        description: The identity provider name.
  DescribeResourceServerResponse:
    type: object
    required:
      - ResourceServer
    properties:
      ResourceServer:
        $ref: '#/definitions/ResourceServerType'
        description: The resource server.
  DescribeResourceServerRequest:
    type: object
    required:
      - UserPoolId
      - Identifier
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool that hosts the resource server.
      Identifier:
        $ref: '#/definitions/ResourceServerIdentifierType'
        description: The identifier for the resource server
  DescribeRiskConfigurationResponse:
    type: object
    required:
      - RiskConfiguration
    properties:
      RiskConfiguration:
        $ref: '#/definitions/RiskConfigurationType'
        description: The risk configuration.
  DescribeRiskConfigurationRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The app client ID.
  DescribeUserImportJobResponse:
    type: object
    properties:
      UserImportJob:
        $ref: '#/definitions/UserImportJobType'
        description: The job object that represents the user import job.
    description: Represents the response from the server to the request to describe the user import job.
  DescribeUserImportJobRequest:
    type: object
    required:
      - UserPoolId
      - JobId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool that the users are being imported into.
      JobId:
        $ref: '#/definitions/UserImportJobIdType'
        description: The job ID for the user import job.
    description: Represents the request to describe the user import job.
  DescribeUserPoolResponse:
    type: object
    properties:
      UserPool:
        $ref: '#/definitions/UserPoolType'
        description: The container of metadata returned by the server to describe the pool.
    description: Represents the response to describe the user pool.
  DescribeUserPoolRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool you want to describe.
    description: Represents the request to describe the user pool.
  DescribeUserPoolClientResponse:
    type: object
    properties:
      UserPoolClient:
        $ref: '#/definitions/UserPoolClientType'
        description: The user pool client from a server response to describe the user pool client.
    description: Represents the response from the server from a request to describe the user pool client.
  DescribeUserPoolClientRequest:
    type: object
    required:
      - UserPoolId
      - ClientId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool you want to describe.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The app client ID of the app associated with the user pool.
    description: Represents the request to describe a user pool client.
  DescribeUserPoolDomainResponse:
    type: object
    properties:
      DomainDescription:
        $ref: '#/definitions/DomainDescriptionType'
        description: A domain description object containing information about the domain.
  DescribeUserPoolDomainRequest:
    type: object
    required:
      - Domain
    properties:
      Domain:
        $ref: '#/definitions/DomainType'
        description: The domain string.
  ForgetDeviceRequest:
    type: object
    required:
      - DeviceKey
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token for the forgotten device request.
      DeviceKey:
        $ref: '#/definitions/DeviceKeyType'
        description: The device key.
    description: Represents the request to forget the device.
  ForgotPasswordResponse:
    type: object
    properties:
      CodeDeliveryDetails:
        $ref: '#/definitions/CodeDeliveryDetailsType'
        description: The code delivery details returned by the server in response to the request to reset a password.
    description: Respresents the response from the server regarding the request to reset a password.
  ForgotPasswordRequest:
    type: object
    required:
      - ClientId
      - Username
    properties:
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The ID of the client associated with the user pool.
      SecretHash:
        $ref: '#/definitions/SecretHashType'
        description: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
      UserContextData:
        $ref: '#/definitions/UserContextDataType'
        description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user for whom you want to enter a code to reset a forgotten password.
      AnalyticsMetadata:
        $ref: '#/definitions/AnalyticsMetadataType'
        description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>ForgotPassword</code> calls.
    description: Represents the request to reset a user's password.
  GetCSVHeaderResponse:
    type: object
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool that the users are to be imported into.
      CSVHeader:
        $ref: '#/definitions/ListOfStringTypes'
        description: The header information for the .csv file for the user import job.
    description: Represents the response from the server to the request to get the header information for the .csv file for the user import job.
  GetCSVHeaderRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool that the users are to be imported into.
    description: Represents the request to get the header information for the .csv file for the user import job.
  GetDeviceResponse:
    type: object
    required:
      - Device
    properties:
      Device:
        $ref: '#/definitions/DeviceType'
        description: The device.
    description: Gets the device response.
  GetDeviceRequest:
    type: object
    required:
      - DeviceKey
    properties:
      DeviceKey:
        $ref: '#/definitions/DeviceKeyType'
        description: The device key.
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token.
    description: Represents the request to get the device.
  GetGroupResponse:
    type: object
    properties:
      Group:
        $ref: '#/definitions/GroupType'
        description: The group object for the group.
  GetGroupRequest:
    type: object
    required:
      - GroupName
      - UserPoolId
    properties:
      GroupName:
        $ref: '#/definitions/GroupNameType'
        description: The name of the group.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
  GetIdentityProviderByIdentifierResponse:
    type: object
    required:
      - IdentityProvider
    properties:
      IdentityProvider:
        $ref: '#/definitions/IdentityProviderType'
        description: The identity provider object.
  GetIdentityProviderByIdentifierRequest:
    type: object
    required:
      - UserPoolId
      - IdpIdentifier
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      IdpIdentifier:
        $ref: '#/definitions/IdpIdentifierType'
        description: The identity provider ID.
  GetSigningCertificateResponse:
    type: object
    properties:
      Certificate:
        $ref: '#/definitions/StringType'
        description: The signing certificate.
    description: Response from Cognito for a signing certificate request.
  GetSigningCertificateRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
    description: Request to get a signing certificate from Cognito.
  GetUICustomizationResponse:
    type: object
    required:
      - UICustomization
    properties:
      UICustomization:
        $ref: '#/definitions/UICustomizationType'
        description: The UI customization information.
  GetUICustomizationRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The client ID for the client app.
  GetUserResponse:
    type: object
    required:
      - Username
      - UserAttributes
    properties:
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user you wish to retrieve from the get user request.
      UserAttributes:
        $ref: '#/definitions/AttributeListType'
        description: '<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
      MFAOptions:
        $ref: '#/definitions/MFAOptionListType'
        description: 'Specifies the options for MFA (e.g., email or phone number).'
      PreferredMfaSetting:
        $ref: '#/definitions/StringType'
        description: The user's preferred MFA setting.
      UserMFASettingList:
        $ref: '#/definitions/UserMFASettingListType'
        description: The list of the user's MFA settings.
    description: Represents the response from the server from the request to get information about the user.
  GetUserRequest:
    type: object
    required:
      - AccessToken
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token returned by the server response to get information about the user.
    description: Represents the request to get information about the user.
  GetUserAttributeVerificationCodeResponse:
    type: object
    properties:
      CodeDeliveryDetails:
        $ref: '#/definitions/CodeDeliveryDetailsType'
        description: The code delivery details returned by the server in response to the request to get the user attribute verification code.
    description: The verification code response returned by the server response to get the user attribute verification code.
  GetUserAttributeVerificationCodeRequest:
    type: object
    required:
      - AccessToken
      - AttributeName
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token returned by the server response to get the user attribute verification code.
      AttributeName:
        $ref: '#/definitions/AttributeNameType'
        description: The attribute name returned by the server response to get the user attribute verification code.
    description: Represents the request to get user attribute verification.
  GetUserPoolMfaConfigResponse:
    type: object
    properties:
      SmsMfaConfiguration:
        $ref: '#/definitions/SmsMfaConfigType'
        description: The SMS text message multi-factor (MFA) configuration.
      SoftwareTokenMfaConfiguration:
        $ref: '#/definitions/SoftwareTokenMfaConfigType'
        description: The software token multi-factor (MFA) configuration.
      MfaConfiguration:
        $ref: '#/definitions/UserPoolMfaType'
        description: The multi-factor (MFA) configuration.
  GetUserPoolMfaConfigRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
  GlobalSignOutResponse:
    type: object
    properties: {}
    description: The response to the request to sign out all devices.
  GlobalSignOutRequest:
    type: object
    required:
      - AccessToken
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token.
    description: Represents the request to sign out all devices.
  InitiateAuthResponse:
    type: object
    properties:
      ChallengeName:
        $ref: '#/definitions/ChallengeNameType'
        description: '<p>The name of the challenge which you are responding to with this call. This is returned to you in the <code>AdminInitiateAuth</code> response if you need to pass another challenge.</p> <p>Valid values include the following. Note that all of these challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable) in the parameters.</p> <ul> <li> <p> <code>SMS_MFA</code>: Next challenge is to supply an <code>SMS_MFA_CODE</code>, delivered via SMS.</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: Next challenge is to supply <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, and <code>TIMESTAMP</code> after the client-side SRP calculations.</p> </li> <li> <p> <code>CUSTOM_CHALLENGE</code>: This is returned if your custom authentication flow determines that the user should pass another challenge before tokens are issued.</p> </li> <li> <p> <code>DEVICE_SRP_AUTH</code>: If device tracking was enabled on your user pool and the previous challenges were passed, this challenge is returned so that Amazon Cognito can start tracking this device.</p> </li> <li> <p> <code>DEVICE_PASSWORD_VERIFIER</code>: Similar to <code>PASSWORD_VERIFIER</code>, but for devices only.</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: For users which are required to change their passwords after successful first login. This challenge should be passed with <code>NEW_PASSWORD</code> and any other required attributes.</p> </li> </ul>'
      Session:
        $ref: '#/definitions/SessionType'
        description: 'The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.'
      ChallengeParameters:
        $ref: '#/definitions/ChallengeParametersType'
        description: <p>The challenge parameters. These are returned to you in the <code>InitiateAuth</code> response if you need to pass another challenge. The responses in this parameter should be used to compute inputs to the next call (<code>RespondToAuthChallenge</code>). </p> <p>All challenges require <code>USERNAME</code> and <code>SECRET_HASH</code> (if applicable).</p>
      AuthenticationResult:
        $ref: '#/definitions/AuthenticationResultType'
        description: 'The result of the authentication response. This is only returned if the caller does not need to pass another challenge. If the caller does need to pass another challenge before it gets tokens, <code>ChallengeName</code>, <code>ChallengeParameters</code>, and <code>Session</code> are returned.'
    description: Initiates the authentication response.
  InitiateAuthRequest:
    type: object
    required:
      - AuthFlow
      - ClientId
    properties:
      AuthFlow:
        $ref: '#/definitions/AuthFlowType'
        description: '<p>The authentication flow for this call to execute. The API action will depend on this value. For example: </p> <ul> <li> <p> <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return new tokens.</p> </li> <li> <p> <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and <code>SRP_A</code> and return the SRP variables to be used for next challenge execution.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and <code>PASSWORD</code> and return the next challenge or tokens.</p> </li> </ul> <p>Valid values include:</p> <ul> <li> <p> <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password (SRP) protocol.</p> </li> <li> <p> <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication flow for refreshing the access token and ID token by supplying a valid refresh token.</p> </li> <li> <p> <code>CUSTOM_AUTH</code>: Custom authentication flow.</p> </li> <li> <p> <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and PASSWORD are passed directly. If a user migration Lambda trigger is set, this flow will invoke the user migration Lambda if the USERNAME is not found in the user pool. </p> </li> </ul> <p> <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>'
      AuthParameters:
        $ref: '#/definitions/AuthParametersType'
        description: '<p>The authentication parameters. These are inputs corresponding to the <code>AuthFlow</code> that you are invoking. The required values depend on the value of <code>AuthFlow</code>:</p> <ul> <li> <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required), <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code> (required), <code>SECRET_HASH</code> (required if the app client is configured with a client secret), <code>DEVICE_KEY</code> </p> </li> <li> <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required), <code>SECRET_HASH</code> (if app client is configured with client secret), <code>DEVICE_KEY</code> </p> </li> </ul>'
      ClientMetadata:
        $ref: '#/definitions/ClientMetadataType'
        description: This is a random key-value pair map which can contain any key and will be passed to your PreAuthentication Lambda trigger as-is. It can be used to implement additional validations around authentication.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The app client ID.
      AnalyticsMetadata:
        $ref: '#/definitions/AnalyticsMetadataType'
        description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>InitiateAuth</code> calls.
      UserContextData:
        $ref: '#/definitions/UserContextDataType'
        description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
    description: Initiates the authentication request.
  ListDevicesResponse:
    type: object
    properties:
      Devices:
        $ref: '#/definitions/DeviceListType'
        description: The devices returned in the list devices response.
      PaginationToken:
        $ref: '#/definitions/SearchPaginationTokenType'
        description: The pagination token for the list device response.
    description: Represents the response to list devices.
  ListDevicesRequest:
    type: object
    required:
      - AccessToken
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access tokens for the request to list devices.
      Limit:
        $ref: '#/definitions/QueryLimitType'
        description: The limit of the device request.
      PaginationToken:
        $ref: '#/definitions/SearchPaginationTokenType'
        description: The pagination token for the list request.
    description: Represents the request to list the devices.
  ListGroupsResponse:
    type: object
    properties:
      Groups:
        $ref: '#/definitions/GroupListType'
        description: The group objects for the groups.
      NextToken:
        $ref: '#/definitions/PaginationKey'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
  ListGroupsRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      Limit:
        $ref: '#/definitions/QueryLimitType'
        description: The limit of the request to list groups.
      NextToken:
        $ref: '#/definitions/PaginationKey'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
  ListIdentityProvidersResponse:
    type: object
    required:
      - Providers
    properties:
      Providers:
        $ref: '#/definitions/ProvidersListType'
        description: A list of identity provider objects.
      NextToken:
        $ref: '#/definitions/PaginationKeyType'
        description: A pagination token.
  ListIdentityProvidersRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      MaxResults:
        $ref: '#/definitions/ListProvidersLimitType'
        description: The maximum number of identity providers to return.
      NextToken:
        $ref: '#/definitions/PaginationKeyType'
        description: A pagination token.
  ListResourceServersResponse:
    type: object
    required:
      - ResourceServers
    properties:
      ResourceServers:
        $ref: '#/definitions/ResourceServersListType'
        description: The resource servers.
      NextToken:
        $ref: '#/definitions/PaginationKeyType'
        description: A pagination token.
  ListResourceServersRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      MaxResults:
        $ref: '#/definitions/ListResourceServersLimitType'
        description: The maximum number of resource servers to return.
      NextToken:
        $ref: '#/definitions/PaginationKeyType'
        description: A pagination token.
  ListUserImportJobsResponse:
    type: object
    properties:
      UserImportJobs:
        $ref: '#/definitions/UserImportJobsListType'
        description: The user import jobs.
      PaginationToken:
        $ref: '#/definitions/PaginationKeyType'
        description: An identifier that can be used to return the next set of user import jobs in the list.
    description: Represents the response from the server to the request to list the user import jobs.
  ListUserImportJobsRequest:
    type: object
    required:
      - UserPoolId
      - MaxResults
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool that the users are being imported into.
      MaxResults:
        $ref: '#/definitions/PoolQueryLimitType'
        description: The maximum number of import jobs you want the request to return.
      PaginationToken:
        $ref: '#/definitions/PaginationKeyType'
        description: 'An identifier that was returned from the previous call to <code>ListUserImportJobs</code>, which can be used to return the next set of import jobs in the list.'
    description: Represents the request to list the user import jobs.
  ListUserPoolClientsResponse:
    type: object
    properties:
      UserPoolClients:
        $ref: '#/definitions/UserPoolClientListType'
        description: The user pool clients in the response that lists user pool clients.
      NextToken:
        $ref: '#/definitions/PaginationKey'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
    description: Represents the response from the server that lists user pool clients.
  ListUserPoolClientsRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to list user pool clients.
      MaxResults:
        $ref: '#/definitions/QueryLimit'
        description: The maximum number of results you want the request to return when listing the user pool clients.
      NextToken:
        $ref: '#/definitions/PaginationKey'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
    description: Represents the request to list the user pool clients.
  ListUserPoolsResponse:
    type: object
    properties:
      UserPools:
        $ref: '#/definitions/UserPoolListType'
        description: The user pools from the response to list users.
      NextToken:
        $ref: '#/definitions/PaginationKeyType'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
    description: Represents the response to list user pools.
  ListUserPoolsRequest:
    type: object
    required:
      - MaxResults
    properties:
      NextToken:
        $ref: '#/definitions/PaginationKeyType'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
      MaxResults:
        $ref: '#/definitions/PoolQueryLimitType'
        description: The maximum number of results you want the request to return when listing the user pools.
    description: Represents the request to list user pools.
  ListUsersResponse:
    type: object
    properties:
      Users:
        $ref: '#/definitions/UsersListType'
        description: The users returned in the request to list users.
      PaginationToken:
        $ref: '#/definitions/SearchPaginationTokenType'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
    description: The response from the request to list users.
  ListUsersRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool on which the search should be performed.
      AttributesToGet:
        $ref: '#/definitions/SearchedAttributeNamesListType'
        description: 'An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is null, all attributes are returned.'
      Limit:
        $ref: '#/definitions/QueryLimitType'
        description: Maximum number of users to be returned.
      PaginationToken:
        $ref: '#/definitions/SearchPaginationTokenType'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
      Filter:
        $ref: '#/definitions/UserFilterType'
        description: '<p>A filter string of the form "<i>AttributeName</i> <i>Filter-Type</i> "<i>AttributeValue</i>"". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "<code>family_name</code> = \"Reddy\"".</p> <ul> <li> <p> <i>AttributeName</i>: The name of the attribute to search for. You can only search for one attribute at a time.</p> </li> <li> <p> <i>Filter-Type</i>: For an exact match, use =, for example, "<code>given_name</code> = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "<code>given_name</code> ^= \"Jon\"". </p> </li> <li> <p> <i>AttributeValue</i>: The attribute value that must be matched for each user.</p> </li> </ul> <p>If the filter string is empty, <code>ListUsers</code> returns all users in the user pool.</p> <p>You can only search for the following standard attributes:</p> <ul> <li> <p> <code>username</code> (case-sensitive)</p> </li> <li> <p> <code>email</code> </p> </li> <li> <p> <code>phone_number</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>given_name</code> </p> </li> <li> <p> <code>family_name</code> </p> </li> <li> <p> <code>preferred_username</code> </p> </li> <li> <p> <code>cognito:user_status</code> (called <b>Status</b> in the Console) (case-insensitive)</p> </li> <li> <p> <code>status (called <b>Enabled</b> in the Console) (case-sensitive)</code> </p> </li> <li> <p> <code>sub</code> </p> </li> </ul> <p>Custom attributes are not searchable.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api">Searching for Users Using the ListUsers API</a> and <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples">Examples of Using the ListUsers API</a> in the <i>Amazon Cognito Developer Guide</i>.</p>'
    description: Represents the request to list users.
  ListUsersInGroupResponse:
    type: object
    properties:
      Users:
        $ref: '#/definitions/UsersListType'
        description: The users returned in the request to list users.
      NextToken:
        $ref: '#/definitions/PaginationKey'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
  ListUsersInGroupRequest:
    type: object
    required:
      - UserPoolId
      - GroupName
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      GroupName:
        $ref: '#/definitions/GroupNameType'
        description: The name of the group.
      Limit:
        $ref: '#/definitions/QueryLimitType'
        description: The limit of the request to list users.
      NextToken:
        $ref: '#/definitions/PaginationKey'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
  ResendConfirmationCodeResponse:
    type: object
    properties:
      CodeDeliveryDetails:
        $ref: '#/definitions/CodeDeliveryDetailsType'
        description: The code delivery details returned by the server in response to the request to resend the confirmation code.
    description: The response from the server when the Amazon Cognito Your User Pools service makes the request to resend a confirmation code.
  ResendConfirmationCodeRequest:
    type: object
    required:
      - ClientId
      - Username
    properties:
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The ID of the client associated with the user pool.
      SecretHash:
        $ref: '#/definitions/SecretHashType'
        description: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
      UserContextData:
        $ref: '#/definitions/UserContextDataType'
        description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user to whom you wish to resend a confirmation code.
      AnalyticsMetadata:
        $ref: '#/definitions/AnalyticsMetadataType'
        description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>ResendConfirmationCode</code> calls.
    description: Represents the request to resend the confirmation code.
  RespondToAuthChallengeResponse:
    type: object
    properties:
      ChallengeName:
        $ref: '#/definitions/ChallengeNameType'
        description: 'The challenge name. For more information, see .'
      Session:
        $ref: '#/definitions/SessionType'
        description: 'The session which should be passed both ways in challenge-response calls to the service. If the or API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.'
      ChallengeParameters:
        $ref: '#/definitions/ChallengeParametersType'
        description: 'The challenge parameters. For more information, see .'
      AuthenticationResult:
        $ref: '#/definitions/AuthenticationResultType'
        description: The result returned by the server in response to the request to respond to the authentication challenge.
    description: The response to respond to the authentication challenge.
  RespondToAuthChallengeRequest:
    type: object
    required:
      - ClientId
      - ChallengeName
    properties:
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The app client ID.
      ChallengeName:
        $ref: '#/definitions/ChallengeNameType'
        description: '<p>The challenge name. For more information, see .</p> <p> <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>'
      Session:
        $ref: '#/definitions/SessionType'
        description: 'The session which should be passed both ways in challenge-response calls to the service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call determines that the caller needs to go through another challenge, they return a session with other challenge parameters. This session should be passed as it is to the next <code>RespondToAuthChallenge</code> API call.'
      ChallengeResponses:
        $ref: '#/definitions/ChallengeResponsesType'
        description: '<p>The challenge responses. These are inputs corresponding to the value of <code>ChallengeName</code>, for example:</p> <ul> <li> <p> <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>, <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret).</p> </li> <li> <p> <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured with client secret). </p> </li> </ul>'
      AnalyticsMetadata:
        $ref: '#/definitions/AnalyticsMetadataType'
        description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>RespondToAuthChallenge</code> calls.
      UserContextData:
        $ref: '#/definitions/UserContextDataType'
        description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
    description: The request to respond to an authentication challenge.
  SetRiskConfigurationResponse:
    type: object
    required:
      - RiskConfiguration
    properties:
      RiskConfiguration:
        $ref: '#/definitions/RiskConfigurationType'
        description: The risk configuration.
  SetRiskConfigurationRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: 'The user pool ID. '
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: '<p>The app client ID. If <code>ClientId</code> is null, then the risk configuration is mapped to <code>userPoolId</code>. When the client ID is null, the same risk configuration is applied to all the clients in the userPool.</p> <p>Otherwise, <code>ClientId</code> is mapped to the client. When the client ID is not null, the user pool configuration is overridden and the risk configuration for the client is used instead.</p>'
      CompromisedCredentialsRiskConfiguration:
        $ref: '#/definitions/CompromisedCredentialsRiskConfigurationType'
        description: The compromised credentials risk configuration.
      AccountTakeoverRiskConfiguration:
        $ref: '#/definitions/AccountTakeoverRiskConfigurationType'
        description: The account takeover risk configuration.
      RiskExceptionConfiguration:
        $ref: '#/definitions/RiskExceptionConfigurationType'
        description: The configuration to override the risk decision.
  SetUICustomizationResponse:
    type: object
    required:
      - UICustomization
    properties:
      UICustomization:
        $ref: '#/definitions/UICustomizationType'
        description: The UI customization information.
  SetUICustomizationRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The client ID for the client app.
      CSS:
        $ref: '#/definitions/CSSType'
        description: The CSS values in the UI customization.
      ImageFile:
        $ref: '#/definitions/ImageFileType'
        description: The uploaded logo image for the UI customization.
  SetUserMFAPreferenceResponse:
    type: object
    properties: {}
  SetUserMFAPreferenceRequest:
    type: object
    required:
      - AccessToken
    properties:
      SMSMfaSettings:
        $ref: '#/definitions/SMSMfaSettingsType'
        description: The SMS text message multi-factor authentication (MFA) settings.
      SoftwareTokenMfaSettings:
        $ref: '#/definitions/SoftwareTokenMfaSettingsType'
        description: The time-based one-time password software token MFA settings.
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token.
  SetUserPoolMfaConfigResponse:
    type: object
    properties:
      SmsMfaConfiguration:
        $ref: '#/definitions/SmsMfaConfigType'
        description: The SMS text message MFA configuration.
      SoftwareTokenMfaConfiguration:
        $ref: '#/definitions/SoftwareTokenMfaConfigType'
        description: The software token MFA configuration.
      MfaConfiguration:
        $ref: '#/definitions/UserPoolMfaType'
        description: The MFA configuration.
  SetUserPoolMfaConfigRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      SmsMfaConfiguration:
        $ref: '#/definitions/SmsMfaConfigType'
        description: The SMS text message MFA configuration.
      SoftwareTokenMfaConfiguration:
        $ref: '#/definitions/SoftwareTokenMfaConfigType'
        description: The software token MFA configuration.
      MfaConfiguration:
        $ref: '#/definitions/UserPoolMfaType'
        description: The MFA configuration.
  SetUserSettingsResponse:
    type: object
    properties: {}
    description: The response from the server for a set user settings request.
  SetUserSettingsRequest:
    type: object
    required:
      - AccessToken
      - MFAOptions
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token for the set user settings request.
      MFAOptions:
        $ref: '#/definitions/MFAOptionListType'
        description: 'Specifies the options for MFA (e.g., email or phone number).'
    description: Represents the request to set user settings.
  SignUpResponse:
    type: object
    required:
      - UserConfirmed
      - UserSub
    properties:
      UserConfirmed:
        $ref: '#/definitions/BooleanType'
        description: A response from the server indicating that a user registration has been confirmed.
      CodeDeliveryDetails:
        $ref: '#/definitions/CodeDeliveryDetailsType'
        description: The code delivery details returned by the server response to the user registration request.
      UserSub:
        $ref: '#/definitions/StringType'
        description: The UUID of the authenticated user. This is not the same as <code>username</code>.
    description: The response from the server for a registration request.
  SignUpRequest:
    type: object
    required:
      - ClientId
      - Username
      - Password
    properties:
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The ID of the client associated with the user pool.
      SecretHash:
        $ref: '#/definitions/SecretHashType'
        description: A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user you wish to register.
      Password:
        $ref: '#/definitions/PasswordType'
        description: The password of the user you wish to register.
      UserAttributes:
        $ref: '#/definitions/AttributeListType'
        description: '<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
      ValidationData:
        $ref: '#/definitions/AttributeListType'
        description: The validation data in the request to register a user.
      AnalyticsMetadata:
        $ref: '#/definitions/AnalyticsMetadataType'
        description: The Amazon Pinpoint analytics metadata for collecting metrics for <code>SignUp</code> calls.
      UserContextData:
        $ref: '#/definitions/UserContextDataType'
        description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
    description: Represents the request to register a user.
  StartUserImportJobResponse:
    type: object
    properties:
      UserImportJob:
        $ref: '#/definitions/UserImportJobType'
        description: The job object that represents the user import job.
    description: Represents the response from the server to the request to start the user import job.
  StartUserImportJobRequest:
    type: object
    required:
      - UserPoolId
      - JobId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool that the users are being imported into.
      JobId:
        $ref: '#/definitions/UserImportJobIdType'
        description: The job ID for the user import job.
    description: Represents the request to start the user import job.
  StopUserImportJobResponse:
    type: object
    properties:
      UserImportJob:
        $ref: '#/definitions/UserImportJobType'
        description: The job object that represents the user import job.
    description: Represents the response from the server to the request to stop the user import job.
  StopUserImportJobRequest:
    type: object
    required:
      - UserPoolId
      - JobId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool that the users are being imported into.
      JobId:
        $ref: '#/definitions/UserImportJobIdType'
        description: The job ID for the user import job.
    description: Represents the request to stop the user import job.
  UpdateAuthEventFeedbackResponse:
    type: object
    properties: {}
  UpdateAuthEventFeedbackRequest:
    type: object
    required:
      - UserPoolId
      - Username
      - EventId
      - FeedbackToken
      - FeedbackValue
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user pool username.
      EventId:
        $ref: '#/definitions/EventIdType'
        description: The event ID.
      FeedbackToken:
        $ref: '#/definitions/TokenModelType'
        description: The feedback token.
      FeedbackValue:
        $ref: '#/definitions/FeedbackValueType'
        description: The authentication event feedback value.
  UpdateDeviceStatusResponse:
    type: object
    properties: {}
    description: The response to the request to update the device status.
  UpdateDeviceStatusRequest:
    type: object
    required:
      - AccessToken
      - DeviceKey
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token.
      DeviceKey:
        $ref: '#/definitions/DeviceKeyType'
        description: The device key.
      DeviceRememberedStatus:
        $ref: '#/definitions/DeviceRememberedStatusType'
        description: The status of whether a device is remembered.
    description: Represents the request to update the device status.
  UpdateGroupResponse:
    type: object
    properties:
      Group:
        $ref: '#/definitions/GroupType'
        description: The group object for the group.
  UpdateGroupRequest:
    type: object
    required:
      - GroupName
      - UserPoolId
    properties:
      GroupName:
        $ref: '#/definitions/GroupNameType'
        description: The name of the group.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      Description:
        $ref: '#/definitions/DescriptionType'
        description: A string containing the new description of the group.
      RoleArn:
        $ref: '#/definitions/ArnType'
        description: 'The new role ARN for the group. This is used for setting the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the token.'
      Precedence:
        $ref: '#/definitions/PrecedenceType'
        description: 'The new precedence value for the group. For more information about this parameter, see .'
  UpdateIdentityProviderResponse:
    type: object
    required:
      - IdentityProvider
    properties:
      IdentityProvider:
        $ref: '#/definitions/IdentityProviderType'
        description: The identity provider object.
  UpdateIdentityProviderRequest:
    type: object
    required:
      - UserPoolId
      - ProviderName
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      ProviderName:
        $ref: '#/definitions/ProviderNameType'
        description: The identity provider name.
      ProviderDetails:
        $ref: '#/definitions/ProviderDetailsType'
        description: 'The identity provider details to be updated, such as <code>MetadataURL</code> and <code>MetadataFile</code>.'
      AttributeMapping:
        $ref: '#/definitions/AttributeMappingType'
        description: The identity provider attribute mapping to be changed.
      IdpIdentifiers:
        $ref: '#/definitions/IdpIdentifiersListType'
        description: A list of identity provider identifiers.
  UpdateResourceServerResponse:
    type: object
    required:
      - ResourceServer
    properties:
      ResourceServer:
        $ref: '#/definitions/ResourceServerType'
        description: The resource server.
  UpdateResourceServerRequest:
    type: object
    required:
      - UserPoolId
      - Identifier
      - Name
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      Identifier:
        $ref: '#/definitions/ResourceServerIdentifierType'
        description: The identifier for the resource server.
      Name:
        $ref: '#/definitions/ResourceServerNameType'
        description: The name of the resource server.
      Scopes:
        $ref: '#/definitions/ResourceServerScopeListType'
        description: The scope values to be set for the resource server.
  UpdateUserAttributesResponse:
    type: object
    properties:
      CodeDeliveryDetailsList:
        $ref: '#/definitions/CodeDeliveryDetailsListType'
        description: The code delivery details list from the server for the request to update user attributes.
    description: Represents the response from the server for the request to update user attributes.
  UpdateUserAttributesRequest:
    type: object
    required:
      - UserAttributes
      - AccessToken
    properties:
      UserAttributes:
        $ref: '#/definitions/AttributeListType'
        description: '<p>An array of name-value pairs representing user attributes.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>'
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token for the request to update user attributes.
    description: Represents the request to update user attributes.
  UpdateUserPoolResponse:
    type: object
    properties: {}
    description: Represents the response from the server when you make a request to update the user pool.
  UpdateUserPoolRequest:
    type: object
    required:
      - UserPoolId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool you want to update.
      Policies:
        $ref: '#/definitions/UserPoolPolicyType'
        description: A container with the policies you wish to update in a user pool.
      LambdaConfig:
        $ref: '#/definitions/LambdaConfigType'
        description: The AWS Lambda configuration information from the request to update the user pool.
      AutoVerifiedAttributes:
        $ref: '#/definitions/VerifiedAttributesListType'
        description: The attributes that are automatically verified when the Amazon Cognito service makes a request to update user pools.
      SmsVerificationMessage:
        $ref: '#/definitions/SmsVerificationMessageType'
        description: A container with information about the SMS verification message.
      EmailVerificationMessage:
        $ref: '#/definitions/EmailVerificationMessageType'
        description: The contents of the email verification message.
      EmailVerificationSubject:
        $ref: '#/definitions/EmailVerificationSubjectType'
        description: The subject of the email verification message.
      VerificationMessageTemplate:
        $ref: '#/definitions/VerificationMessageTemplateType'
        description: The template for verification messages.
      SmsAuthenticationMessage:
        $ref: '#/definitions/SmsVerificationMessageType'
        description: The contents of the SMS authentication message.
      MfaConfiguration:
        $ref: '#/definitions/UserPoolMfaType'
        description: '<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>'
      DeviceConfiguration:
        $ref: '#/definitions/DeviceConfigurationType'
        description: Device configuration.
      EmailConfiguration:
        $ref: '#/definitions/EmailConfigurationType'
        description: Email configuration.
      SmsConfiguration:
        $ref: '#/definitions/SmsConfigurationType'
        description: SMS configuration.
      UserPoolTags:
        $ref: '#/definitions/UserPoolTagsType'
        description: 'The cost allocation tags for the user pool. For more information, see <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html">Adding Cost Allocation Tags to Your User Pool</a> '
      AdminCreateUserConfig:
        $ref: '#/definitions/AdminCreateUserConfigType'
        description: The configuration for <code>AdminCreateUser</code> requests.
      UserPoolAddOns:
        $ref: '#/definitions/UserPoolAddOnsType'
        description: Used to enable advanced security risk detection. Set the key <code>AdvancedSecurityMode</code> to the value "AUDIT".
    description: Represents the request to update the user pool.
  ConcurrentModificationException: {}
  UpdateUserPoolClientResponse:
    type: object
    properties:
      UserPoolClient:
        $ref: '#/definitions/UserPoolClientType'
        description: The user pool client value from the response from the server when an update user pool client request is made.
    description: Represents the response from the server to the request to update the user pool client.
  UpdateUserPoolClientRequest:
    type: object
    required:
      - UserPoolId
      - ClientId
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to update the user pool client.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The ID of the client associated with the user pool.
      ClientName:
        $ref: '#/definitions/ClientNameType'
        description: The client name from the update user pool client request.
      RefreshTokenValidity:
        $ref: '#/definitions/RefreshTokenValidityType'
        description: 'The time limit, in days, after which the refresh token is no longer valid and cannot be used.'
      ReadAttributes:
        $ref: '#/definitions/ClientPermissionListType'
        description: The read-only attributes of the user pool.
      WriteAttributes:
        $ref: '#/definitions/ClientPermissionListType'
        description: The writeable attributes of the user pool.
      ExplicitAuthFlows:
        $ref: '#/definitions/ExplicitAuthFlowsListType'
        description: Explicit authentication flows.
      SupportedIdentityProviders:
        $ref: '#/definitions/SupportedIdentityProvidersListType'
        description: A list of provider names for the identity providers that are supported on this client.
      CallbackURLs:
        $ref: '#/definitions/CallbackURLsListType'
        description: '<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
      LogoutURLs:
        $ref: '#/definitions/LogoutURLsListType'
        description: A list of allowed logout URLs for the identity providers.
      DefaultRedirectURI:
        $ref: '#/definitions/RedirectUrlType'
        description: '<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
      AllowedOAuthFlows:
        $ref: '#/definitions/OAuthFlowsType'
        description: '<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>'
      AllowedOAuthScopes:
        $ref: '#/definitions/ScopeListType'
        description: 'A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>, and <code>"Cognito"</code>.'
      AllowedOAuthFlowsUserPoolClient:
        $ref: '#/definitions/BooleanType'
        description: Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
      AnalyticsConfiguration:
        $ref: '#/definitions/AnalyticsConfigurationType'
        description: The Amazon Pinpoint analytics configuration for collecting metrics for this user pool.
    description: Represents the request to update the user pool client.
  VerifySoftwareTokenResponse:
    type: object
    properties:
      Status:
        $ref: '#/definitions/VerifySoftwareTokenResponseType'
        description: The status of the verify software token.
      Session:
        $ref: '#/definitions/SessionType'
        description: The session which should be passed both ways in challenge-response calls to the service.
  VerifySoftwareTokenRequest:
    type: object
    required:
      - UserCode
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token.
      Session:
        $ref: '#/definitions/SessionType'
        description: The session which should be passed both ways in challenge-response calls to the service.
      UserCode:
        $ref: '#/definitions/SoftwareTokenMFAUserCodeType'
        description: 'The one time password computed using the secret code returned by '
      FriendlyDeviceName:
        $ref: '#/definitions/StringType'
        description: The friendly device name.
  EnableSoftwareTokenMFAException: {}
  VerifyUserAttributeResponse:
    type: object
    properties: {}
    description: A container representing the response from the server from the request to verify user attributes.
  VerifyUserAttributeRequest:
    type: object
    required:
      - AccessToken
      - AttributeName
      - Code
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: Represents the access token of the request to verify user attributes.
      AttributeName:
        $ref: '#/definitions/AttributeNameType'
        description: The attribute name in the request to verify user attributes.
      Code:
        $ref: '#/definitions/ConfirmationCodeType'
        description: The verification code in the request to verify user attributes.
    description: Represents the request to verify user attributes.
  AWSAccountIdType:
    type: string
  AccountTakeoverActionNotifyType:
    type: boolean
  AccountTakeoverEventActionType:
    type: string
    enum:
      - BLOCK
      - MFA_IF_CONFIGURED
      - MFA_REQUIRED
      - NO_ACTION
  AccountTakeoverActionType:
    type: object
    required:
      - Notify
      - EventAction
    properties:
      Notify:
        $ref: '#/definitions/AccountTakeoverActionNotifyType'
        description: Flag specifying whether to send a notification.
      EventAction:
        $ref: '#/definitions/AccountTakeoverEventActionType'
        description: '<p>The event action.</p> <ul> <li> <p> <code>BLOCK</code> Choosing this action will block the request.</p> </li> <li> <p> <code>MFA_IF_CONFIGURED</code> Throw MFA challenge if user has configured it, else allow the request.</p> </li> <li> <p> <code>MFA_REQUIRED</code> Throw MFA challenge if user has configured it, else block the request.</p> </li> <li> <p> <code>NO_ACTION</code> Allow the user sign-in.</p> </li> </ul>'
    description: Account takeover action type.
  AccountTakeoverActionsType:
    type: object
    properties:
      LowAction:
        $ref: '#/definitions/AccountTakeoverActionType'
        description: Action to take for a low risk.
      MediumAction:
        $ref: '#/definitions/AccountTakeoverActionType'
        description: Action to take for a medium risk.
      HighAction:
        $ref: '#/definitions/AccountTakeoverActionType'
        description: Action to take for a high risk.
    description: Account takeover actions type.
  NotifyConfigurationType:
    type: object
    required:
      - SourceArn
    properties:
      From:
        $ref: '#/definitions/StringType'
        description: 'The email address that is sending the email. It must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.'
      ReplyTo:
        $ref: '#/definitions/StringType'
        description: The destination to which the receiver of an email should reply to.
      SourceArn:
        $ref: '#/definitions/ArnType'
        description: The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. It permits Amazon Cognito to send for the email address specified in the <code>From</code> parameter.
      BlockEmail:
        $ref: '#/definitions/NotifyEmailType'
        description: Email template used when a detected risk event is blocked.
      NoActionEmail:
        $ref: '#/definitions/NotifyEmailType'
        description: The email template used when a detected risk event is allowed.
      MfaEmail:
        $ref: '#/definitions/NotifyEmailType'
        description: The MFA email template used when MFA is challenged as part of a detected risk.
    description: The notify configuration type.
  AccountTakeoverRiskConfigurationType:
    type: object
    required:
      - Actions
    properties:
      NotifyConfiguration:
        $ref: '#/definitions/NotifyConfigurationType'
        description: The notify configuration used to construct email notifications.
      Actions:
        $ref: '#/definitions/AccountTakeoverActionsType'
        description: Account takeover risk configuration actions
    description: Configuration for mitigation actions and notification for different levels of risk detected for a potential account takeover.
  UserPoolIdType:
    type: string
    pattern: '[\w-]+_[0-9a-zA-Z]+'
    minLength: 1
    maxLength: 55
  CustomAttributesListType:
    type: array
    items:
      $ref: '#/definitions/SchemaAttributeType'
    minItems: 1
    maxItems: 25
  UsernameType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
    minLength: 1
    maxLength: 128
    format: password
  GroupNameType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
    minLength: 1
    maxLength: 128
  BooleanType:
    type: boolean
  AdminCreateUserUnusedAccountValidityDaysType:
    type: integer
    minimum: 0
    maximum: 365
  MessageTemplateType:
    type: object
    properties:
      SMSMessage:
        $ref: '#/definitions/SmsVerificationMessageType'
        description: The message template for SMS messages.
      EmailMessage:
        $ref: '#/definitions/EmailVerificationMessageType'
        description: The message template for email messages.
      EmailSubject:
        $ref: '#/definitions/EmailVerificationSubjectType'
        description: The subject line for email messages.
    description: The message template structure.
  AdminCreateUserConfigType:
    type: object
    properties:
      AllowAdminCreateUserOnly:
        $ref: '#/definitions/BooleanType'
        description: Set to <code>True</code> if only the administrator is allowed to create user profiles. Set to <code>False</code> if users can sign themselves up via an app.
      UnusedAccountValidityDays:
        $ref: '#/definitions/AdminCreateUserUnusedAccountValidityDaysType'
        description: 'The user account expiration limit, in days, after which the account is no longer usable. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again, specifying <code>"RESEND"</code> for the <code>MessageAction</code> parameter. The default value for this parameter is 7.'
      InviteMessageTemplate:
        $ref: '#/definitions/MessageTemplateType'
        description: '<p>The message template to be used for the welcome message to new users.</p> <p>See also <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization">Customizing User Invitation Messages</a>.</p>'
    description: The configuration for creating a new user profile.
  AttributeListType:
    type: array
    items:
      $ref: '#/definitions/AttributeType'
  PasswordType:
    type: string
    pattern: '[\S]+'
    minLength: 6
    maxLength: 256
    format: password
  ForceAliasCreation:
    type: boolean
  MessageActionType:
    type: string
    enum:
      - RESEND
      - SUPPRESS
  DeliveryMediumListType:
    type: array
    items:
      $ref: '#/definitions/DeliveryMediumType'
  UserType:
    type: object
    properties:
      Username:
        $ref: '#/definitions/UsernameType'
        description: The user name of the user you wish to describe.
      Attributes:
        $ref: '#/definitions/AttributeListType'
        description: A container with information about the user type attributes.
      UserCreateDate:
        $ref: '#/definitions/DateType'
        description: The creation date of the user.
      UserLastModifiedDate:
        $ref: '#/definitions/DateType'
        description: The last modified date of the user.
      Enabled:
        $ref: '#/definitions/BooleanType'
        description: Specifies whether the user is enabled.
      UserStatus:
        $ref: '#/definitions/UserStatusType'
        description: '<p>The user status. Can be one of the following:</p> <ul> <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li> <li> <p>CONFIRMED - User has been confirmed.</p> </li> <li> <p>ARCHIVED - User is no longer active.</p> </li> <li> <p>COMPROMISED - User is disabled due to a potential security threat.</p> </li> <li> <p>UNKNOWN - User status is not known.</p> </li> </ul>'
      MFAOptions:
        $ref: '#/definitions/MFAOptionListType'
        description: The MFA options for the user.
    description: The user type.
  AttributeNameListType:
    type: array
    items:
      $ref: '#/definitions/AttributeNameType'
  StringType:
    type: string
  ProviderUserIdentifierType:
    type: object
    properties:
      ProviderName:
        $ref: '#/definitions/ProviderNameType'
        description: 'The name of the provider, for example, Facebook, Google, or Login with Amazon.'
      ProviderAttributeName:
        $ref: '#/definitions/StringType'
        description: 'The name of the provider attribute to link to, for example, <code>NameID</code>.'
      ProviderAttributeValue:
        $ref: '#/definitions/StringType'
        description: 'The value of the provider attribute to link to, for example, <code>xxxxx_account</code>.'
    description: A container for information about an identity provider for a user pool.
  DeviceKeyType:
    type: string
    pattern: '[\w-]+_[0-9a-f-]+'
    minLength: 1
    maxLength: 55
  DeviceType:
    type: object
    properties:
      DeviceKey:
        $ref: '#/definitions/DeviceKeyType'
        description: The device key.
      DeviceAttributes:
        $ref: '#/definitions/AttributeListType'
        description: The device attributes.
      DeviceCreateDate:
        $ref: '#/definitions/DateType'
        description: The creation date of the device.
      DeviceLastModifiedDate:
        $ref: '#/definitions/DateType'
        description: The last modified date of the device.
      DeviceLastAuthenticatedDate:
        $ref: '#/definitions/DateType'
        description: The date in which the device was last authenticated.
    description: The device type.
  DateType:
    type: string
    format: date-time
  UserStatusType:
    type: string
    enum:
      - UNCONFIRMED
      - CONFIRMED
      - ARCHIVED
      - COMPROMISED
      - UNKNOWN
      - RESET_REQUIRED
      - FORCE_CHANGE_PASSWORD
  MFAOptionListType:
    type: array
    items:
      $ref: '#/definitions/MFAOptionType'
  UserMFASettingListType:
    type: array
    items:
      $ref: '#/definitions/StringType'
  ClientIdType:
    type: string
    pattern: '[\w+]+'
    minLength: 1
    maxLength: 128
    format: password
  AuthFlowType:
    type: string
    enum:
      - USER_SRP_AUTH
      - REFRESH_TOKEN_AUTH
      - REFRESH_TOKEN
      - CUSTOM_AUTH
      - ADMIN_NO_SRP_AUTH
      - USER_PASSWORD_AUTH
  AuthParametersType:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/StringType'
        value:
          $ref: '#/definitions/StringType'
  ClientMetadataType:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/StringType'
        value:
          $ref: '#/definitions/StringType'
  AnalyticsMetadataType:
    type: object
    properties:
      AnalyticsEndpointId:
        $ref: '#/definitions/StringType'
        description: The endpoint ID.
    description: '<p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p>'
  ContextDataType:
    type: object
    required:
      - IpAddress
      - ServerName
      - ServerPath
      - HttpHeaders
    properties:
      IpAddress:
        $ref: '#/definitions/StringType'
        description: Source IP address of your user.
      ServerName:
        $ref: '#/definitions/StringType'
        description: Your server endpoint where this API is invoked.
      ServerPath:
        $ref: '#/definitions/StringType'
        description: 'Your server path where this API is invoked. '
      HttpHeaders:
        $ref: '#/definitions/HttpHeaderList'
        description: HttpHeaders received on your server in same order.
      EncodedData:
        $ref: '#/definitions/StringType'
        description: 'Encoded data containing device fingerprinting details, collected using the Amazon Cognito context data collection library.'
    description: Contextual user data type used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
  ChallengeNameType:
    type: string
    enum:
      - SMS_MFA
      - SOFTWARE_TOKEN_MFA
      - SELECT_MFA_TYPE
      - MFA_SETUP
      - PASSWORD_VERIFIER
      - CUSTOM_CHALLENGE
      - DEVICE_SRP_AUTH
      - DEVICE_PASSWORD_VERIFIER
      - ADMIN_NO_SRP_AUTH
      - NEW_PASSWORD_REQUIRED
  SessionType:
    type: string
    minLength: 20
    maxLength: 2048
  ChallengeParametersType:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/StringType'
        value:
          $ref: '#/definitions/StringType'
  AuthenticationResultType:
    type: object
    properties:
      AccessToken:
        $ref: '#/definitions/TokenModelType'
        description: The access token.
      ExpiresIn:
        $ref: '#/definitions/IntegerType'
        description: The expiration period of the authentication result in seconds.
      TokenType:
        $ref: '#/definitions/StringType'
        description: The token type.
      RefreshToken:
        $ref: '#/definitions/TokenModelType'
        description: The refresh token.
      IdToken:
        $ref: '#/definitions/TokenModelType'
        description: The ID token.
      NewDeviceMetadata:
        $ref: '#/definitions/NewDeviceMetadataType'
        description: The new device metadata from an authentication result.
    description: The authentication result.
  QueryLimitType:
    type: integer
    minimum: 0
    maximum: 60
  SearchPaginationTokenType:
    type: string
    pattern: '[\S]+'
    minLength: 1
  DeviceListType:
    type: array
    items:
      $ref: '#/definitions/DeviceType'
  PaginationKey:
    type: string
    pattern: '[\S]+'
    minLength: 1
  GroupListType:
    type: array
    items:
      $ref: '#/definitions/GroupType'
  AuthEventsType:
    type: array
    items:
      $ref: '#/definitions/AuthEventType'
  ChallengeResponsesType:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/StringType'
        value:
          $ref: '#/definitions/StringType'
  SMSMfaSettingsType:
    type: object
    properties:
      Enabled:
        $ref: '#/definitions/BooleanType'
        description: Specifies whether SMS text message MFA is enabled.
      PreferredMfa:
        $ref: '#/definitions/BooleanType'
        description: The preferred MFA method.
    description: The SMS multi-factor authentication (MFA) settings type.
  SoftwareTokenMfaSettingsType:
    type: object
    properties:
      Enabled:
        $ref: '#/definitions/BooleanType'
        description: Specifies whether software token MFA is enabled.
      PreferredMfa:
        $ref: '#/definitions/BooleanType'
        description: The preferred MFA method.
    description: The type used for enabling software token MFA at the user level.
  EventIdType:
    type: string
    pattern: '[\w+-]+'
    minLength: 1
    maxLength: 50
  FeedbackValueType:
    type: string
    enum:
      - Valid
      - Invalid
  DeviceRememberedStatusType:
    type: string
    enum:
      - remembered
      - not_remembered
  AdvancedSecurityModeType:
    type: string
    enum:
      - 'OFF'
      - AUDIT
      - ENFORCED
  AliasAttributeType:
    type: string
    enum:
      - phone_number
      - email
      - preferred_username
  AliasAttributesListType:
    type: array
    items:
      $ref: '#/definitions/AliasAttributeType'
  HexStringType:
    type: string
    pattern: '^[0-9a-fA-F]+$'
  ArnType:
    type: string
    pattern: 'arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?'
    minLength: 20
    maxLength: 2048
  AnalyticsConfigurationType:
    type: object
    required:
      - ApplicationId
      - RoleArn
      - ExternalId
    properties:
      ApplicationId:
        $ref: '#/definitions/HexStringType'
        description: The application ID for an Amazon Pinpoint application.
      RoleArn:
        $ref: '#/definitions/ArnType'
        description: The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.
      ExternalId:
        $ref: '#/definitions/StringType'
        description: The external ID.
      UserDataShared:
        $ref: '#/definitions/BooleanType'
        description: 'If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.'
    description: The Amazon Pinpoint analytics configuration for collecting metrics for a user pool.
  TokenModelType:
    type: string
    pattern: '[A-Za-z0-9-_=.]+'
    format: password
  SecretCodeType:
    type: string
    pattern: '[A-Za-z0-9]+'
    minLength: 16
    format: password
  AttributeDataType:
    type: string
    enum:
      - String
      - Number
      - DateTime
      - Boolean
  AttributeType:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/AttributeNameType'
        description: The name of the attribute.
      Value:
        $ref: '#/definitions/AttributeValueType'
        description: The value of the attribute.
    description: Specifies whether the attribute is standard or custom.
  AttributeMappingKeyType:
    type: string
    minLength: 1
    maxLength: 32
  AttributeMappingType:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/AttributeMappingKeyType'
        value:
          $ref: '#/definitions/StringType'
  AttributeNameType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
    minLength: 1
    maxLength: 32
  AttributeValueType:
    type: string
    maxLength: 2048
    format: password
  EventType:
    type: string
    enum:
      - SignIn
      - SignUp
      - ForgotPassword
  EventResponseType:
    type: string
    enum:
      - Success
      - Failure
  EventRiskType:
    type: object
    properties:
      RiskDecision:
        $ref: '#/definitions/RiskDecisionType'
        description: The risk decision.
      RiskLevel:
        $ref: '#/definitions/RiskLevelType'
        description: The risk level.
    description: The event risk type.
  ChallengeResponseListType:
    type: array
    items:
      $ref: '#/definitions/ChallengeResponseType'
  EventContextDataType:
    type: object
    properties:
      IpAddress:
        $ref: '#/definitions/StringType'
        description: The user's IP address.
      DeviceName:
        $ref: '#/definitions/StringType'
        description: The user's device name.
      Timezone:
        $ref: '#/definitions/StringType'
        description: The user's time zone.
      City:
        $ref: '#/definitions/StringType'
        description: The user's city.
      Country:
        $ref: '#/definitions/StringType'
        description: The user's country.
    description: Specifies the user context data captured at the time of an event request.
  EventFeedbackType:
    type: object
    required:
      - FeedbackValue
      - Provider
    properties:
      FeedbackValue:
        $ref: '#/definitions/FeedbackValueType'
        description: The event feedback value.
      Provider:
        $ref: '#/definitions/StringType'
        description: The provider.
      FeedbackDate:
        $ref: '#/definitions/DateType'
        description: The event feedback date.
    description: Specifies the event feedback type.
  AuthEventType:
    type: object
    properties:
      EventId:
        $ref: '#/definitions/StringType'
        description: The event ID.
      EventType:
        $ref: '#/definitions/EventType'
        description: The event type.
      CreationDate:
        $ref: '#/definitions/DateType'
        description: The creation date
      EventResponse:
        $ref: '#/definitions/EventResponseType'
        description: The event response.
      EventRisk:
        $ref: '#/definitions/EventRiskType'
        description: The event risk.
      ChallengeResponses:
        $ref: '#/definitions/ChallengeResponseListType'
        description: The challenge responses.
      EventContextData:
        $ref: '#/definitions/EventContextDataType'
        description: The user context data captured at the time of an event request. It provides additional information about the client from which event the request is received.
      EventFeedback:
        $ref: '#/definitions/EventFeedbackType'
        description: 'A flag specifying the user feedback captured at the time of an event request is good or bad. '
    description: The authentication event type.
  IntegerType:
    type: integer
  NewDeviceMetadataType:
    type: object
    properties:
      DeviceKey:
        $ref: '#/definitions/DeviceKeyType'
        description: The device key.
      DeviceGroupKey:
        $ref: '#/definitions/StringType'
        description: The device group key.
    description: The new device metadata type.
  BlockedIPRangeListType:
    type: array
    items:
      $ref: '#/definitions/StringType'
    maxItems: 20
  CSSType:
    type: string
  CSSVersionType:
    type: string
  RedirectUrlType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
    minLength: 1
    maxLength: 1024
  CallbackURLsListType:
    type: array
    items:
      $ref: '#/definitions/RedirectUrlType'
    minItems: 0
    maxItems: 100
  ChallengeName:
    type: string
    enum:
      - Password
      - Mfa
  ChallengeResponse:
    type: string
    enum:
      - Success
      - Failure
  ChallengeResponseType:
    type: object
    properties:
      ChallengeName:
        $ref: '#/definitions/ChallengeName'
        description: The challenge name
      ChallengeResponse:
        $ref: '#/definitions/ChallengeResponse'
        description: The challenge response.
    description: The challenge response type.
  ClientNameType:
    type: string
    pattern: '[\w\s+=,.@-]+'
    minLength: 1
    maxLength: 128
  ClientPermissionType:
    type: string
    minLength: 1
    maxLength: 2048
  ClientPermissionListType:
    type: array
    items:
      $ref: '#/definitions/ClientPermissionType'
  ClientSecretType:
    type: string
    pattern: '[\w+]+'
    minLength: 1
    maxLength: 64
    format: password
  CodeDeliveryDetailsType:
    type: object
    properties:
      Destination:
        $ref: '#/definitions/StringType'
        description: The destination for the code delivery details.
      DeliveryMedium:
        $ref: '#/definitions/DeliveryMediumType'
        description: The delivery medium (email message or phone number).
      AttributeName:
        $ref: '#/definitions/AttributeNameType'
        description: The attribute name.
    description: The code delivery details being returned from the server.
  CodeDeliveryDetailsListType:
    type: array
    items:
      $ref: '#/definitions/CodeDeliveryDetailsType'
  DeliveryMediumType:
    type: string
    enum:
      - SMS
      - EMAIL
  CompletionMessageType:
    type: string
    pattern: '[\w]+'
    minLength: 1
    maxLength: 128
  CompromisedCredentialsEventActionType:
    type: string
    enum:
      - BLOCK
      - NO_ACTION
  CompromisedCredentialsActionsType:
    type: object
    required:
      - EventAction
    properties:
      EventAction:
        $ref: '#/definitions/CompromisedCredentialsEventActionType'
        description: The event action.
    description: The compromised credentials actions type
  EventFiltersType:
    type: array
    items:
      $ref: '#/definitions/EventFilterType'
  CompromisedCredentialsRiskConfigurationType:
    type: object
    required:
      - Actions
    properties:
      EventFilter:
        $ref: '#/definitions/EventFiltersType'
        description: Perform the action for these events. The default is to perform all events if no event filter is specified.
      Actions:
        $ref: '#/definitions/CompromisedCredentialsActionsType'
        description: The compromised credentials risk configuration actions.
    description: The compromised credentials risk configuration type.
  DeviceSecretVerifierConfigType:
    type: object
    properties:
      PasswordVerifier:
        $ref: '#/definitions/StringType'
        description: The password verifier.
      Salt:
        $ref: '#/definitions/StringType'
        description: The salt.
    description: The device verifier against which it will be authenticated.
  DeviceNameType:
    type: string
    minLength: 1
    maxLength: 1024
  SecretHashType:
    type: string
    pattern: '[\w+=/]+'
    minLength: 1
    maxLength: 128
    format: password
  ConfirmationCodeType:
    type: string
    pattern: '[\S]+'
    minLength: 1
    maxLength: 2048
  UserContextDataType:
    type: object
    properties:
      EncodedData:
        $ref: '#/definitions/StringType'
        description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
    description: 'Contextual data such as the user''s device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.'
  HttpHeaderList:
    type: array
    items:
      $ref: '#/definitions/HttpHeader'
  DescriptionType:
    type: string
    maxLength: 2048
  PrecedenceType:
    type: integer
    minimum: 0
  GroupType:
    type: object
    properties:
      GroupName:
        $ref: '#/definitions/GroupNameType'
        description: The name of the group.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      Description:
        $ref: '#/definitions/DescriptionType'
        description: A string containing the description of the group.
      RoleArn:
        $ref: '#/definitions/ArnType'
        description: The role ARN for the group.
      Precedence:
        $ref: '#/definitions/PrecedenceType'
        description: '<p>A nonnegative integer value that specifies the precedence of this group relative to the other groups that a user can belong to in the user pool. If a user belongs to two or more groups, it is the group with the highest precedence whose role ARN will be used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the user''s tokens. Groups with higher <code>Precedence</code> values take precedence over groups with lower <code>Precedence</code> values or with null <code>Precedence</code> values.</p> <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither group takes precedence over the other. If two groups with the same <code>Precedence</code> have the same role ARN, that role is used in the <code>cognito:preferred_role</code> claim in tokens for users in each group. If the two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is not set in users'' tokens.</p> <p>The default <code>Precedence</code> value is null.</p>'
      LastModifiedDate:
        $ref: '#/definitions/DateType'
        description: The date the group was last modified.
      CreationDate:
        $ref: '#/definitions/DateType'
        description: The date the group was created.
    description: The group type.
  ProviderNameTypeV1:
    type: string
    pattern: '[^_][\p{L}\p{M}\p{S}\p{N}\p{P}][^_]+'
    minLength: 1
    maxLength: 32
  IdentityProviderTypeType:
    type: string
    enum:
      - SAML
      - Facebook
      - Google
      - LoginWithAmazon
      - OIDC
  ProviderDetailsType:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/StringType'
        value:
          $ref: '#/definitions/StringType'
  IdpIdentifiersListType:
    type: array
    items:
      $ref: '#/definitions/IdpIdentifierType'
    minItems: 0
    maxItems: 50
  IdentityProviderType:
    type: object
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      ProviderName:
        $ref: '#/definitions/ProviderNameType'
        description: The identity provider name.
      ProviderType:
        $ref: '#/definitions/IdentityProviderTypeType'
        description: The identity provider type.
      ProviderDetails:
        $ref: '#/definitions/ProviderDetailsType'
        description: 'The identity provider details, such as <code>MetadataURL</code> and <code>MetadataFile</code>.'
      AttributeMapping:
        $ref: '#/definitions/AttributeMappingType'
        description: A mapping of identity provider attributes to standard and custom user pool attributes.
      IdpIdentifiers:
        $ref: '#/definitions/IdpIdentifiersListType'
        description: A list of identity provider identifiers.
      LastModifiedDate:
        $ref: '#/definitions/DateType'
        description: The date the identity provider was last modified.
      CreationDate:
        $ref: '#/definitions/DateType'
        description: The date the identity provider was created.
    description: A container for information about an identity provider.
  ResourceServerIdentifierType:
    type: string
    pattern: '[\x21\x23-\x5B\x5D-\x7E]+'
    minLength: 1
    maxLength: 256
  ResourceServerNameType:
    type: string
    pattern: '[\w\s+=,.@-]+'
    minLength: 1
    maxLength: 256
  ResourceServerScopeListType:
    type: array
    items:
      $ref: '#/definitions/ResourceServerScopeType'
    maxItems: 25
  ResourceServerType:
    type: object
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool that hosts the resource server.
      Identifier:
        $ref: '#/definitions/ResourceServerIdentifierType'
        description: The identifier for the resource server.
      Name:
        $ref: '#/definitions/ResourceServerNameType'
        description: The name of the resource server.
      Scopes:
        $ref: '#/definitions/ResourceServerScopeListType'
        description: A list of scopes that are defined for the resource server.
    description: A container for information about a resource server for a user pool.
  UserImportJobNameType:
    type: string
    pattern: '[\w\s+=,.@-]+'
    minLength: 1
    maxLength: 128
  UserImportJobType:
    type: object
    properties:
      JobName:
        $ref: '#/definitions/UserImportJobNameType'
        description: The job name for the user import job.
      JobId:
        $ref: '#/definitions/UserImportJobIdType'
        description: The job ID for the user import job.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool that the users are being imported into.
      PreSignedUrl:
        $ref: '#/definitions/PreSignedUrlType'
        description: The pre-signed URL to be used to upload the <code>.csv</code> file.
      CreationDate:
        $ref: '#/definitions/DateType'
        description: The date the user import job was created.
      StartDate:
        $ref: '#/definitions/DateType'
        description: The date when the user import job was started.
      CompletionDate:
        $ref: '#/definitions/DateType'
        description: The date when the user import job was completed.
      Status:
        $ref: '#/definitions/UserImportJobStatusType'
        description: '<p>The status of the user import job. One of the following:</p> <ul> <li> <p> <code>Created</code> - The job was created but not started.</p> </li> <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li> <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li> <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li> <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li> <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li> <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li> <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job cannot be started.</p> </li> </ul>'
      CloudWatchLogsRoleArn:
        $ref: '#/definitions/ArnType'
        description: 'The role ARN for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.'
      ImportedUsers:
        $ref: '#/definitions/LongType'
        description: The number of users that were successfully imported.
      SkippedUsers:
        $ref: '#/definitions/LongType'
        description: The number of users that were skipped.
      FailedUsers:
        $ref: '#/definitions/LongType'
        description: The number of users that could not be imported.
      CompletionMessage:
        $ref: '#/definitions/CompletionMessageType'
        description: The message returned when the user import job is completed.
    description: The user import job type.
  GenerateSecret:
    type: boolean
  RefreshTokenValidityType:
    type: integer
    minimum: 0
    maximum: 3650
  ExplicitAuthFlowsListType:
    type: array
    items:
      $ref: '#/definitions/ExplicitAuthFlowsType'
  SupportedIdentityProvidersListType:
    type: array
    items:
      $ref: '#/definitions/ProviderNameType'
  LogoutURLsListType:
    type: array
    items:
      $ref: '#/definitions/RedirectUrlType'
    minItems: 0
    maxItems: 100
  OAuthFlowsType:
    type: array
    items:
      $ref: '#/definitions/OAuthFlowType'
    minItems: 0
    maxItems: 3
  ScopeListType:
    type: array
    items:
      $ref: '#/definitions/ScopeType'
    maxItems: 25
  UserPoolClientType:
    type: object
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool client.
      ClientName:
        $ref: '#/definitions/ClientNameType'
        description: The client name from the user pool request of the client type.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The ID of the client associated with the user pool.
      ClientSecret:
        $ref: '#/definitions/ClientSecretType'
        description: The client secret from the user pool request of the client type.
      LastModifiedDate:
        $ref: '#/definitions/DateType'
        description: The date the user pool client was last modified.
      CreationDate:
        $ref: '#/definitions/DateType'
        description: The date the user pool client was created.
      RefreshTokenValidity:
        $ref: '#/definitions/RefreshTokenValidityType'
        description: 'The time limit, in days, after which the refresh token is no longer valid and cannot be used.'
      ReadAttributes:
        $ref: '#/definitions/ClientPermissionListType'
        description: The Read-only attributes.
      WriteAttributes:
        $ref: '#/definitions/ClientPermissionListType'
        description: The writeable attributes.
      ExplicitAuthFlows:
        $ref: '#/definitions/ExplicitAuthFlowsListType'
        description: The explicit authentication flows.
      SupportedIdentityProviders:
        $ref: '#/definitions/SupportedIdentityProvidersListType'
        description: A list of provider names for the identity providers that are supported on this client.
      CallbackURLs:
        $ref: '#/definitions/CallbackURLsListType'
        description: '<p>A list of allowed redirect (callback) URLs for the identity providers.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
      LogoutURLs:
        $ref: '#/definitions/LogoutURLsListType'
        description: A list of allowed logout URLs for the identity providers.
      DefaultRedirectURI:
        $ref: '#/definitions/RedirectUrlType'
        description: '<p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p> <p>A redirect URI must:</p> <ul> <li> <p>Be an absolute URI.</p> </li> <li> <p>Be registered with the authorization server.</p> </li> <li> <p>Not include a fragment component.</p> </li> </ul> <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 - Redirection Endpoint</a>.</p> <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing purposes only.</p> <p>App callback URLs such as myapp://example are also supported.</p>'
      AllowedOAuthFlows:
        $ref: '#/definitions/OAuthFlowsType'
        description: '<p>Set to <code>code</code> to initiate a code grant flow, which provides an authorization code as the response. This code can be exchanged for access tokens with the token endpoint.</p> <p>Set to <code>token</code> to specify that the client should get the access token (and, optionally, ID token, based on scopes) directly.</p>'
      AllowedOAuthScopes:
        $ref: '#/definitions/ScopeListType'
        description: 'A list of allowed <code>OAuth</code> scopes. Currently supported values are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>, and <code>"Cognito"</code>.'
      AllowedOAuthFlowsUserPoolClient:
        $ref: '#/definitions/BooleanType'
        description: Set to TRUE if the client is allowed to follow the OAuth protocol when interacting with Cognito user pools.
      AnalyticsConfiguration:
        $ref: '#/definitions/AnalyticsConfigurationType'
        description: The Amazon Pinpoint analytics configuration for the user pool client.
    description: Contains information about a user pool client.
  DomainType:
    type: string
    pattern: '^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$'
    minLength: 1
    maxLength: 63
  CustomDomainConfigType:
    type: object
    required:
      - CertificateArn
    properties:
      CertificateArn:
        $ref: '#/definitions/ArnType'
        description: The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.
    description: The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
  UserPoolNameType:
    type: string
    pattern: '[\w\s+=,.@-]+'
    minLength: 1
    maxLength: 128
  UserPoolPolicyType:
    type: object
    properties:
      PasswordPolicy:
        $ref: '#/definitions/PasswordPolicyType'
        description: The password policy.
    description: The policy associated with a user pool.
  LambdaConfigType:
    type: object
    properties:
      PreSignUp:
        $ref: '#/definitions/ArnType'
        description: A pre-registration AWS Lambda trigger.
      CustomMessage:
        $ref: '#/definitions/ArnType'
        description: A custom Message AWS Lambda trigger.
      PostConfirmation:
        $ref: '#/definitions/ArnType'
        description: A post-confirmation AWS Lambda trigger.
      PreAuthentication:
        $ref: '#/definitions/ArnType'
        description: A pre-authentication AWS Lambda trigger.
      PostAuthentication:
        $ref: '#/definitions/ArnType'
        description: A post-authentication AWS Lambda trigger.
      DefineAuthChallenge:
        $ref: '#/definitions/ArnType'
        description: Defines the authentication challenge.
      CreateAuthChallenge:
        $ref: '#/definitions/ArnType'
        description: Creates an authentication challenge.
      VerifyAuthChallengeResponse:
        $ref: '#/definitions/ArnType'
        description: Verifies the authentication challenge response.
      PreTokenGeneration:
        $ref: '#/definitions/ArnType'
        description: A Lambda trigger that is invoked before token generation.
      UserMigration:
        $ref: '#/definitions/ArnType'
        description: The user migration Lambda config type.
    description: Specifies the configuration for AWS Lambda triggers.
  VerifiedAttributesListType:
    type: array
    items:
      $ref: '#/definitions/VerifiedAttributeType'
  UsernameAttributesListType:
    type: array
    items:
      $ref: '#/definitions/UsernameAttributeType'
  SmsVerificationMessageType:
    type: string
    pattern: '.*\{####\}.*'
    minLength: 6
    maxLength: 140
  EmailVerificationMessageType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*\{####\}[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*'
    minLength: 6
    maxLength: 20000
  EmailVerificationSubjectType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s]+'
    minLength: 1
    maxLength: 140
  VerificationMessageTemplateType:
    type: object
    properties:
      SmsMessage:
        $ref: '#/definitions/SmsVerificationMessageType'
        description: The SMS message template.
      EmailMessage:
        $ref: '#/definitions/EmailVerificationMessageType'
        description: The email message template.
      EmailSubject:
        $ref: '#/definitions/EmailVerificationSubjectType'
        description: The subject line for the email message template.
      EmailMessageByLink:
        $ref: '#/definitions/EmailVerificationMessageByLinkType'
        description: The email message template for sending a confirmation link to the user.
      EmailSubjectByLink:
        $ref: '#/definitions/EmailVerificationSubjectByLinkType'
        description: The subject line for the email message template for sending a confirmation link to the user.
      DefaultEmailOption:
        $ref: '#/definitions/DefaultEmailOptionType'
        description: The default email option.
    description: The template for verification messages.
  UserPoolMfaType:
    type: string
    enum:
      - 'OFF'
      - 'ON'
      - OPTIONAL
  DeviceConfigurationType:
    type: object
    properties:
      ChallengeRequiredOnNewDevice:
        $ref: '#/definitions/BooleanType'
        description: Indicates whether a challenge is required on a new device. Only applicable to a new device.
      DeviceOnlyRememberedOnUserPrompt:
        $ref: '#/definitions/BooleanType'
        description: 'If true, a device is only remembered on user prompt.'
    description: The configuration for the user pool's device tracking.
  EmailConfigurationType:
    type: object
    properties:
      SourceArn:
        $ref: '#/definitions/ArnType'
        description: The Amazon Resource Name (ARN) of the email source.
      ReplyToEmailAddress:
        $ref: '#/definitions/EmailAddressType'
        description: The destination to which the receiver of the email should reply to.
    description: The email configuration type.
  SmsConfigurationType:
    type: object
    required:
      - SnsCallerArn
    properties:
      SnsCallerArn:
        $ref: '#/definitions/ArnType'
        description: The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) caller.
      ExternalId:
        $ref: '#/definitions/StringType'
        description: The external ID.
    description: The SMS configuration type.
  UserPoolTagsType:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/StringType'
        value:
          $ref: '#/definitions/StringType'
  SchemaAttributesListType:
    type: array
    items:
      $ref: '#/definitions/SchemaAttributeType'
    minItems: 1
    maxItems: 50
  UserPoolAddOnsType:
    type: object
    required:
      - AdvancedSecurityMode
    properties:
      AdvancedSecurityMode:
        $ref: '#/definitions/AdvancedSecurityModeType'
        description: The advanced security mode.
    description: The user pool add-ons type.
  UserPoolType:
    type: object
    properties:
      Id:
        $ref: '#/definitions/UserPoolIdType'
        description: The ID of the user pool.
      Name:
        $ref: '#/definitions/UserPoolNameType'
        description: The name of the user pool.
      Policies:
        $ref: '#/definitions/UserPoolPolicyType'
        description: The policies associated with the user pool.
      LambdaConfig:
        $ref: '#/definitions/LambdaConfigType'
        description: The AWS Lambda triggers associated with the user pool.
      Status:
        $ref: '#/definitions/StatusType'
        description: The status of a user pool.
      LastModifiedDate:
        $ref: '#/definitions/DateType'
        description: The date the user pool was last modified.
      CreationDate:
        $ref: '#/definitions/DateType'
        description: The date the user pool was created.
      SchemaAttributes:
        $ref: '#/definitions/SchemaAttributesListType'
        description: A container with the schema attributes of a user pool.
      AutoVerifiedAttributes:
        $ref: '#/definitions/VerifiedAttributesListType'
        description: Specifies the attributes that are auto-verified in a user pool.
      AliasAttributes:
        $ref: '#/definitions/AliasAttributesListType'
        description: Specifies the attributes that are aliased in a user pool.
      UsernameAttributes:
        $ref: '#/definitions/UsernameAttributesListType'
        description: Specifies whether email addresses or phone numbers can be specified as usernames when a user signs up.
      SmsVerificationMessage:
        $ref: '#/definitions/SmsVerificationMessageType'
        description: The contents of the SMS verification message.
      EmailVerificationMessage:
        $ref: '#/definitions/EmailVerificationMessageType'
        description: The contents of the email verification message.
      EmailVerificationSubject:
        $ref: '#/definitions/EmailVerificationSubjectType'
        description: The subject of the email verification message.
      VerificationMessageTemplate:
        $ref: '#/definitions/VerificationMessageTemplateType'
        description: The template for verification messages.
      SmsAuthenticationMessage:
        $ref: '#/definitions/SmsVerificationMessageType'
        description: The contents of the SMS authentication message.
      MfaConfiguration:
        $ref: '#/definitions/UserPoolMfaType'
        description: '<p>Can be one of the following values:</p> <ul> <li> <p> <code>OFF</code> - MFA tokens are not required and cannot be specified during user registration.</p> </li> <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you are initially creating a user pool.</p> </li> <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li> </ul>'
      DeviceConfiguration:
        $ref: '#/definitions/DeviceConfigurationType'
        description: The device configuration.
      EstimatedNumberOfUsers:
        $ref: '#/definitions/IntegerType'
        description: A number estimating the size of the user pool.
      EmailConfiguration:
        $ref: '#/definitions/EmailConfigurationType'
        description: The email configuration.
      SmsConfiguration:
        $ref: '#/definitions/SmsConfigurationType'
        description: The SMS configuration.
      UserPoolTags:
        $ref: '#/definitions/UserPoolTagsType'
        description: 'The cost allocation tags for the user pool. For more information, see <a href="http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-cost-allocation-tagging.html">Adding Cost Allocation Tags to Your User Pool</a> '
      SmsConfigurationFailure:
        $ref: '#/definitions/StringType'
        description: The reason why the SMS configuration cannot send the messages to your users.
      EmailConfigurationFailure:
        $ref: '#/definitions/StringType'
        description: The reason why the email configuration cannot send the messages to your users.
      Domain:
        $ref: '#/definitions/DomainType'
        description: Holds the domain prefix if the user pool has a domain associated with it.
      CustomDomain:
        $ref: '#/definitions/DomainType'
      AdminCreateUserConfig:
        $ref: '#/definitions/AdminCreateUserConfigType'
        description: The configuration for <code>AdminCreateUser</code> requests.
      UserPoolAddOns:
        $ref: '#/definitions/UserPoolAddOnsType'
        description: The user pool add-ons.
      Arn:
        $ref: '#/definitions/ArnType'
        description: The Amazon Resource Name (ARN) for the user pool.
    description: A container for information about the user pool.
  CustomAttributeNameType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
    minLength: 1
    maxLength: 20
  SchemaAttributeType:
    type: object
    properties:
      Name:
        $ref: '#/definitions/CustomAttributeNameType'
        description: A schema attribute of the name type.
      AttributeDataType:
        $ref: '#/definitions/AttributeDataType'
        description: The attribute data type.
      DeveloperOnlyAttribute:
        $ref: '#/definitions/BooleanType'
        description: Specifies whether the attribute type is developer only.
      Mutable:
        $ref: '#/definitions/BooleanType'
        description: Specifies whether the value of the attribute can be changed.
      Required:
        $ref: '#/definitions/BooleanType'
        description: 'Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.'
      NumberAttributeConstraints:
        $ref: '#/definitions/NumberAttributeConstraintsType'
        description: Specifies the constraints for an attribute of the number type.
      StringAttributeConstraints:
        $ref: '#/definitions/StringAttributeConstraintsType'
        description: Specifies the constraints for an attribute of the string type.
    description: Contains information about the schema attribute.
  DefaultEmailOptionType:
    type: string
    enum:
      - CONFIRM_WITH_LINK
      - CONFIRM_WITH_CODE
  ProviderNameType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
    minLength: 1
    maxLength: 32
  RiskConfigurationType:
    type: object
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The app client ID.
      CompromisedCredentialsRiskConfiguration:
        $ref: '#/definitions/CompromisedCredentialsRiskConfigurationType'
        description: 'The compromised credentials risk configuration object including the <code>EventFilter</code> and the <code>EventAction</code> '
      AccountTakeoverRiskConfiguration:
        $ref: '#/definitions/AccountTakeoverRiskConfigurationType'
        description: The account takeover risk configuration object including the <code>NotifyConfiguration</code> object and <code>Actions</code> to take in the case of an account takeover.
      RiskExceptionConfiguration:
        $ref: '#/definitions/RiskExceptionConfigurationType'
        description: The configuration to override the risk decision.
      LastModifiedDate:
        $ref: '#/definitions/DateType'
        description: The last modified date.
    description: The risk configuration type.
  UserImportJobIdType:
    type: string
    pattern: 'import-[0-9a-zA-Z-]+'
    minLength: 1
    maxLength: 55
  DomainDescriptionType:
    type: object
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID.
      AWSAccountId:
        $ref: '#/definitions/AWSAccountIdType'
        description: The AWS account ID for the user pool owner.
      Domain:
        $ref: '#/definitions/DomainType'
        description: The domain string.
      S3Bucket:
        $ref: '#/definitions/S3BucketType'
        description: The S3 bucket where the static files for this domain are stored.
      CloudFrontDistribution:
        $ref: '#/definitions/StringType'
        description: The ARN of the CloudFront distribution.
      Version:
        $ref: '#/definitions/DomainVersionType'
        description: The app version.
      Status:
        $ref: '#/definitions/DomainStatusType'
        description: The domain status.
      CustomDomainConfig:
        $ref: '#/definitions/CustomDomainConfigType'
    description: A container for information about a domain.
  S3BucketType:
    type: string
    pattern: '^[0-9A-Za-z\.\-_]*(?<!\.)$'
    minLength: 3
    maxLength: 1024
  DomainVersionType:
    type: string
    minLength: 1
    maxLength: 20
  DomainStatusType:
    type: string
    enum:
      - CREATING
      - DELETING
      - UPDATING
      - ACTIVE
      - FAILED
  EmailAddressType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+@[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
  EmailNotificationBodyType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]+'
    minLength: 6
    maxLength: 20000
  EmailNotificationSubjectType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s]+'
    minLength: 1
    maxLength: 140
  EmailVerificationMessageByLinkType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*\{##[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*##\}[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*'
    minLength: 6
    maxLength: 20000
  EmailVerificationSubjectByLinkType:
    type: string
    pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s]+'
    minLength: 1
    maxLength: 140
  EventFilterType:
    type: string
    enum:
      - SIGN_IN
      - PASSWORD_CHANGE
      - SIGN_UP
  RiskDecisionType:
    type: string
    enum:
      - NoRisk
      - AccountTakeover
      - Block
  RiskLevelType:
    type: string
    enum:
      - Low
      - Medium
      - High
  ExplicitAuthFlowsType:
    type: string
    enum:
      - ADMIN_NO_SRP_AUTH
      - CUSTOM_AUTH_FLOW_ONLY
      - USER_PASSWORD_AUTH
  ListOfStringTypes:
    type: array
    items:
      $ref: '#/definitions/StringType'
  IdpIdentifierType:
    type: string
    pattern: '[\w\s+=.@-]+'
    minLength: 1
    maxLength: 40
  UICustomizationType:
    type: object
    properties:
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool.
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The client ID for the client app.
      ImageUrl:
        $ref: '#/definitions/ImageUrlType'
        description: The logo image for the UI customization.
      CSS:
        $ref: '#/definitions/CSSType'
        description: The CSS values in the UI customization.
      CSSVersion:
        $ref: '#/definitions/CSSVersionType'
        description: The CSS version number.
      LastModifiedDate:
        $ref: '#/definitions/DateType'
        description: The last-modified date for the UI customization.
      CreationDate:
        $ref: '#/definitions/DateType'
        description: The creation date for the UI customization.
    description: A container for the UI customization information for a user pool's built-in app UI.
  SmsMfaConfigType:
    type: object
    properties:
      SmsAuthenticationMessage:
        $ref: '#/definitions/SmsVerificationMessageType'
        description: The SMS authentication message.
      SmsConfiguration:
        $ref: '#/definitions/SmsConfigurationType'
        description: The SMS configuration.
    description: The SMS text message multi-factor authentication (MFA) configuration type.
  SoftwareTokenMfaConfigType:
    type: object
    properties:
      Enabled:
        $ref: '#/definitions/BooleanType'
        description: Specifies whether software token MFA is enabled.
    description: The type used for enabling software token MFA at the user pool level.
  HttpHeader:
    type: object
    properties:
      headerName:
        $ref: '#/definitions/StringType'
        description: The header name
      headerValue:
        $ref: '#/definitions/StringType'
        description: The header value.
    description: The HTTP header.
  ImageFileType:
    type: string
  ImageUrlType:
    type: string
  ListProvidersLimitType:
    type: integer
    minimum: 1
    maximum: 60
  PaginationKeyType:
    type: string
    pattern: '[\S]+'
    minLength: 1
  ProvidersListType:
    type: array
    items:
      $ref: '#/definitions/ProviderDescription'
    minItems: 0
    maxItems: 50
  ListResourceServersLimitType:
    type: integer
    minimum: 1
    maximum: 50
  ResourceServersListType:
    type: array
    items:
      $ref: '#/definitions/ResourceServerType'
  PoolQueryLimitType:
    type: integer
    minimum: 1
    maximum: 60
  UserImportJobsListType:
    type: array
    items:
      $ref: '#/definitions/UserImportJobType'
    minItems: 1
    maxItems: 50
  QueryLimit:
    type: integer
    minimum: 1
    maximum: 60
  UserPoolClientListType:
    type: array
    items:
      $ref: '#/definitions/UserPoolClientDescription'
  UserPoolListType:
    type: array
    items:
      $ref: '#/definitions/UserPoolDescriptionType'
  UsersListType:
    type: array
    items:
      $ref: '#/definitions/UserType'
  SearchedAttributeNamesListType:
    type: array
    items:
      $ref: '#/definitions/AttributeNameType'
  UserFilterType:
    type: string
    maxLength: 256
  LongType:
    type: integer
  MFAOptionType:
    type: object
    properties:
      DeliveryMedium:
        $ref: '#/definitions/DeliveryMediumType'
        description: The delivery medium (email message or SMS message) to send the MFA code.
      AttributeName:
        $ref: '#/definitions/AttributeNameType'
        description: The attribute name of the MFA option type.
    description: Specifies the different settings for multi-factor authentication (MFA).
  NotifyEmailType:
    type: object
    required:
      - Subject
    properties:
      Subject:
        $ref: '#/definitions/EmailNotificationSubjectType'
        description: The subject.
      HtmlBody:
        $ref: '#/definitions/EmailNotificationBodyType'
        description: The HTML body.
      TextBody:
        $ref: '#/definitions/EmailNotificationBodyType'
        description: The text body.
    description: The notify email type.
  NumberAttributeConstraintsType:
    type: object
    properties:
      MinValue:
        $ref: '#/definitions/StringType'
        description: The minimum value of an attribute that is of the number data type.
      MaxValue:
        $ref: '#/definitions/StringType'
        description: The maximum value of an attribute that is of the number data type.
    description: The minimum and maximum value of an attribute that is of the number data type.
  OAuthFlowType:
    type: string
    enum:
      - code
      - implicit
      - client_credentials
  PasswordPolicyMinLengthType:
    type: integer
    minimum: 6
    maximum: 99
  PasswordPolicyType:
    type: object
    properties:
      MinimumLength:
        $ref: '#/definitions/PasswordPolicyMinLengthType'
        description: The minimum length of the password policy that you have set. Cannot be less than 6.
      RequireUppercase:
        $ref: '#/definitions/BooleanType'
        description: 'In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.'
      RequireLowercase:
        $ref: '#/definitions/BooleanType'
        description: 'In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.'
      RequireNumbers:
        $ref: '#/definitions/BooleanType'
        description: 'In the password policy that you have set, refers to whether you have required users to use at least one number in their password.'
      RequireSymbols:
        $ref: '#/definitions/BooleanType'
        description: 'In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.'
    description: The password policy type.
  PreSignedUrlType:
    type: string
    minLength: 0
    maxLength: 2048
  ProviderDescription:
    type: object
    properties:
      ProviderName:
        $ref: '#/definitions/ProviderNameType'
        description: The identity provider name.
      ProviderType:
        $ref: '#/definitions/IdentityProviderTypeType'
        description: The identity provider type.
      LastModifiedDate:
        $ref: '#/definitions/DateType'
        description: The date the provider was last modified.
      CreationDate:
        $ref: '#/definitions/DateType'
        description: The date the provider was added to the user pool.
    description: A container for identity provider details.
  ResourceServerScopeDescriptionType:
    type: string
    minLength: 1
    maxLength: 256
  ResourceServerScopeType:
    type: object
    required:
      - ScopeName
      - ScopeDescription
    properties:
      ScopeName:
        $ref: '#/definitions/ResourceServerScopeNameType'
        description: The name of the scope.
      ScopeDescription:
        $ref: '#/definitions/ResourceServerScopeDescriptionType'
        description: A description of the scope.
    description: A resource server scope.
  ResourceServerScopeNameType:
    type: string
    pattern: '[\x21\x23-\x2E\x30-\x5B\x5D-\x7E]+'
    minLength: 1
    maxLength: 256
  RiskExceptionConfigurationType:
    type: object
    properties:
      BlockedIPRangeList:
        $ref: '#/definitions/BlockedIPRangeListType'
        description: 'Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation: a compact representation of an IP address and its associated routing prefix.'
      SkippedIPRangeList:
        $ref: '#/definitions/SkippedIPRangeListType'
        description: Risk detection is not performed on the IP addresses in the range list. The IP range is in CIDR notation.
    description: The type of the configuration to override the risk decision.
  SkippedIPRangeListType:
    type: array
    items:
      $ref: '#/definitions/StringType'
    maxItems: 20
  StringAttributeConstraintsType:
    type: object
    properties:
      MinLength:
        $ref: '#/definitions/StringType'
        description: The minimum length.
      MaxLength:
        $ref: '#/definitions/StringType'
        description: The maximum length.
    description: The constraints associated with a string attribute.
  ScopeType:
    type: string
    pattern: '[\x21\x23-\x5B\x5D-\x7E]+'
    minLength: 1
    maxLength: 256
  SoftwareTokenMFAUserCodeType:
    type: string
    pattern: '[0-9]+'
    minLength: 6
    maxLength: 6
  StatusType:
    type: string
    enum:
      - Enabled
      - Disabled
  UserImportJobStatusType:
    type: string
    enum:
      - Created
      - Pending
      - InProgress
      - Stopping
      - Expired
      - Stopped
      - Failed
      - Succeeded
  UserPoolClientDescription:
    type: object
    properties:
      ClientId:
        $ref: '#/definitions/ClientIdType'
        description: The ID of the client associated with the user pool.
      UserPoolId:
        $ref: '#/definitions/UserPoolIdType'
        description: The user pool ID for the user pool where you want to describe the user pool client.
      ClientName:
        $ref: '#/definitions/ClientNameType'
        description: The client name from the user pool client description.
    description: The description of the user pool client.
  UserPoolDescriptionType:
    type: object
    properties:
      Id:
        $ref: '#/definitions/UserPoolIdType'
        description: The ID in a user pool description.
      Name:
        $ref: '#/definitions/UserPoolNameType'
        description: The name in a user pool description.
      LambdaConfig:
        $ref: '#/definitions/LambdaConfigType'
        description: The AWS Lambda configuration information in a user pool description.
      Status:
        $ref: '#/definitions/StatusType'
        description: The user pool status in a user pool description.
      LastModifiedDate:
        $ref: '#/definitions/DateType'
        description: The date the user pool description was last modified.
      CreationDate:
        $ref: '#/definitions/DateType'
        description: The date the user pool description was created.
    description: A user pool description.
  UsernameAttributeType:
    type: string
    enum:
      - phone_number
      - email
  VerifiedAttributeType:
    type: string
    enum:
      - phone_number
      - email
  VerifySoftwareTokenResponseType:
    type: string
    enum:
      - SUCCESS
      - ERROR
