swagger: '2.0'
info:
  version: '2016-05-01'
  x-release: v4
  title: Amazon WorkDocs
  description: '<p>The WorkDocs API is designed for the following use cases:</p> <ul> <li> <p>File Migration: File migration applications are supported for users who want to migrate their files from an on-premises or off-premises file system or service. Users can insert files into a user directory structure, as well as allow for basic metadata changes, such as modifications to the permissions of files.</p> </li> <li> <p>Security: Support security applications are supported for users who have additional security needs, such as antivirus or data loss prevention. The API actions, along with AWS CloudTrail, allow these applications to detect when changes occur in Amazon WorkDocs. Then, the application can take the necessary actions and replace the target file. If the target file violates the policy, the application can also choose to email the user.</p> </li> <li> <p>eDiscovery/Analytics: General administrative applications are supported, such as eDiscovery and analytics. These applications can choose to mimic or record the actions in an Amazon WorkDocs site, along with AWS CloudTrail, to replicate data for eDiscovery, backup, or analytical applications.</p> </li> </ul> <p>All Amazon WorkDocs API actions are Amazon authenticated and certificate-signed. They not only require the use of the AWS SDK, but also allow for the exclusive use of IAM users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the Amazon WorkDocs site, the IAM user gains full administrative visibility into the entire Amazon WorkDocs site (or as set in the IAM policy). This includes, but is not limited to, the ability to modify file permissions and upload any file to any user. This allows developers to perform the three use cases above, as well as give users the ability to grant access on a selective basis using the IAM model.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: workdocs
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/workdocs-2016-05-01.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/workdocs/'
host: workdocs.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
parameters:
  Action:
    name: Action
    in: header
    type: string
    required: true
  Version:
    name: Version
    in: header
    type: string
    required: true
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  '/api/v1/documents/{DocumentId}/versions/{VersionId}':
    delete:
      operationId: AbortDocumentVersionUpload
      description: 'Aborts the upload of the specified document version that was previously initiated by <a>InitiateDocumentVersionUpload</a>. The client should make this call only when it no longer intends to upload the document version, or fails to do so.'
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '482':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '483':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AbortDocumentVersionUploadRequest'
        - name: DocumentId
          in: path
          type: string
          required: true
        - name: VersionId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDocumentVersion
      description: Retrieves version metadata for the specified document.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDocumentVersionResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '486':
          description: InvalidPasswordException
          schema:
            $ref: '#/definitions/InvalidPasswordException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDocumentVersionRequest'
        - name: DocumentId
          in: path
          type: string
          required: true
        - name: VersionId
          in: path
          type: string
          required: true
    patch:
      operationId: UpdateDocumentVersion
      description: '<p>Changes the status of the document version to ACTIVE. </p> <p>Amazon WorkDocs also sets its document container to ACTIVE. This is the last step in a document upload, after the client uploads the document to an S3-presigned URL returned by <a>InitiateDocumentVersionUpload</a>. </p>'
      responses:
        '200':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '482':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '483':
          description: InvalidOperationException
          schema:
            $ref: '#/definitions/InvalidOperationException'
        '484':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '485':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '486':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '487':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDocumentVersionRequest'
        - name: DocumentId
          in: path
          type: string
          required: true
        - name: VersionId
          in: path
          type: string
          required: true
  '/api/v1/users/{UserId}/activation':
    post:
      operationId: ActivateUser
      description: Activates the specified user. Only active users can access Amazon WorkDocs.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ActivateUserResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ActivateUserRequest'
        - name: UserId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeactivateUser
      description: 'Deactivates the specified user, which revokes the user''s access to Amazon WorkDocs.'
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeactivateUserRequest'
        - name: UserId
          in: path
          type: string
          required: true
  '/api/v1/resources/{ResourceId}/permissions':
    post:
      operationId: AddResourcePermissions
      description: Creates a set of permissions for the specified folder or document. The resource permissions are overwritten if the principals already have different permissions.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/AddResourcePermissionsResponse'
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AddResourcePermissionsRequest'
        - name: ResourceId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeResourcePermissions
      description: Describes the permissions of a specified resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeResourcePermissionsResponse'
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeResourcePermissionsRequest'
        - name: ResourceId
          in: path
          type: string
          required: true
    delete:
      operationId: RemoveAllResourcePermissions
      description: Removes all the permissions from the specified resource.
      responses:
        '204':
          description: Success
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RemoveAllResourcePermissionsRequest'
        - name: ResourceId
          in: path
          type: string
          required: true
  '/api/v1/documents/{DocumentId}/versions/{VersionId}/comment':
    post:
      operationId: CreateComment
      description: Adds a new comment to the specified document version.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateCommentResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '482':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '483':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: DocumentLockedForCommentsException
          schema:
            $ref: '#/definitions/DocumentLockedForCommentsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateCommentRequest'
        - name: DocumentId
          in: path
          type: string
          required: true
        - name: VersionId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/resources/{ResourceId}/customMetadata':
    put:
      operationId: CreateCustomMetadata
      description: 'Adds one or more custom properties to the specified resource (a folder, document, or version).'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateCustomMetadataResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '484':
          description: CustomMetadataLimitExceededException
          schema:
            $ref: '#/definitions/CustomMetadataLimitExceededException'
        '485':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateCustomMetadataRequest'
        - name: ResourceId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteCustomMetadata
      description: Deletes custom metadata from the specified resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteCustomMetadataResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteCustomMetadataRequest'
        - name: ResourceId
          in: path
          type: string
          required: true
  /api/v1/folders:
    post:
      operationId: CreateFolder
      description: Creates a folder with the specified name and parent folder.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateFolderResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          schema:
            $ref: '#/definitions/EntityAlreadyExistsException'
        '482':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '485':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '486':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '487':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateFolderRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/resources/{ResourceId}/labels':
    put:
      operationId: CreateLabels
      description: Adds the specified list of labels to the given resource (a document or folder)
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateLabelsResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: TooManyLabelsException
          schema:
            $ref: '#/definitions/TooManyLabelsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateLabelsRequest'
        - name: ResourceId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteLabels
      description: Deletes the specified list of labels from a resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteLabelsResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteLabelsRequest'
        - name: ResourceId
          in: path
          type: string
          required: true
  '/api/v1/organizations/{OrganizationId}/subscriptions':
    post:
      operationId: CreateNotificationSubscription
      description: '<p>Configure WorkDocs to use Amazon SNS notifications.</p> <p>The endpoint receives a confirmation message, and must confirm the subscription. For more information, see <a href="http://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.html#SendMessageToHttp.confirm">Confirm the Subscription</a> in the <i>Amazon Simple Notification Service Developer Guide</i>.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateNotificationSubscriptionResponse'
        '480':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '481':
          description: TooManySubscriptionsException
          schema:
            $ref: '#/definitions/TooManySubscriptionsException'
        '482':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateNotificationSubscriptionRequest'
        - name: OrganizationId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeNotificationSubscriptions
      description: Lists the specified notification subscriptions.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeNotificationSubscriptionsResponse'
        '480':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '481':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '482':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeNotificationSubscriptionsRequest'
        - name: OrganizationId
          in: path
          type: string
          required: true
  /api/v1/users:
    post:
      operationId: CreateUser
      description: Creates a user in a Simple AD or Microsoft AD directory. The status of a newly created user is "ACTIVE". New users can access Amazon WorkDocs.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateUserResponse'
        '480':
          description: EntityAlreadyExistsException
          schema:
            $ref: '#/definitions/EntityAlreadyExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeUsers
      description: '<p>Describes the specified users. You can describe all users or filter the results (for example, by status or organization).</p> <p>By default, Amazon WorkDocs returns the first 24 active or pending users. If there are more results, the response includes a marker that you can use to request the next set of results.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeUsersResponse'
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '484':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeUsersRequest'
        - name: Limit
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: Marker
          type: string
          in: query
          description: Pagination token
          required: false
  '/api/v1/documents/{DocumentId}/versions/{VersionId}/comment/{CommentId}':
    delete:
      operationId: DeleteComment
      description: Deletes the specified comment from the document version.
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '482':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '483':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: DocumentLockedForCommentsException
          schema:
            $ref: '#/definitions/DocumentLockedForCommentsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteCommentRequest'
        - name: DocumentId
          in: path
          type: string
          required: true
        - name: VersionId
          in: path
          type: string
          required: true
        - name: CommentId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/documents/{DocumentId}':
    delete:
      operationId: DeleteDocument
      description: Permanently deletes the specified document and its associated metadata.
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '482':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '483':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '484':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '485':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteDocumentRequest'
        - name: DocumentId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDocument
      description: Retrieves details of a document.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDocumentResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: InvalidPasswordException
          schema:
            $ref: '#/definitions/InvalidPasswordException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDocumentRequest'
        - name: DocumentId
          in: path
          type: string
          required: true
    patch:
      operationId: UpdateDocument
      description: 'Updates the specified attributes of a document. The user must have access to both the document and its parent folder, if applicable.'
      responses:
        '200':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          schema:
            $ref: '#/definitions/EntityAlreadyExistsException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '484':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '485':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '486':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '487':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '488':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDocumentRequest'
        - name: DocumentId
          in: path
          type: string
          required: true
  '/api/v1/folders/{FolderId}':
    delete:
      operationId: DeleteFolder
      description: Permanently deletes the specified folder and its contents.
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '482':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '483':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '484':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '485':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteFolderRequest'
        - name: FolderId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetFolder
      description: Retrieves the metadata of the specified folder.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFolderResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetFolderRequest'
        - name: FolderId
          in: path
          type: string
          required: true
    patch:
      operationId: UpdateFolder
      description: 'Updates the specified attributes of the specified folder. The user must have access to both the folder and its parent folder, if applicable.'
      responses:
        '200':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          schema:
            $ref: '#/definitions/EntityAlreadyExistsException'
        '482':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '483':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '486':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '487':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '488':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateFolderRequest'
        - name: FolderId
          in: path
          type: string
          required: true
  '/api/v1/folders/{FolderId}/contents':
    delete:
      operationId: DeleteFolderContents
      description: Deletes the contents of the specified folder.
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteFolderContentsRequest'
        - name: FolderId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeFolderContents
      description: '<p>Describes the contents of the specified folder, including its documents and subfolders.</p> <p>By default, Amazon WorkDocs returns the first 100 active document and folder metadata items. If there are more results, the response includes a marker that you can use to request the next set of results. You can also request initialized documents.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeFolderContentsResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeFolderContentsRequest'
        - name: Limit
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: Marker
          type: string
          in: query
          description: Pagination token
          required: false
        - name: FolderId
          in: path
          type: string
          required: true
  '/api/v1/organizations/{OrganizationId}/subscriptions/{SubscriptionId}':
    delete:
      operationId: DeleteNotificationSubscription
      description: Deletes the specified subscription from the specified organization.
      responses:
        '200':
          description: Success
        '480':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '481':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '482':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '483':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteNotificationSubscriptionRequest'
        - name: OrganizationId
          in: path
          type: string
          required: true
        - name: SubscriptionId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/users/{UserId}':
    delete:
      operationId: DeleteUser
      description: Deletes the specified user from a Simple AD or Microsoft AD directory.
      responses:
        '204':
          description: Success
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteUserRequest'
        - name: UserId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    patch:
      operationId: UpdateUser
      description: 'Updates the specified attributes of the specified user, and grants or revokes administrative privileges to the Amazon WorkDocs site.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateUserResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: IllegalUserStateException
          schema:
            $ref: '#/definitions/IllegalUserStateException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: DeactivatingLastSystemUserException
          schema:
            $ref: '#/definitions/DeactivatingLastSystemUserException'
        '487':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateUserRequest'
        - name: UserId
          in: path
          type: string
          required: true
  /api/v1/activities:
    get:
      operationId: DescribeActivities
      description: Describes the user activities in a specified time period.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeActivitiesResponse'
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeActivitiesRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/documents/{DocumentId}/versions/{VersionId}/comments':
    get:
      operationId: DescribeComments
      description: List all the comments for the specified document version.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeCommentsResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '482':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '483':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeCommentsRequest'
        - name: DocumentId
          in: path
          type: string
          required: true
        - name: VersionId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/documents/{DocumentId}/versions':
    get:
      operationId: DescribeDocumentVersions
      description: '<p>Retrieves the document versions for the specified document.</p> <p>By default, only active versions are returned.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeDocumentVersionsResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
        '484':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '486':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeDocumentVersionsRequest'
        - name: Limit
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: Marker
          type: string
          in: query
          description: Pagination token
          required: false
        - name: DocumentId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /api/v1/groups:
    get:
      operationId: DescribeGroups
      description: Describes the groups specified by query.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeGroupsResponse'
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeGroupsRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /api/v1/me/root:
    get:
      operationId: DescribeRootFolders
      description: Describes the current user's special folders; the <code>RootFolder</code> and the <code>RecycleBin</code>. <code>RootFolder</code> is the root of user's files and folders and <code>RecycleBin</code> is the root of recycled items. This is not a valid action for SigV4 (administrative API) clients.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeRootFoldersResponse'
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: InvalidArgumentException
          schema:
            $ref: '#/definitions/InvalidArgumentException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeRootFoldersRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /api/v1/me:
    get:
      operationId: GetCurrentUser
      description: Retrieves details of the current user for whom the authentication token was generated. This is not a valid action for SigV4 (administrative API) clients.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCurrentUserResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCurrentUserRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/documents/{DocumentId}/path':
    get:
      operationId: GetDocumentPath
      description: '<p>Retrieves the path information (the hierarchy from the root folder) for the requested document.</p> <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested document and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the names of the parent folders.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDocumentPathResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDocumentPathRequest'
        - name: DocumentId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/folders/{FolderId}/path':
    get:
      operationId: GetFolderPath
      description: '<p>Retrieves the path information (the hierarchy from the root folder) for the specified folder.</p> <p>By default, Amazon WorkDocs returns a maximum of 100 levels upwards from the requested folder and only includes the IDs of the parent folders in the path. You can limit the maximum number of levels. You can also request the parent folder names.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFolderPathResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '482':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '483':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetFolderPathRequest'
        - name: FolderId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /api/v1/documents:
    post:
      operationId: InitiateDocumentVersionUpload
      description: '<p>Creates a new document object and version object.</p> <p>The client specifies the parent folder ID and name of the document to upload. The ID is optionally specified when creating a new version of an existing document. This is the first step to upload a document. Next, upload the document to the URL returned from the call, and then call <a>UpdateDocumentVersion</a>.</p> <p>To cancel the document upload, call <a>AbortDocumentVersionUpload</a>.</p>'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/InitiateDocumentVersionUploadResponse'
        '480':
          description: EntityNotExistsException
          schema:
            $ref: '#/definitions/EntityNotExistsException'
        '481':
          description: EntityAlreadyExistsException
          schema:
            $ref: '#/definitions/EntityAlreadyExistsException'
        '482':
          description: StorageLimitExceededException
          schema:
            $ref: '#/definitions/StorageLimitExceededException'
        '483':
          description: StorageLimitWillExceedException
          schema:
            $ref: '#/definitions/StorageLimitWillExceedException'
        '484':
          description: ProhibitedStateException
          schema:
            $ref: '#/definitions/ProhibitedStateException'
        '485':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '486':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '487':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '488':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '489':
          description: DraftUploadOutOfSyncException
          schema:
            $ref: '#/definitions/DraftUploadOutOfSyncException'
        '490':
          description: ResourceAlreadyCheckedOutException
          schema:
            $ref: '#/definitions/ResourceAlreadyCheckedOutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/InitiateDocumentVersionUploadRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/api/v1/resources/{ResourceId}/permissions/{PrincipalId}':
    delete:
      operationId: RemoveResourcePermission
      description: Removes the permission for the specified principal from the specified resource.
      responses:
        '204':
          description: Success
        '480':
          description: UnauthorizedOperationException
          schema:
            $ref: '#/definitions/UnauthorizedOperationException'
        '481':
          description: UnauthorizedResourceAccessException
          schema:
            $ref: '#/definitions/UnauthorizedResourceAccessException'
        '482':
          description: FailedDependencyException
          schema:
            $ref: '#/definitions/FailedDependencyException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RemoveResourcePermissionRequest'
        - name: ResourceId
          in: path
          type: string
          required: true
        - name: PrincipalId
          in: path
          type: string
          required: true
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  AbortDocumentVersionUploadRequest:
    type: object
    properties: {}
  EntityNotExistsException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
      EntityIds:
        $ref: '#/definitions/EntityIdList'
    description: The resource does not exist.
  ProhibitedStateException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The specified document version is not in the INITIALIZED state.
  UnauthorizedOperationException:
    type: object
    properties: {}
    description: The operation is not permitted.
  UnauthorizedResourceAccessException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The caller does not have access to perform the action on the resource.
  FailedDependencyException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: 'The AWS Directory Service cannot reach an on-premises instance. Or a dependency under the control of the organization is failing, such as a connected Active Directory.'
  ServiceUnavailableException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: One or more of the dependencies is unavailable.
  ActivateUserResponse:
    type: object
    properties:
      User:
        $ref: '#/definitions/User'
        description: The user information.
  ActivateUserRequest:
    type: object
    properties: {}
  AddResourcePermissionsResponse:
    type: object
    properties:
      ShareResults:
        $ref: '#/definitions/ShareResultsList'
        description: The share results.
  AddResourcePermissionsRequest:
    type: object
    required:
      - Principals
    properties:
      Principals:
        $ref: '#/definitions/SharePrincipalList'
        description: 'The users, groups, or organization being granted permission.'
      NotificationOptions:
        $ref: '#/definitions/NotificationOptions'
        description: The notification options.
  CreateCommentResponse:
    type: object
    properties:
      Comment:
        $ref: '#/definitions/Comment'
        description: The comment that has been created.
  CreateCommentRequest:
    type: object
    required:
      - Text
    properties:
      ParentId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the parent comment.
      ThreadId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the root comment in the thread.
      Text:
        $ref: '#/definitions/CommentTextType'
        description: The text of the comment.
      Visibility:
        $ref: '#/definitions/CommentVisibilityType'
        description: 'The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.'
      NotifyCollaborators:
        $ref: '#/definitions/BooleanType'
        description: Set this parameter to TRUE to send an email out to the document collaborators after the comment is created.
  DocumentLockedForCommentsException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: This exception is thrown when the document is locked for comments and user tries to create or delete a comment on that document.
  CreateCustomMetadataResponse:
    type: object
    properties: {}
  CreateCustomMetadataRequest:
    type: object
    required:
      - CustomMetadata
    properties:
      CustomMetadata:
        $ref: '#/definitions/CustomMetadataMap'
        description: Custom metadata in the form of name-value pairs.
  CustomMetadataLimitExceededException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The limit has been reached on the number of custom properties for the specified resource.
  CreateFolderResponse:
    type: object
    properties:
      Metadata:
        $ref: '#/definitions/FolderMetadata'
        description: The metadata of the folder.
  CreateFolderRequest:
    type: object
    required:
      - ParentFolderId
    properties:
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the new folder.
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
  EntityAlreadyExistsException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The resource already exists.
  LimitExceededException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: 'The maximum of 100,000 folders under the parent folder has been exceeded.'
  CreateLabelsResponse:
    type: object
    properties: {}
  CreateLabelsRequest:
    type: object
    required:
      - Labels
    properties:
      Labels:
        $ref: '#/definitions/SharedLabels'
        description: List of labels to add to the resource.
  TooManyLabelsException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The limit has been reached on the number of labels for the specified resource.
  CreateNotificationSubscriptionResponse:
    type: object
    properties:
      Subscription:
        $ref: '#/definitions/Subscription'
        description: The subscription.
  CreateNotificationSubscriptionRequest:
    type: object
    required:
      - Endpoint
      - Protocol
      - SubscriptionType
    properties:
      Endpoint:
        $ref: '#/definitions/SubscriptionEndPointType'
        description: 'The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint is a URL that begins with "https://".'
      Protocol:
        $ref: '#/definitions/SubscriptionProtocolType'
        description: 'The protocol to use. The supported value is https, which delivers JSON-encoded messages using HTTPS POST.'
      SubscriptionType:
        $ref: '#/definitions/SubscriptionType'
        description: The notification type.
  TooManySubscriptionsException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: You've reached the limit on the number of subscriptions for the WorkDocs instance.
  CreateUserResponse:
    type: object
    properties:
      User:
        $ref: '#/definitions/User'
        description: The user information.
  CreateUserRequest:
    type: object
    required:
      - Username
      - GivenName
      - Surname
      - Password
    properties:
      OrganizationId:
        $ref: '#/definitions/IdType'
        description: The ID of the organization.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The login name of the user.
      EmailAddress:
        $ref: '#/definitions/EmailAddressType'
        description: The email address of the user.
      GivenName:
        $ref: '#/definitions/UserAttributeValueType'
        description: The given name of the user.
      Surname:
        $ref: '#/definitions/UserAttributeValueType'
        description: The surname of the user.
      Password:
        $ref: '#/definitions/PasswordType'
        description: The password of the user.
      TimeZoneId:
        $ref: '#/definitions/TimeZoneIdType'
        description: The time zone ID of the user.
      StorageRule:
        $ref: '#/definitions/StorageRuleType'
        description: The amount of storage for the user.
  DeactivateUserRequest:
    type: object
    properties: {}
  DeleteCommentRequest:
    type: object
    properties: {}
  DeleteCustomMetadataResponse:
    type: object
    properties: {}
  DeleteCustomMetadataRequest:
    type: object
    properties: {}
  DeleteDocumentRequest:
    type: object
    properties: {}
  ConcurrentModificationException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The resource hierarchy is changing.
  DeleteFolderRequest:
    type: object
    properties: {}
  DeleteFolderContentsRequest:
    type: object
    properties: {}
  DeleteLabelsResponse:
    type: object
    properties: {}
  DeleteLabelsRequest:
    type: object
    properties: {}
  DeleteNotificationSubscriptionRequest:
    type: object
    properties: {}
  DeleteUserRequest:
    type: object
    properties: {}
  DescribeActivitiesResponse:
    type: object
    properties:
      UserActivities:
        $ref: '#/definitions/UserActivities'
        description: The list of activities for the specified user and time period.
      Marker:
        $ref: '#/definitions/MarkerType'
        description: The marker for the next set of results.
  DescribeActivitiesRequest:
    type: object
    properties: {}
  InvalidArgumentException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The pagination marker or limit fields are not valid.
  DescribeCommentsResponse:
    type: object
    properties:
      Comments:
        $ref: '#/definitions/CommentList'
        description: The list of comments for the specified document version.
      Marker:
        $ref: '#/definitions/MarkerType'
        description: The marker for the next set of results. This marker was received from a previous call.
  DescribeCommentsRequest:
    type: object
    properties: {}
  DescribeDocumentVersionsResponse:
    type: object
    properties:
      DocumentVersions:
        $ref: '#/definitions/DocumentVersionMetadataList'
        description: The document versions.
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
  DescribeDocumentVersionsRequest:
    type: object
    properties: {}
  DescribeFolderContentsResponse:
    type: object
    properties:
      Folders:
        $ref: '#/definitions/FolderMetadataList'
        description: The subfolders in the specified folder.
      Documents:
        $ref: '#/definitions/DocumentMetadataList'
        description: The documents in the specified folder.
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
  DescribeFolderContentsRequest:
    type: object
    properties: {}
  DescribeGroupsResponse:
    type: object
    properties:
      Groups:
        $ref: '#/definitions/GroupMetadataList'
        description: The list of groups.
      Marker:
        $ref: '#/definitions/MarkerType'
        description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
  DescribeGroupsRequest:
    type: object
    properties: {}
  DescribeNotificationSubscriptionsResponse:
    type: object
    properties:
      Subscriptions:
        $ref: '#/definitions/SubscriptionList'
        description: The subscriptions.
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
  DescribeNotificationSubscriptionsRequest:
    type: object
    properties: {}
  DescribeResourcePermissionsResponse:
    type: object
    properties:
      Principals:
        $ref: '#/definitions/PrincipalList'
        description: The principals.
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
  DescribeResourcePermissionsRequest:
    type: object
    properties: {}
  DescribeRootFoldersResponse:
    type: object
    properties:
      Folders:
        $ref: '#/definitions/FolderMetadataList'
        description: The user's special folders.
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: The marker for the next set of results.
  DescribeRootFoldersRequest:
    type: object
    properties: {}
  DescribeUsersResponse:
    type: object
    properties:
      Users:
        $ref: '#/definitions/OrganizationUserList'
        description: The users.
      TotalNumberOfUsers:
        $ref: '#/definitions/SizeType'
        description: The total number of users included in the results.
      Marker:
        $ref: '#/definitions/PageMarkerType'
        description: 'The marker to use when requesting the next set of results. If there are no additional results, the string is empty.'
  DescribeUsersRequest:
    type: object
    properties: {}
  GetCurrentUserResponse:
    type: object
    properties:
      User:
        $ref: '#/definitions/User'
        description: Metadata of the user.
  GetCurrentUserRequest:
    type: object
    properties: {}
  GetDocumentResponse:
    type: object
    properties:
      Metadata:
        $ref: '#/definitions/DocumentMetadata'
        description: The metadata details of the document.
      CustomMetadata:
        $ref: '#/definitions/CustomMetadataMap'
        description: The custom metadata on the document.
  GetDocumentRequest:
    type: object
    properties: {}
  InvalidPasswordException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The password is invalid.
  GetDocumentPathResponse:
    type: object
    properties:
      Path:
        $ref: '#/definitions/ResourcePath'
        description: The path information.
  GetDocumentPathRequest:
    type: object
    properties: {}
  GetDocumentVersionResponse:
    type: object
    properties:
      Metadata:
        $ref: '#/definitions/DocumentVersionMetadata'
        description: The version metadata.
      CustomMetadata:
        $ref: '#/definitions/CustomMetadataMap'
        description: The custom metadata on the document version.
  GetDocumentVersionRequest:
    type: object
    properties: {}
  GetFolderResponse:
    type: object
    properties:
      Metadata:
        $ref: '#/definitions/FolderMetadata'
        description: The metadata of the folder.
      CustomMetadata:
        $ref: '#/definitions/CustomMetadataMap'
        description: The custom metadata on the folder.
  GetFolderRequest:
    type: object
    properties: {}
  GetFolderPathResponse:
    type: object
    properties:
      Path:
        $ref: '#/definitions/ResourcePath'
        description: The path information.
  GetFolderPathRequest:
    type: object
    properties: {}
  InitiateDocumentVersionUploadResponse:
    type: object
    properties:
      Metadata:
        $ref: '#/definitions/DocumentMetadata'
        description: The document metadata.
      UploadMetadata:
        $ref: '#/definitions/UploadMetadata'
        description: The upload metadata.
  InitiateDocumentVersionUploadRequest:
    type: object
    required:
      - ParentFolderId
    properties:
      Id:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the document.
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the document.
      ContentCreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The timestamp when the content of the document was originally created.
      ContentModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The timestamp when the content of the document was modified.
      ContentType:
        $ref: '#/definitions/DocumentContentType'
        description: The content type of the document.
      DocumentSizeInBytes:
        $ref: '#/definitions/SizeType'
        description: 'The size of the document, in bytes.'
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
  StorageLimitExceededException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The storage limit has been exceeded.
  StorageLimitWillExceedException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The storage limit will be exceeded.
  DraftUploadOutOfSyncException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: This exception is thrown when a valid checkout ID is not presented on document version upload calls for a document that has been checked out from Web client.
  ResourceAlreadyCheckedOutException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The resource is already checked out.
  RemoveAllResourcePermissionsRequest:
    type: object
    properties: {}
  RemoveResourcePermissionRequest:
    type: object
    properties: {}
  UpdateDocumentRequest:
    type: object
    properties:
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the document.
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
      ResourceState:
        $ref: '#/definitions/ResourceStateType'
        description: The resource state of the document. Only ACTIVE and RECYCLED are supported.
  UpdateDocumentVersionRequest:
    type: object
    properties:
      VersionStatus:
        $ref: '#/definitions/DocumentVersionStatus'
        description: The status of the version.
  InvalidOperationException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The operation is invalid.
  UpdateFolderRequest:
    type: object
    properties:
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the folder.
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
      ResourceState:
        $ref: '#/definitions/ResourceStateType'
        description: The resource state of the folder. Only ACTIVE and RECYCLED are accepted values from the API.
  UpdateUserResponse:
    type: object
    properties:
      User:
        $ref: '#/definitions/User'
        description: The user information.
  UpdateUserRequest:
    type: object
    properties:
      GivenName:
        $ref: '#/definitions/UserAttributeValueType'
        description: The given name of the user.
      Surname:
        $ref: '#/definitions/UserAttributeValueType'
        description: The surname of the user.
      Type:
        $ref: '#/definitions/UserType'
        description: The type of the user.
      StorageRule:
        $ref: '#/definitions/StorageRuleType'
        description: The amount of storage for the user.
      TimeZoneId:
        $ref: '#/definitions/TimeZoneIdType'
        description: The time zone ID of the user.
      Locale:
        $ref: '#/definitions/LocaleType'
        description: The locale of the user.
      GrantPoweruserPrivileges:
        $ref: '#/definitions/BooleanEnumType'
        description: Boolean value to determine whether the user is granted Poweruser privileges.
  IllegalUserStateException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/ErrorMessageType'
    description: The user is undergoing transfer of ownership.
  DeactivatingLastSystemUserException:
    type: object
    properties: {}
    description: The last user in the organization is being deactivated.
  AuthenticationHeaderType:
    type: string
    minLength: 1
    maxLength: 8199
    format: password
  ResourceIdType:
    type: string
    pattern: '[\w+-.@]+'
    minLength: 1
    maxLength: 128
  DocumentVersionIdType:
    type: string
    pattern: '[\w+-.@]+'
    minLength: 1
    maxLength: 128
  IdType:
    type: string
    pattern: '[&\w+-.@]+'
    minLength: 1
    maxLength: 256
  User:
    type: object
    properties:
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the user.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The login name of the user.
      EmailAddress:
        $ref: '#/definitions/EmailAddressType'
        description: The email address of the user.
      GivenName:
        $ref: '#/definitions/UserAttributeValueType'
        description: The given name of the user.
      Surname:
        $ref: '#/definitions/UserAttributeValueType'
        description: The surname of the user.
      OrganizationId:
        $ref: '#/definitions/IdType'
        description: The ID of the organization.
      RootFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the root folder.
      RecycleBinFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the recycle bin folder.
      Status:
        $ref: '#/definitions/UserStatusType'
        description: The status of the user.
      Type:
        $ref: '#/definitions/UserType'
        description: The type of user.
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the user was created.
      ModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the user was modified.
      TimeZoneId:
        $ref: '#/definitions/TimeZoneIdType'
        description: The time zone ID of the user.
      Locale:
        $ref: '#/definitions/LocaleType'
        description: The locale of the user.
      Storage:
        $ref: '#/definitions/UserStorageMetadata'
        description: The storage for the user.
    description: Describes a user.
  ActivityType:
    type: string
    enum:
      - DOCUMENT_CHECKED_IN
      - DOCUMENT_CHECKED_OUT
      - DOCUMENT_RENAMED
      - DOCUMENT_VERSION_UPLOADED
      - DOCUMENT_VERSION_DELETED
      - DOCUMENT_RECYCLED
      - DOCUMENT_RESTORED
      - DOCUMENT_REVERTED
      - DOCUMENT_SHARED
      - DOCUMENT_UNSHARED
      - DOCUMENT_SHARE_PERMISSION_CHANGED
      - DOCUMENT_SHAREABLE_LINK_CREATED
      - DOCUMENT_SHAREABLE_LINK_REMOVED
      - DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED
      - DOCUMENT_MOVED
      - DOCUMENT_COMMENT_ADDED
      - DOCUMENT_COMMENT_DELETED
      - DOCUMENT_ANNOTATION_ADDED
      - DOCUMENT_ANNOTATION_DELETED
      - FOLDER_CREATED
      - FOLDER_DELETED
      - FOLDER_RENAMED
      - FOLDER_RECYCLED
      - FOLDER_RESTORED
      - FOLDER_SHARED
      - FOLDER_UNSHARED
      - FOLDER_SHARE_PERMISSION_CHANGED
      - FOLDER_SHAREABLE_LINK_CREATED
      - FOLDER_SHAREABLE_LINK_REMOVED
      - FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED
      - FOLDER_MOVED
  TimestampType:
    type: string
    format: date-time
  UserMetadata:
    type: object
    properties:
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the user.
      Username:
        $ref: '#/definitions/UsernameType'
        description: The name of the user.
      GivenName:
        $ref: '#/definitions/UserAttributeValueType'
        description: The given name of the user before a rename operation.
      Surname:
        $ref: '#/definitions/UserAttributeValueType'
        description: The surname of the user.
      EmailAddress:
        $ref: '#/definitions/EmailAddressType'
        description: The email address of the user.
    description: Describes the metadata of the user.
  Participants:
    type: object
    properties:
      Users:
        $ref: '#/definitions/UserMetadataList'
        description: The list of users.
      Groups:
        $ref: '#/definitions/GroupMetadataList'
        description: The list of user groups.
    description: Describes the users or user groups.
  ResourceMetadata:
    type: object
    properties:
      Type:
        $ref: '#/definitions/ResourceType'
        description: The type of resource.
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the resource.
      OriginalName:
        $ref: '#/definitions/ResourceNameType'
        description: The original name of the resource before a rename operation.
      Id:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the resource.
      VersionId:
        $ref: '#/definitions/DocumentVersionIdType'
        description: The version ID of the resource. This is an optional field and is filled for action on document version.
      Owner:
        $ref: '#/definitions/UserMetadata'
        description: The owner of the resource.
      ParentId:
        $ref: '#/definitions/ResourceIdType'
        description: The parent ID of the resource before a rename operation.
    description: Describes the metadata of a resource.
  CommentMetadata:
    type: object
    properties:
      CommentId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the comment.
      Contributor:
        $ref: '#/definitions/User'
        description: The user who made the comment.
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The timestamp that the comment was created.
      CommentStatus:
        $ref: '#/definitions/CommentStatusType'
        description: The status of the comment.
      RecipientId:
        $ref: '#/definitions/IdType'
        description: The ID of the user being replied to.
    description: Describes the metadata of a comment.
  Activity:
    type: object
    properties:
      Type:
        $ref: '#/definitions/ActivityType'
        description: The activity type.
      TimeStamp:
        $ref: '#/definitions/TimestampType'
        description: The timestamp when the action was performed.
      OrganizationId:
        $ref: '#/definitions/IdType'
        description: The ID of the organization.
      Initiator:
        $ref: '#/definitions/UserMetadata'
        description: The user who performed the action.
      Participants:
        $ref: '#/definitions/Participants'
        description: 'The list of users or groups impacted by this action. This is an optional field and is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED, DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.'
      ResourceMetadata:
        $ref: '#/definitions/ResourceMetadata'
        description: The metadata of the resource involved in the user action.
      OriginalParent:
        $ref: '#/definitions/ResourceMetadata'
        description: The original parent of the resource. This is an optional field and is filled for move activities.
      CommentMetadata:
        $ref: '#/definitions/CommentMetadata'
        description: Metadata of the commenting activity. This is an optional field and is filled for commenting activities.
    description: Describes the activity information.
  SharePrincipalList:
    type: array
    items:
      $ref: '#/definitions/SharePrincipal'
  NotificationOptions:
    type: object
    properties:
      SendEmail:
        $ref: '#/definitions/BooleanType'
        description: Boolean value to indicate an email notification should be sent to the receipients.
      EmailMessage:
        $ref: '#/definitions/MessageType'
        description: Text value to be included in the email body.
    description: Set of options which defines notification preferences of given action.
  ShareResultsList:
    type: array
    items:
      $ref: '#/definitions/ShareResult'
  BooleanEnumType:
    type: string
    enum:
      - 'TRUE'
      - 'FALSE'
  BooleanType:
    type: boolean
  CommentIdType:
    type: string
    pattern: '[\w+-.@]+'
    minLength: 1
    maxLength: 128
  CommentTextType:
    type: string
    minLength: 1
    maxLength: 2048
    format: password
  CommentStatusType:
    type: string
    enum:
      - DRAFT
      - PUBLISHED
      - DELETED
  CommentVisibilityType:
    type: string
    enum:
      - PUBLIC
      - PRIVATE
  Comment:
    type: object
    required:
      - CommentId
    properties:
      CommentId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the comment.
      ParentId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the parent comment.
      ThreadId:
        $ref: '#/definitions/CommentIdType'
        description: The ID of the root comment in the thread.
      Text:
        $ref: '#/definitions/CommentTextType'
        description: The text of the comment.
      Contributor:
        $ref: '#/definitions/User'
        description: The details of the user who made the comment.
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time that the comment was created.
      Status:
        $ref: '#/definitions/CommentStatusType'
        description: The status of the comment.
      Visibility:
        $ref: '#/definitions/CommentVisibilityType'
        description: 'The visibility of the comment. Options are either PRIVATE, where the comment is visible only to the comment author and document owner and co-owners, or PUBLIC, where the comment is visible to document owners, co-owners, and contributors.'
      RecipientId:
        $ref: '#/definitions/IdType'
        description: 'If the comment is a reply to another user''s comment, this field contains the user ID of the user being replied to.'
    description: Describes a comment.
  CommentList:
    type: array
    items:
      $ref: '#/definitions/Comment'
  ErrorMessageType:
    type: string
  CustomMetadataMap:
    type: array
    minItems: 1
    maxItems: 8
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/CustomMetadataKeyType'
        value:
          $ref: '#/definitions/CustomMetadataValueType'
  ResourceNameType:
    type: string
    pattern: '[\u0020-\u202D\u202F-\uFFFF]+'
    minLength: 1
    maxLength: 255
  FolderMetadata:
    type: object
    properties:
      Id:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the folder.
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the folder.
      CreatorId:
        $ref: '#/definitions/IdType'
        description: The ID of the creator.
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the folder was created.
      ModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the folder was updated.
      ResourceState:
        $ref: '#/definitions/ResourceStateType'
        description: The resource state of the folder.
      Signature:
        $ref: '#/definitions/HashType'
        description: The unique identifier created from the subfolders and documents of the folder.
      Labels:
        $ref: '#/definitions/SharedLabels'
        description: List of labels on the folder.
      Size:
        $ref: '#/definitions/SizeType'
        description: The size of the folder metadata.
      LatestVersionSize:
        $ref: '#/definitions/SizeType'
        description: The size of the latest version of the folder metadata.
    description: Describes a folder.
  SharedLabels:
    type: array
    items:
      $ref: '#/definitions/SharedLabel'
    maxItems: 20
  SubscriptionEndPointType:
    type: string
    minLength: 1
    maxLength: 256
  SubscriptionProtocolType:
    type: string
    enum:
      - HTTPS
  SubscriptionType:
    type: string
    enum:
      - ALL
  Subscription:
    type: object
    properties:
      SubscriptionId:
        $ref: '#/definitions/IdType'
        description: The ID of the subscription.
      EndPoint:
        $ref: '#/definitions/SubscriptionEndPointType'
        description: The endpoint of the subscription.
      Protocol:
        $ref: '#/definitions/SubscriptionProtocolType'
        description: The protocol of the subscription.
    description: Describes a subscription.
  UsernameType:
    type: string
    pattern: '[\w\-+.]+(@[a-zA-Z0-9.\-]+\.[a-zA-Z]+)?'
    minLength: 1
    maxLength: 256
  EmailAddressType:
    type: string
    pattern: '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
    minLength: 1
    maxLength: 256
  UserAttributeValueType:
    type: string
    minLength: 1
    maxLength: 64
  PasswordType:
    type: string
    pattern: '[\u0020-\u00FF]+'
    minLength: 4
    maxLength: 32
    format: password
  TimeZoneIdType:
    type: string
    minLength: 1
    maxLength: 256
  StorageRuleType:
    type: object
    properties:
      StorageAllocatedInBytes:
        $ref: '#/definitions/PositiveSizeType'
        description: 'The amount of storage allocated, in bytes.'
      StorageType:
        $ref: '#/definitions/StorageType'
        description: The type of storage.
    description: Describes the storage for a user.
  CustomMetadataKeyType:
    type: string
    pattern: '[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*'
    minLength: 1
    maxLength: 56
  CustomMetadataKeyList:
    type: array
    items:
      $ref: '#/definitions/CustomMetadataKeyType'
    maxItems: 8
  CustomMetadataValueType:
    type: string
    pattern: '[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*'
    minLength: 1
    maxLength: 256
  LimitType:
    type: integer
    minimum: 1
    maximum: 999
  MarkerType:
    type: string
    pattern: '[\u0000-\u00FF]+'
    minLength: 1
    maxLength: 2048
  UserActivities:
    type: array
    items:
      $ref: '#/definitions/Activity'
  PageMarkerType:
    type: string
    minLength: 1
    maxLength: 2048
  FieldNamesType:
    type: string
    pattern: '[\w,]+'
    minLength: 1
    maxLength: 256
  DocumentVersionMetadataList:
    type: array
    items:
      $ref: '#/definitions/DocumentVersionMetadata'
  ResourceSortType:
    type: string
    enum:
      - DATE
      - NAME
  OrderType:
    type: string
    enum:
      - ASCENDING
      - DESCENDING
  FolderContentType:
    type: string
    enum:
      - ALL
      - DOCUMENT
      - FOLDER
  FolderMetadataList:
    type: array
    items:
      $ref: '#/definitions/FolderMetadata'
  DocumentMetadataList:
    type: array
    items:
      $ref: '#/definitions/DocumentMetadata'
  SearchQueryType:
    type: string
    pattern: '[\u0020-\uFFFF]+'
    minLength: 1
    maxLength: 512
    format: password
  PositiveIntegerType:
    type: integer
    minimum: 1
  GroupMetadataList:
    type: array
    items:
      $ref: '#/definitions/GroupMetadata'
  SubscriptionList:
    type: array
    items:
      $ref: '#/definitions/Subscription'
    maxItems: 256
  PrincipalList:
    type: array
    items:
      $ref: '#/definitions/Principal'
  UserIdsType:
    type: string
    pattern: '[&\w+-.@, ]+'
    minLength: 1
    maxLength: 2000
  UserFilterType:
    type: string
    enum:
      - ALL
      - ACTIVE_PENDING
  UserSortType:
    type: string
    enum:
      - USER_NAME
      - FULL_NAME
      - STORAGE_LIMIT
      - USER_STATUS
      - STORAGE_USED
  OrganizationUserList:
    type: array
    items:
      $ref: '#/definitions/User'
  SizeType:
    type: integer
  DocumentContentType:
    type: string
    minLength: 1
    maxLength: 128
  DocumentVersionMetadata:
    type: object
    properties:
      Id:
        $ref: '#/definitions/DocumentVersionIdType'
        description: The ID of the version.
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the version.
      ContentType:
        $ref: '#/definitions/DocumentContentType'
        description: The content type of the document.
      Size:
        $ref: '#/definitions/SizeType'
        description: 'The size of the document, in bytes.'
      Signature:
        $ref: '#/definitions/HashType'
        description: The signature of the document.
      Status:
        $ref: '#/definitions/DocumentStatusType'
        description: The status of the document.
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The timestamp when the document was first uploaded.
      ModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The timestamp when the document was last uploaded.
      ContentCreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The timestamp when the content of the document was originally created.
      ContentModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The timestamp when the content of the document was modified.
      CreatorId:
        $ref: '#/definitions/IdType'
        description: The ID of the creator.
      Thumbnail:
        $ref: '#/definitions/DocumentThumbnailUrlMap'
        description: The thumbnail of the document.
      Source:
        $ref: '#/definitions/DocumentSourceUrlMap'
        description: The source of the document.
    description: Describes a version of a document.
  ResourceStateType:
    type: string
    enum:
      - ACTIVE
      - RESTORING
      - RECYCLING
      - RECYCLED
  DocumentMetadata:
    type: object
    properties:
      Id:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the document.
      CreatorId:
        $ref: '#/definitions/IdType'
        description: The ID of the creator.
      ParentFolderId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the parent folder.
      CreatedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the document was created.
      ModifiedTimestamp:
        $ref: '#/definitions/TimestampType'
        description: The time when the document was updated.
      LatestVersionMetadata:
        $ref: '#/definitions/DocumentVersionMetadata'
        description: The latest version of the document.
      ResourceState:
        $ref: '#/definitions/ResourceStateType'
        description: The resource state.
      Labels:
        $ref: '#/definitions/SharedLabels'
        description: List of labels on the document.
    description: Describes the document.
  DocumentSourceType:
    type: string
    enum:
      - ORIGINAL
      - WITH_COMMENTS
  UrlType:
    type: string
    minLength: 1
    maxLength: 1024
    format: password
  DocumentSourceUrlMap:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/DocumentSourceType'
        value:
          $ref: '#/definitions/UrlType'
  DocumentStatusType:
    type: string
    enum:
      - INITIALIZED
      - ACTIVE
  DocumentThumbnailType:
    type: string
    enum:
      - SMALL
      - SMALL_HQ
      - LARGE
  DocumentThumbnailUrlMap:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/DocumentThumbnailType'
        value:
          $ref: '#/definitions/UrlType'
  HashType:
    type: string
    pattern: '[&\w+-.@]+'
    minLength: 0
    maxLength: 128
  DocumentVersionStatus:
    type: string
    enum:
      - ACTIVE
  EntityIdList:
    type: array
    items:
      $ref: '#/definitions/IdType'
  ResourcePath:
    type: object
    properties:
      Components:
        $ref: '#/definitions/ResourcePathComponentList'
        description: The components of the resource path.
    description: Describes the path information of a resource.
  GroupNameType:
    type: string
  GroupMetadata:
    type: object
    properties:
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the user group.
      Name:
        $ref: '#/definitions/GroupNameType'
        description: The name of the group.
    description: Describes the metadata of a user group.
  HeaderNameType:
    type: string
    pattern: '[\w-]+'
    minLength: 1
    maxLength: 256
  HeaderValueType:
    type: string
    minLength: 1
    maxLength: 1024
  UploadMetadata:
    type: object
    properties:
      UploadUrl:
        $ref: '#/definitions/UrlType'
        description: The URL of the upload.
      SignedHeaders:
        $ref: '#/definitions/SignedHeaderMap'
        description: The signed headers.
    description: Describes the upload.
  LocaleType:
    type: string
    enum:
      - en
      - fr
      - ko
      - de
      - es
      - ja
      - ru
      - zh_CN
      - zh_TW
      - pt_BR
      - default
  MessageType:
    type: string
    minLength: 0
    maxLength: 2048
    format: password
  UserMetadataList:
    type: array
    items:
      $ref: '#/definitions/UserMetadata'
  RoleType:
    type: string
    enum:
      - VIEWER
      - CONTRIBUTOR
      - OWNER
      - COOWNER
  RolePermissionType:
    type: string
    enum:
      - DIRECT
      - INHERITED
  PermissionInfo:
    type: object
    properties:
      Role:
        $ref: '#/definitions/RoleType'
        description: The role of the user.
      Type:
        $ref: '#/definitions/RolePermissionType'
        description: The type of permissions.
    description: Describes the permissions.
  PermissionInfoList:
    type: array
    items:
      $ref: '#/definitions/PermissionInfo'
  PositiveSizeType:
    type: integer
    minimum: 0
  PrincipalType:
    type: string
    enum:
      - USER
      - GROUP
      - INVITE
      - ANONYMOUS
      - ORGANIZATION
  Principal:
    type: object
    properties:
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the resource.
      Type:
        $ref: '#/definitions/PrincipalType'
        description: The type of resource.
      Roles:
        $ref: '#/definitions/PermissionInfoList'
        description: The permission information for the resource.
    description: Describes a resource.
  ResourceType:
    type: string
    enum:
      - FOLDER
      - DOCUMENT
  ResourcePathComponentList:
    type: array
    items:
      $ref: '#/definitions/ResourcePathComponent'
  ResourcePathComponent:
    type: object
    properties:
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the resource path.
      Name:
        $ref: '#/definitions/ResourceNameType'
        description: The name of the resource path.
    description: Describes the resource path.
  SharePrincipal:
    type: object
    required:
      - Id
      - Type
      - Role
    properties:
      Id:
        $ref: '#/definitions/IdType'
        description: The ID of the recipient.
      Type:
        $ref: '#/definitions/PrincipalType'
        description: The type of the recipient.
      Role:
        $ref: '#/definitions/RoleType'
        description: The role of the recipient.
    description: 'Describes the recipient type and ID, if available.'
  ShareStatusType:
    type: string
    enum:
      - SUCCESS
      - FAILURE
  ShareResult:
    type: object
    properties:
      PrincipalId:
        $ref: '#/definitions/IdType'
        description: The ID of the principal.
      Role:
        $ref: '#/definitions/RoleType'
        description: The role.
      Status:
        $ref: '#/definitions/ShareStatusType'
        description: The status.
      ShareId:
        $ref: '#/definitions/ResourceIdType'
        description: The ID of the resource that was shared.
      StatusMessage:
        $ref: '#/definitions/MessageType'
        description: The status message.
    description: Describes the share results of a resource.
  SharedLabel:
    type: string
    pattern: '[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*'
    minLength: 1
    maxLength: 32
  SignedHeaderMap:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/HeaderNameType'
        value:
          $ref: '#/definitions/HeaderValueType'
  StorageType:
    type: string
    enum:
      - UNLIMITED
      - QUOTA
  UserType:
    type: string
    enum:
      - USER
      - ADMIN
      - POWERUSER
      - MINIMALUSER
      - WORKSPACESUSER
  UserStatusType:
    type: string
    enum:
      - ACTIVE
      - INACTIVE
      - PENDING
  UserStorageMetadata:
    type: object
    properties:
      StorageUtilizedInBytes:
        $ref: '#/definitions/SizeType'
        description: 'The amount of storage used, in bytes.'
      StorageRule:
        $ref: '#/definitions/StorageRuleType'
        description: The storage for a user.
    description: Describes the storage for a user.
